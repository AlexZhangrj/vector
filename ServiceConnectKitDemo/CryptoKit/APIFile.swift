//
//  APIFile.swift
//  ServiceConnectKitDemo
//
//  Created by CaiLianfeng on 2016/9/23.
//  Copyright © 2016年 WangQinghai. All rights reserved.
//

import Foundation


import Foundation
import OpenSSL
import SwiftOnoneSupport

/* crypto/stack/stack.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

public struct stack_st {

    public var num: Int32

    public var data: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!

    public var sorted: Int32

    public var num_alloc: Int32

    public var comp: (@convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32)!

    public init()

    public init(num: Int32, data: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, sorted: Int32, num_alloc: Int32, comp: (@escaping @convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32)!)
}
public typealias _STACK = stack_st
/* Use STACK_OF(...) instead */

public func sk_num(_: UnsafePointer<_STACK>!) -> Int32
public func sk_value(_: UnsafePointer<_STACK>!, _: Int32) -> UnsafeMutableRawPointer!

public func sk_set(_: UnsafeMutablePointer<_STACK>!, _: Int32, _: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!

public func sk_new(_ cmp: (@escaping @convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32)!) -> UnsafeMutablePointer<_STACK>!
public func sk_new_null() -> UnsafeMutablePointer<_STACK>!
public func sk_free(_: UnsafeMutablePointer<_STACK>!)
public func sk_pop_free(_ st: UnsafeMutablePointer<_STACK>!, _ func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!)
public func sk_deep_copy(_: UnsafeMutablePointer<_STACK>!, _: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> UnsafeMutableRawPointer?)!, _: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!) -> UnsafeMutablePointer<_STACK>!
public func sk_insert(_ sk: UnsafeMutablePointer<_STACK>!, _ data: UnsafeMutableRawPointer!, _ where: Int32) -> Int32
public func sk_delete(_ st: UnsafeMutablePointer<_STACK>!, _ loc: Int32) -> UnsafeMutableRawPointer!
public func sk_delete_ptr(_ st: UnsafeMutablePointer<_STACK>!, _ p: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func sk_find(_ st: UnsafeMutablePointer<_STACK>!, _ data: UnsafeMutableRawPointer!) -> Int32
public func sk_find_ex(_ st: UnsafeMutablePointer<_STACK>!, _ data: UnsafeMutableRawPointer!) -> Int32
public func sk_push(_ st: UnsafeMutablePointer<_STACK>!, _ data: UnsafeMutableRawPointer!) -> Int32
public func sk_unshift(_ st: UnsafeMutablePointer<_STACK>!, _ data: UnsafeMutableRawPointer!) -> Int32
public func sk_shift(_ st: UnsafeMutablePointer<_STACK>!) -> UnsafeMutableRawPointer!
public func sk_pop(_ st: UnsafeMutablePointer<_STACK>!) -> UnsafeMutableRawPointer!
public func sk_zero(_ st: UnsafeMutablePointer<_STACK>!)
public func sk_set_cmp_func(_ sk: UnsafeMutablePointer<_STACK>!, _ c: (@escaping @convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32)!) -> (@convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32)!
public func sk_dup(_ st: UnsafeMutablePointer<_STACK>!) -> UnsafeMutablePointer<_STACK>!
public func sk_sort(_ st: UnsafeMutablePointer<_STACK>!)
public func sk_is_sorted(_ st: UnsafePointer<_STACK>!) -> Int32
/* ====================================================================
 * Copyright (c) 1999 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

/*
 * In C++ we get problems because an explicit cast is needed from (void *) we
 * use CHECKED_STACK_OF to ensure the correct type is passed in the macros
 * below.
 */

/* nada (obsolete in new safestack approach)*/

/*-
 * Strings are special: normally an lhash entry will point to a single
 * (somewhat) mutable object. In the case of strings:
 *
 * a) Instead of a single char, there is an array of chars, NUL-terminated.
 * b) The string may have be immutable.
 *
 * So, they need their own declarations. Especially important for
 * type-checking tools, such as Deputy.
 *
 * In practice, however, it appears to be hard to have a const
 * string. For now, I'm settling for dealing with the fact it is a
 * string at all.
 */
public typealias OPENSSL_STRING = UnsafeMutablePointer<Int8>

public typealias OPENSSL_CSTRING = UnsafePointer<Int8>

/*
 * Confusingly, LHASH_OF(STRING) deals with char ** throughout, but
 * STACK_OF(STRING) is really more like STACK_OF(char), only, as mentioned
 * above, instead of a single char each entry is a NUL-terminated array of
 * chars. So, we have to implement STRING specially for STACK_OF. This is
 * dealt with in the autogenerated macros below.
 */

public struct stack_st_OPENSSL_STRING {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/*
 * Similarly, we sometimes use a block of characters, NOT nul-terminated.
 * These should also be distinguished from "normal" stacks.
 */
public typealias OPENSSL_BLOCK = UnsafeMutableRawPointer
public struct stack_st_OPENSSL_BLOCK {

    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}
/*-
 * Numeric release version identifier:
 * MNNFFPPS: major minor fix patch status
 * The status nibble has one of the values 0 for development, 1 to e for betas
 * 1 to 14, and f for release.  The patch level is exactly that.
 * For example:
 * 0.9.3-dev      0x00903000
 * 0.9.3-beta1    0x00903001
 * 0.9.3-beta2-dev 0x00903002
 * 0.9.3-beta2    0x00903002 (same as ...beta2-dev)
 * 0.9.3          0x0090300f
 * 0.9.3a         0x0090301f
 * 0.9.4          0x0090400f
 * 1.2.3z         0x102031af
 *
 * For continuity reasons (because 0.9.5 is already out, and is coded
 * 0x00905100), between 0.9.5 and 0.9.6 the coding of the patch level
 * part is slightly different, by setting the highest bit.  This means
 * that 0.9.5a looks like this: 0x0090581f.  At 0.9.6, we can start
 * with 0x0090600S...
 *
 * (Prior to 0.9.3-dev a different scheme was used: 0.9.2b is 0x0922.)
 * (Prior to 0.9.5a beta1, a different scheme was used: MMNNFFRBB for
 *  major minor fix final patch/beta)
 */
public var OPENSSL_VERSION_NUMBER: Int { get }

public var OPENSSL_VERSION_TEXT: String { get }

/*-
 * The macros below are to be used for shared library (.so, .dll, ...)
 * versioning.  That kind of versioning works a bit differently between
 * operating systems.  The most usual scheme is to set a major and a minor
 * number, and have the runtime loader check that the major number is equal
 * to what it was at application link time, while the minor number has to
 * be greater or equal to what it was at application link time.  With this
 * scheme, the version number is usually part of the file name, like this:
 *
 *      libcrypto.so.0.9
 *
 * Some unixen also make a softlink with the major verson number only:
 *
 *      libcrypto.so.0
 *
 * On Tru64 and IRIX 6.x it works a little bit differently.  There, the
 * shared library version is stored in the file, and is actually a series
 * of versions, separated by colons.  The rightmost version present in the
 * library when linking an application is stored in the application to be
 * matched at run time.  When the application is run, a check is done to
 * see if the library version stored in the application matches any of the
 * versions in the version string of the library itself.
 * This version string can be constructed in any way, depending on what
 * kind of matching is desired.  However, to implement the same scheme as
 * the one used in the other unixen, all compatible versions, from lowest
 * to highest, should be part of the string.  Consecutive builds would
 * give the following versions strings:
 *
 *      3.0
 *      3.0:3.1
 *      3.0:3.1:3.2
 *      4.0
 *      4.0:4.1
 *
 * Notice how version 4 is completely incompatible with version, and
 * therefore give the breach you can see.
 *
 * There may be other schemes as well that I haven't yet discovered.
 *
 * So, here's the way it works here: first of all, the library version
 * number doesn't need at all to match the overall OpenSSL version.
 * However, it's nice and more understandable if it actually does.
 * The current library version is stored in the macro SHLIB_VERSION_NUMBER,
 * which is just a piece of text in the format "M.m.e" (Major, minor, edit).
 * For the sake of Tru64, IRIX, and any other OS that behaves in similar ways,
 * we need to keep a history of version numbers, which is done in the
 * macro SHLIB_VERSION_HISTORY.  The numbers are separated by colons and
 * should only keep the versions that are binary compatible with the current.
 */
public var SHLIB_VERSION_HISTORY: String { get }
public var SHLIB_VERSION_NUMBER: String { get }
/* ====================================================================
 * Copyright (c) 1998-2001 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

public typealias ASN1_INTEGER = asn1_string_st
public typealias ASN1_ENUMERATED = asn1_string_st
public typealias ASN1_BIT_STRING = asn1_string_st
public typealias ASN1_OCTET_STRING = asn1_string_st
public typealias ASN1_PRINTABLESTRING = asn1_string_st
public typealias ASN1_T61STRING = asn1_string_st
public typealias ASN1_IA5STRING = asn1_string_st
public typealias ASN1_GENERALSTRING = asn1_string_st
public typealias ASN1_UNIVERSALSTRING = asn1_string_st
public typealias ASN1_BMPSTRING = asn1_string_st
public typealias ASN1_UTCTIME = asn1_string_st
public typealias ASN1_TIME = asn1_string_st
public typealias ASN1_GENERALIZEDTIME = asn1_string_st
public typealias ASN1_VISIBLESTRING = asn1_string_st
public typealias ASN1_UTF8STRING = asn1_string_st
public typealias ASN1_STRING = asn1_string_st
public typealias ASN1_BOOLEAN = Int32
public typealias ASN1_NULL = Int32

public typealias ASN1_OBJECT = asn1_object_st

public typealias BIGNUM = bignum_st

public typealias BN_MONT_CTX = bn_mont_ctx_st
public typealias BN_RECP_CTX = bn_recp_ctx_st
public typealias BN_GENCB = bn_gencb_st

public typealias BUF_MEM = buf_mem_st

public typealias EVP_CIPHER = evp_cipher_st
public typealias EVP_CIPHER_CTX = evp_cipher_ctx_st
public typealias EVP_MD = env_md_st
public typealias EVP_MD_CTX = env_md_ctx_st
public typealias EVP_PKEY = evp_pkey_st

public typealias DH = dh_st
public typealias DH_METHOD = dh_method

public typealias DSA = dsa_st
public typealias DSA_METHOD = dsa_method

public typealias RSA = rsa_st
public typealias RSA_METHOD = rsa_meth_st

public typealias RAND_METHOD = rand_meth_st

public typealias X509 = x509_st
public typealias X509_ALGOR = X509_algor_st
public typealias X509_CRL = X509_crl_st

public typealias X509_REVOKED = x509_revoked_st
public typealias X509_NAME = X509_name_st
public typealias X509_PUBKEY = X509_pubkey_st
public typealias X509_STORE = x509_store_st
public typealias X509_STORE_CTX = x509_store_ctx_st

public typealias PKCS8_PRIV_KEY_INFO = pkcs8_priv_key_info_st

public typealias CONF = conf_st

public typealias SSL = ssl_st
public typealias SSL_CTX = ssl_ctx_st

/* If placed in pkcs12.h, we end up with a circular depency with pkcs7.h */
/* Nothing */
/* Nothing */

public typealias CRYPTO_EX_DATA = crypto_ex_data_st
/* Callback types for crypto.h */
public typealias CRYPTO_EX_new = (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32
public typealias CRYPTO_EX_free = (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void
public typealias CRYPTO_EX_dup = (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32
/* crypto/crypto.h */
/* ====================================================================
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECDH support in OpenSSL originally developed by
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */

/*
 * Resolve problems on some operating systems with symbol names that clash
 * one way or another
 */

/* Backward compatibility to SSLeay */
/*
 * This is more to be used to check the correct DLL is being used in the MS
 * world.
 */
public var SSLEAY_VERSION_NUMBER: Int { get }
public var SSLEAY_VERSION: Int32 { get }
/* #define SSLEAY_OPTIONS       1 no longer supported */
public var SSLEAY_CFLAGS: Int32 { get }
public var SSLEAY_BUILT_ON: Int32 { get }
public var SSLEAY_PLATFORM: Int32 { get }
public var SSLEAY_DIR: Int32 { get }

/* Already declared in ossl_typ.h */

/* Called when a new object is created */

/* Called when an object is free()ed */

/* Called when we need to dup an object */

/* A generic structure to pass assorted data in a expandable way */
public struct openssl_item_st {

    public var code: Int32

    public var value: UnsafeMutableRawPointer! /* Not used for flag attributes */

    public var value_size: Int /* Max size of value for output, length for
                                 * input */

    
    public var value_length: UnsafeMutablePointer<Int>! /* Returned length of value for output */

    public init()

    public init(code: Int32, value: UnsafeMutableRawPointer!, value_size: Int, value_length: UnsafeMutablePointer<Int>!)
}
public typealias OPENSSL_ITEM = openssl_item_st

/*
 * When changing the CRYPTO_LOCK_* list, be sure to maintin the text lock
 * names in cryptlib.c
 */

public var CRYPTO_LOCK_ERR: Int32 { get }
public var CRYPTO_LOCK_EX_DATA: Int32 { get }
public var CRYPTO_LOCK_X509: Int32 { get }
public var CRYPTO_LOCK_X509_INFO: Int32 { get }
public var CRYPTO_LOCK_X509_PKEY: Int32 { get }
public var CRYPTO_LOCK_X509_CRL: Int32 { get }
public var CRYPTO_LOCK_X509_REQ: Int32 { get }
public var CRYPTO_LOCK_DSA: Int32 { get }
public var CRYPTO_LOCK_RSA: Int32 { get }
public var CRYPTO_LOCK_EVP_PKEY: Int32 { get }
public var CRYPTO_LOCK_X509_STORE: Int32 { get }
public var CRYPTO_LOCK_SSL_CTX: Int32 { get }
public var CRYPTO_LOCK_SSL_CERT: Int32 { get }
public var CRYPTO_LOCK_SSL_SESSION: Int32 { get }
public var CRYPTO_LOCK_SSL_SESS_CERT: Int32 { get }
public var CRYPTO_LOCK_SSL: Int32 { get }
public var CRYPTO_LOCK_SSL_METHOD: Int32 { get }
public var CRYPTO_LOCK_RAND: Int32 { get }
public var CRYPTO_LOCK_RAND2: Int32 { get }
public var CRYPTO_LOCK_MALLOC: Int32 { get }
public var CRYPTO_LOCK_BIO: Int32 { get }
public var CRYPTO_LOCK_GETHOSTBYNAME: Int32 { get }
public var CRYPTO_LOCK_GETSERVBYNAME: Int32 { get }
public var CRYPTO_LOCK_READDIR: Int32 { get }
public var CRYPTO_LOCK_RSA_BLINDING: Int32 { get }
public var CRYPTO_LOCK_DH: Int32 { get }
public var CRYPTO_LOCK_MALLOC2: Int32 { get }
public var CRYPTO_LOCK_DSO: Int32 { get }
public var CRYPTO_LOCK_DYNLOCK: Int32 { get }
public var CRYPTO_LOCK_ENGINE: Int32 { get }
public var CRYPTO_LOCK_UI: Int32 { get }
public var CRYPTO_LOCK_ECDSA: Int32 { get }
public var CRYPTO_LOCK_EC: Int32 { get }
public var CRYPTO_LOCK_ECDH: Int32 { get }
public var CRYPTO_LOCK_BN: Int32 { get }
public var CRYPTO_LOCK_EC_PRE_COMP: Int32 { get }
public var CRYPTO_LOCK_STORE: Int32 { get }
public var CRYPTO_LOCK_COMP: Int32 { get }
public var CRYPTO_LOCK_FIPS: Int32 { get }
public var CRYPTO_LOCK_FIPS2: Int32 { get }
public var CRYPTO_NUM_LOCKS: Int32 { get }

public var CRYPTO_LOCK: Int32 { get }
public var CRYPTO_UNLOCK: Int32 { get }
public var CRYPTO_READ: Int32 { get }
public var CRYPTO_WRITE: Int32 { get }

/*
 * Some applications as well as some parts of OpenSSL need to allocate and
 * deallocate locks in a dynamic fashion.  The following typedef makes this
 * possible in a type-safe manner.
 */
/* struct CRYPTO_dynlock_value has to be defined by the application. */
public struct CRYPTO_dynlock {

    public var references: Int32

    public var data: OpaquePointer!

    public init()
}

/*
 * The following can be used to detect memory leaks in the SSLeay library. It
 * used, it turns on malloc checking
 */

public var CRYPTO_MEM_CHECK_OFF: Int32 { get } /* an enume */
public var CRYPTO_MEM_CHECK_ON: Int32 { get } /* a bit */
public var CRYPTO_MEM_CHECK_ENABLE: Int32 { get } /* a bit */
public var CRYPTO_MEM_CHECK_DISABLE: Int32 { get } /* an enume */

/*
 * The following are bit values to turn on or off options connected to the
 * malloc checking functionality
 */

/* Adds time to the memory checking information */
public var V_CRYPTO_MDEBUG_TIME: Int32 { get } /* a bit */
/* Adds thread number to the memory checking information */
public var V_CRYPTO_MDEBUG_THREAD: Int32 { get } /* a bit */

/* predec of the BIO type */
public typealias BIO_dummy = bio_st

public struct crypto_ex_data_st {

    public var sk: UnsafeMutablePointer<stack_st_void>!

    /* gcc is screwing up this data structure :-( */
    public var dummy: Int32

    public init()

    public init(sk: UnsafeMutablePointer<stack_st_void>!, dummy: Int32)
}
public struct stack_st_void {

    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/*
 * This stuff is basically class callback functions The current classes are
 * SSL_CTX, SSL, SSL_SESSION, and a few more
 */

public struct crypto_ex_data_func_st {

    public var argl: Int /* Arbitary long */

    public var argp: UnsafeMutableRawPointer! /* Arbitary void * */

    public var new_func: (@convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!

    public var free_func: (@convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!

    public var dup_func: (@convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!

    public init()

    public init(argl: Int, argp: UnsafeMutableRawPointer!, new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!, dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!)
}
public typealias CRYPTO_EX_DATA_FUNCS = crypto_ex_data_func_st

public struct stack_st_CRYPTO_EX_DATA_FUNCS {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/*
 * Per class, we have a STACK of CRYPTO_EX_DATA_FUNCS for each CRYPTO_EX_DATA
 * entry.
 */

public var CRYPTO_EX_INDEX_BIO: Int32 { get }
public var CRYPTO_EX_INDEX_SSL: Int32 { get }
public var CRYPTO_EX_INDEX_SSL_CTX: Int32 { get }
public var CRYPTO_EX_INDEX_SSL_SESSION: Int32 { get }
public var CRYPTO_EX_INDEX_X509_STORE: Int32 { get }
public var CRYPTO_EX_INDEX_X509_STORE_CTX: Int32 { get }
public var CRYPTO_EX_INDEX_RSA: Int32 { get }
public var CRYPTO_EX_INDEX_DSA: Int32 { get }
public var CRYPTO_EX_INDEX_DH: Int32 { get }
public var CRYPTO_EX_INDEX_ENGINE: Int32 { get }
public var CRYPTO_EX_INDEX_X509: Int32 { get }
public var CRYPTO_EX_INDEX_UI: Int32 { get }
public var CRYPTO_EX_INDEX_ECDSA: Int32 { get }
public var CRYPTO_EX_INDEX_ECDH: Int32 { get }
public var CRYPTO_EX_INDEX_COMP: Int32 { get }
public var CRYPTO_EX_INDEX_STORE: Int32 { get }

/*
 * Dynamically assigned indexes start from this value (don't use directly,
 * use via CRYPTO_ex_data_new_class).
 */
public var CRYPTO_EX_INDEX_USER: Int32 { get }

/*
 * This is the default callbacks, but we can have others as well: this is
 * needed in Win32 where the application malloc and the library malloc may
 * not be the same.
 */

/* avoid duplicate #define */

/*
 * Set standard debugging functions (not done by default unless CRYPTO_MDEBUG
 * is defined)
 */

public func CRYPTO_mem_ctrl(_ mode: Int32) -> Int32
public func CRYPTO_is_mem_check_on() -> Int32

/* for applications */

/* for library-internal use */

public func SSLeay_version(_ type: Int32) -> UnsafePointer<Int8>!
public func SSLeay() -> UInt

public func OPENSSL_issetugid() -> Int32

/* An opaque type representing an implementation of "ex_data" support */

/* Return an opaque pointer to the current "ex_data" implementation */
public func CRYPTO_get_ex_data_implementation() -> OpaquePointer!
/* Sets the "ex_data" implementation to be used (if it's not too late) */
public func CRYPTO_set_ex_data_implementation(_ i: OpaquePointer!) -> Int32
/* Get a new "ex_data" class, and return the corresponding "class_index" */
public func CRYPTO_ex_data_new_class() -> Int32
/* Within a given class, get/register a new index */
public func CRYPTO_get_ex_new_index(_ class_index: Int32, _ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
/*
 * Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a
 * given class (invokes whatever per-class callbacks are applicable)
 */
public func CRYPTO_new_ex_data(_ class_index: Int32, _ obj: UnsafeMutableRawPointer!, _ ad: UnsafeMutablePointer<CRYPTO_EX_DATA>!) -> Int32
public func CRYPTO_dup_ex_data(_ class_index: Int32, _ to: UnsafeMutablePointer<CRYPTO_EX_DATA>!, _ from: UnsafeMutablePointer<CRYPTO_EX_DATA>!) -> Int32
public func CRYPTO_free_ex_data(_ class_index: Int32, _ obj: UnsafeMutableRawPointer!, _ ad: UnsafeMutablePointer<CRYPTO_EX_DATA>!)
/*
 * Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular
 * index (relative to the class type involved)
 */
public func CRYPTO_set_ex_data(_ ad: UnsafeMutablePointer<CRYPTO_EX_DATA>!, _ idx: Int32, _ val: UnsafeMutableRawPointer!) -> Int32
public func CRYPTO_get_ex_data(_ ad: UnsafePointer<CRYPTO_EX_DATA>!, _ idx: Int32) -> UnsafeMutableRawPointer!
/*
 * This function cleans up all "ex_data" state. It mustn't be called under
 * potential race-conditions.
 */
public func CRYPTO_cleanup_all_ex_data()

public func CRYPTO_get_new_lockid(_ name: UnsafeMutablePointer<Int8>!) -> Int32

public func CRYPTO_num_locks() -> Int32 /* return CRYPTO_NUM_LOCKS (shared libs!) */
public func CRYPTO_lock(_ mode: Int32, _ type: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32)
public func CRYPTO_set_locking_callback(_ func: (@escaping @convention(c) (Int32, Int32, UnsafePointer<Int8>?, Int32) -> Swift.Void)!)
public func CRYPTO_get_locking_callback() -> (@convention(c) (Int32, Int32, UnsafePointer<Int8>?, Int32) -> Swift.Void)!
public func CRYPTO_set_add_lock_callback(_ func: (@escaping @convention(c) (UnsafeMutablePointer<Int32>?, Int32, Int32, UnsafePointer<Int8>?, Int32) -> Int32)!)
public func CRYPTO_get_add_lock_callback() -> (@convention(c) (UnsafeMutablePointer<Int32>?, Int32, Int32, UnsafePointer<Int8>?, Int32) -> Int32)!

/* Don't use this structure directly. */
public struct crypto_threadid_st {

    public var ptr: UnsafeMutableRawPointer!

    public var val: UInt

    public init()

    public init(ptr: UnsafeMutableRawPointer!, val: UInt)
}
public typealias CRYPTO_THREADID = crypto_threadid_st
/* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
public func CRYPTO_THREADID_set_numeric(_ id: UnsafeMutablePointer<CRYPTO_THREADID>!, _ val: UInt)
public func CRYPTO_THREADID_set_pointer(_ id: UnsafeMutablePointer<CRYPTO_THREADID>!, _ ptr: UnsafeMutableRawPointer!)
public func CRYPTO_THREADID_set_callback(_ threadid_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_THREADID>?) -> Swift.Void)!) -> Int32
public func CRYPTO_THREADID_get_callback() -> (@convention(c) (UnsafeMutablePointer<CRYPTO_THREADID>?) -> Swift.Void)!
public func CRYPTO_THREADID_current(_ id: UnsafeMutablePointer<CRYPTO_THREADID>!)
public func CRYPTO_THREADID_cmp(_ a: UnsafePointer<CRYPTO_THREADID>!, _ b: UnsafePointer<CRYPTO_THREADID>!) -> Int32
public func CRYPTO_THREADID_cpy(_ dest: UnsafeMutablePointer<CRYPTO_THREADID>!, _ src: UnsafePointer<CRYPTO_THREADID>!)
public func CRYPTO_THREADID_hash(_ id: UnsafePointer<CRYPTO_THREADID>!) -> UInt

public func CRYPTO_set_id_callback(_ func: (@escaping @convention(c) () -> UInt)!)
public func CRYPTO_get_id_callback() -> (@convention(c) () -> UInt)!
public func CRYPTO_thread_id() -> UInt

public func CRYPTO_get_lock_name(_ type: Int32) -> UnsafePointer<Int8>!
public func CRYPTO_add_lock(_ pointer: UnsafeMutablePointer<Int32>!, _ amount: Int32, _ type: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32) -> Int32

public func CRYPTO_get_new_dynlockid() -> Int32
public func CRYPTO_destroy_dynlockid(_ i: Int32)
public func CRYPTO_get_dynlock_value(_ i: Int32) -> OpaquePointer!
public func CRYPTO_set_dynlock_create_callback(_ dyn_create_function: (@escaping @convention(c) (UnsafePointer<Int8>?, Int32) -> OpaquePointer?)!)
public func CRYPTO_set_dynlock_lock_callback(_ dyn_lock_function: (@escaping @convention(c) (Int32, OpaquePointer?, UnsafePointer<Int8>?, Int32) -> Swift.Void)!)
public func CRYPTO_set_dynlock_destroy_callback(_ dyn_destroy_function: (@escaping @convention(c) (OpaquePointer?, UnsafePointer<Int8>?, Int32) -> Swift.Void)!)
public func CRYPTO_get_dynlock_create_callback() -> (@convention(c) (UnsafePointer<Int8>?, Int32) -> OpaquePointer?)!
public func CRYPTO_get_dynlock_lock_callback() -> (@convention(c) (Int32, OpaquePointer?, UnsafePointer<Int8>?, Int32) -> Swift.Void)!
public func CRYPTO_get_dynlock_destroy_callback() -> (@convention(c) (OpaquePointer?, UnsafePointer<Int8>?, Int32) -> Swift.Void)!

/*
 * CRYPTO_set_mem_functions includes CRYPTO_set_locked_mem_functions -- call
 * the latter last if you need different functions
 */
public func CRYPTO_set_mem_functions(_ m: (@escaping @convention(c) (Int) -> UnsafeMutableRawPointer?)!, _ r: (@escaping @convention(c) (UnsafeMutableRawPointer?, Int) -> UnsafeMutableRawPointer?)!, _ f: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func CRYPTO_set_locked_mem_functions(_ m: (@escaping @convention(c) (Int) -> UnsafeMutableRawPointer?)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func CRYPTO_set_mem_ex_functions(_ m: (@escaping @convention(c) (Int, UnsafePointer<Int8>?, Int32) -> UnsafeMutableRawPointer?)!, _ r: (@escaping @convention(c) (UnsafeMutableRawPointer?, Int, UnsafePointer<Int8>?, Int32) -> UnsafeMutableRawPointer?)!, _ f: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func CRYPTO_set_locked_mem_ex_functions(_ m: (@escaping @convention(c) (Int, UnsafePointer<Int8>?, Int32) -> UnsafeMutableRawPointer?)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func CRYPTO_set_mem_debug_functions(_ m: (@escaping @convention(c) (UnsafeMutableRawPointer?, Int32, UnsafePointer<Int8>?, Int32, Int32) -> Swift.Void)!, _ r: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, Int32, UnsafePointer<Int8>?, Int32, Int32) -> Swift.Void)!, _ f: (@escaping @convention(c) (UnsafeMutableRawPointer?, Int32) -> Swift.Void)!, _ so: (@escaping @convention(c) (Int) -> Swift.Void)!, _ go: (@escaping @convention(c) () -> Int)!) -> Int32
public func CRYPTO_get_mem_functions(_ m: UnsafeMutablePointer<(@escaping @convention(c) (Int) -> UnsafeMutableRawPointer?)?>!, _ r: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?, Int) -> UnsafeMutableRawPointer?)?>!, _ f: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)?>!)
public func CRYPTO_get_locked_mem_functions(_ m: UnsafeMutablePointer<(@escaping @convention(c) (Int) -> UnsafeMutableRawPointer?)?>!, _ f: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)?>!)
public func CRYPTO_get_mem_ex_functions(_ m: UnsafeMutablePointer<(@escaping @convention(c) (Int, UnsafePointer<Int8>?, Int32) -> UnsafeMutableRawPointer?)?>!, _ r: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?, Int, UnsafePointer<Int8>?, Int32) -> UnsafeMutableRawPointer?)?>!, _ f: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)?>!)
public func CRYPTO_get_locked_mem_ex_functions(_ m: UnsafeMutablePointer<(@escaping @convention(c) (Int, UnsafePointer<Int8>?, Int32) -> UnsafeMutableRawPointer?)?>!, _ f: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)?>!)
public func CRYPTO_get_mem_debug_functions(_ m: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?, Int32, UnsafePointer<Int8>?, Int32, Int32) -> Swift.Void)?>!, _ r: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, Int32, UnsafePointer<Int8>?, Int32, Int32) -> Swift.Void)?>!, _ f: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutableRawPointer?, Int32) -> Swift.Void)?>!, _ so: UnsafeMutablePointer<(@escaping @convention(c) (Int) -> Swift.Void)?>!, _ go: UnsafeMutablePointer<(@escaping @convention(c) () -> Int)?>!)

public func CRYPTO_malloc_locked(_ num: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32) -> UnsafeMutableRawPointer!
public func CRYPTO_free_locked(_ ptr: UnsafeMutableRawPointer!)
public func CRYPTO_malloc(_ num: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32) -> UnsafeMutableRawPointer!
public func CRYPTO_strdup(_ str: UnsafePointer<Int8>!, _ file: UnsafePointer<Int8>!, _ line: Int32) -> UnsafeMutablePointer<Int8>!
public func CRYPTO_free(_ ptr: UnsafeMutableRawPointer!)
public func CRYPTO_realloc(_ addr: UnsafeMutableRawPointer!, _ num: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32) -> UnsafeMutableRawPointer!
public func CRYPTO_realloc_clean(_ addr: UnsafeMutableRawPointer!, _ old_num: Int32, _ num: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32) -> UnsafeMutableRawPointer!
public func CRYPTO_remalloc(_ addr: UnsafeMutableRawPointer!, _ num: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32) -> UnsafeMutableRawPointer!

public func OPENSSL_cleanse(_ ptr: UnsafeMutableRawPointer!, _ len: Int)

public func CRYPTO_set_mem_debug_options(_ bits: Int)
public func CRYPTO_get_mem_debug_options() -> Int

public func CRYPTO_push_info_(_ info: UnsafePointer<Int8>!, _ file: UnsafePointer<Int8>!, _ line: Int32) -> Int32
public func CRYPTO_pop_info() -> Int32
public func CRYPTO_remove_all_info() -> Int32

/*
 * Default debugging functions (enabled by CRYPTO_malloc_debug_init() macro;
 * used as default in CRYPTO_MDEBUG compilations):
 */
/*-
 * The last argument has the following significance:
 *
 * 0:   called before the actual memory allocation has taken place
 * 1:   called after the actual memory allocation has taken place
 */
public func CRYPTO_dbg_malloc(_ addr: UnsafeMutableRawPointer!, _ num: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32, _ before_p: Int32)
public func CRYPTO_dbg_realloc(_ addr1: UnsafeMutableRawPointer!, _ addr2: UnsafeMutableRawPointer!, _ num: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32, _ before_p: Int32)
public func CRYPTO_dbg_free(_ addr: UnsafeMutableRawPointer!, _ before_p: Int32)
/*-
 * Tell the debugging code about options.  By default, the following values
 * apply:
 *
 * 0:                           Clear all options.
 * V_CRYPTO_MDEBUG_TIME (1):    Set the "Show Time" option.
 * V_CRYPTO_MDEBUG_THREAD (2):  Set the "Show Thread Number" option.
 * V_CRYPTO_MDEBUG_ALL (3):     1 + 2
 */
public func CRYPTO_dbg_set_options(_ bits: Int)
public func CRYPTO_dbg_get_options() -> Int

public func CRYPTO_mem_leaks_fp(_: UnsafeMutablePointer<FILE>!)

public func CRYPTO_mem_leaks(_ bio: UnsafeMutablePointer<bio_st>!)
/* unsigned long order, char *file, int line, int num_bytes, char *addr */
public typealias CRYPTO_MEM_LEAK_CB = (UInt, UnsafePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> UnsafeMutableRawPointer?
public func CRYPTO_mem_leaks_cb(_ cb: (@escaping @convention(c) (UInt, UnsafePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> UnsafeMutableRawPointer?)!)

/* die if we have to */
public func OpenSSLDie(_ file: UnsafePointer<Int8>!, _ line: Int32, _ assertion: UnsafePointer<Int8>!)

public func OPENSSL_ia32cap_loc() -> UnsafeMutablePointer<UInt>!

public func OPENSSL_isservice() -> Int32

public func FIPS_mode() -> Int32
public func FIPS_mode_set(_ r: Int32) -> Int32

public func OPENSSL_init()

/*
 * CRYPTO_memcmp returns zero iff the |len| bytes at |a| and |b| are equal.
 * It takes an amount of time dependent on |len|, but independent of the
 * contents of |a| and |b|. Unlike memcmp, it cannot be used to put elements
 * into a defined order as the return value when a != b is undefined, other
 * than to be non-zero.
 */
public func CRYPTO_memcmp(_ a: UnsafeRawPointer!, _ b: UnsafeRawPointer!, _ len: Int) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_CRYPTO_strings()

/* Error codes for the CRYPTO functions. */

/* Function codes. */
public var CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX: Int32 { get }
public var CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID: Int32 { get }
public var CRYPTO_F_CRYPTO_GET_NEW_LOCKID: Int32 { get }
public var CRYPTO_F_CRYPTO_SET_EX_DATA: Int32 { get }
public var CRYPTO_F_DEF_ADD_INDEX: Int32 { get }
public var CRYPTO_F_DEF_GET_CLASS: Int32 { get }
public var CRYPTO_F_FIPS_MODE_SET: Int32 { get }
public var CRYPTO_F_INT_DUP_EX_DATA: Int32 { get }
public var CRYPTO_F_INT_FREE_EX_DATA: Int32 { get }
public var CRYPTO_F_INT_NEW_EX_DATA: Int32 { get }

/* Reason codes. */
public var CRYPTO_R_FIPS_MODE_NOT_SUPPORTED: Int32 { get }
public var CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK: Int32 { get }
/* crypto/bio/bio.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* These are the 'types' of BIOs */
public var BIO_TYPE_NONE: Int32 { get }

/* passive filter */
/* filter */
/* filter */
/* filter */
/* socket - connect */
/* socket for accept */
/* client proxy BIO */
/* server proxy BIO */
/* server proxy BIO */

/* BER -> bin filter */
/* (half a) BIO pair */
/* filter */

/* filter */
/* filter */

public var BIO_TYPE_DESCRIPTOR: Int32 { get } /* socket, fd, connect or accept */
public var BIO_TYPE_FILTER: Int32 { get }
public var BIO_TYPE_SOURCE_SINK: Int32 { get }

/*
 * BIO_FILENAME_READ|BIO_CLOSE to open or close on free.
 * BIO_set_fp(in,stdin,BIO_NOCLOSE);
 */
public var BIO_NOCLOSE: Int32 { get }
public var BIO_CLOSE: Int32 { get }

/*
 * These are used in the following macros and are passed to BIO_ctrl()
 */
public var BIO_CTRL_RESET: Int32 { get } /* opt - rewind/zero etc */
public var BIO_CTRL_EOF: Int32 { get } /* opt - are we at the eof */
public var BIO_CTRL_INFO: Int32 { get } /* opt - extra tit-bits */
public var BIO_CTRL_SET: Int32 { get } /* man - set the 'IO' type */
public var BIO_CTRL_GET: Int32 { get } /* man - get the 'IO' type */
public var BIO_CTRL_PUSH: Int32 { get } /* opt - internal, used to signify change */
public var BIO_CTRL_POP: Int32 { get } /* opt - internal, used to signify change */
public var BIO_CTRL_GET_CLOSE: Int32 { get } /* man - set the 'close' on free */
public var BIO_CTRL_SET_CLOSE: Int32 { get } /* man - set the 'close' on free */
public var BIO_CTRL_PENDING: Int32 { get } /* opt - is their more data buffered */
public var BIO_CTRL_FLUSH: Int32 { get } /* opt - 'flush' buffered output */
public var BIO_CTRL_DUP: Int32 { get } /* man - extra stuff for 'duped' BIO */
public var BIO_CTRL_WPENDING: Int32 { get } /* opt - number of bytes still to write */
/* callback is int cb(BIO *bio,state,ret); */
public var BIO_CTRL_SET_CALLBACK: Int32 { get } /* opt - set callback function */
public var BIO_CTRL_GET_CALLBACK: Int32 { get } /* opt - set callback function */

public var BIO_CTRL_SET_FILENAME: Int32 { get } /* BIO_s_file special */

/* dgram BIO stuff */
public var BIO_CTRL_DGRAM_CONNECT: Int32 { get } /* BIO dgram special */
public var BIO_CTRL_DGRAM_SET_CONNECTED: Int32 { get } /* allow for an externally connected
                                         * socket to be passed in */

public var BIO_CTRL_DGRAM_SET_RECV_TIMEOUT: Int32 { get } /* setsockopt, essentially */
public var BIO_CTRL_DGRAM_GET_RECV_TIMEOUT: Int32 { get } /* getsockopt, essentially */
public var BIO_CTRL_DGRAM_SET_SEND_TIMEOUT: Int32 { get } /* setsockopt, essentially */
public var BIO_CTRL_DGRAM_GET_SEND_TIMEOUT: Int32 { get } /* getsockopt, essentially */

public var BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP: Int32 { get } /* flag whether the last */
public var BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP: Int32 { get } /* I/O operation tiemd out */

/* #ifdef IP_MTU_DISCOVER */
public var BIO_CTRL_DGRAM_MTU_DISCOVER: Int32 { get } /* set DF bit on egress packets */
/* #endif */

public var BIO_CTRL_DGRAM_QUERY_MTU: Int32 { get } /* as kernel for current MTU */
public var BIO_CTRL_DGRAM_GET_FALLBACK_MTU: Int32 { get }
public var BIO_CTRL_DGRAM_GET_MTU: Int32 { get } /* get cached value for MTU */
public var BIO_CTRL_DGRAM_SET_MTU: Int32 { get } /* set cached value for MTU.
                                              * want to use this if asking
                                              * the kernel fails */

public var BIO_CTRL_DGRAM_MTU_EXCEEDED: Int32 { get } /* check whether the MTU was
                                              * exceed in the previous write
                                              * operation */

public var BIO_CTRL_DGRAM_GET_PEER: Int32 { get }
public var BIO_CTRL_DGRAM_SET_PEER: Int32 { get } /* Destination for the data */

public var BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT: Int32 { get } /* Next DTLS handshake timeout
                                              * to adjust socket timeouts */

public var BIO_CTRL_DGRAM_SET_DONT_FRAG: Int32 { get }

public var BIO_CTRL_DGRAM_GET_MTU_OVERHEAD: Int32 { get }

/* SCTP stuff */

/* modifiers */
public var BIO_FP_READ: Int32 { get }
public var BIO_FP_WRITE: Int32 { get }
public var BIO_FP_APPEND: Int32 { get }
public var BIO_FP_TEXT: Int32 { get }

public var BIO_FLAGS_READ: Int32 { get }
public var BIO_FLAGS_WRITE: Int32 { get }
public var BIO_FLAGS_IO_SPECIAL: Int32 { get }

public var BIO_FLAGS_SHOULD_RETRY: Int32 { get }

/*
 * "UPLINK" flag denotes file descriptors provided by application. It
 * defaults to 0, as most platforms don't require UPLINK interface.
 */
public var BIO_FLAGS_UPLINK: Int32 { get }

/* Used in BIO_gethostbyname() */
public var BIO_GHBN_CTRL_HITS: Int32 { get }
public var BIO_GHBN_CTRL_MISSES: Int32 { get }
public var BIO_GHBN_CTRL_CACHE_SIZE: Int32 { get }
public var BIO_GHBN_CTRL_GET_ENTRY: Int32 { get }
public var BIO_GHBN_CTRL_FLUSH: Int32 { get }

/* Mostly used in the SSL BIO */
/*-
 * Not used anymore
 * #define BIO_FLAGS_PROTOCOL_DELAYED_READ 0x10
 * #define BIO_FLAGS_PROTOCOL_DELAYED_WRITE 0x20
 * #define BIO_FLAGS_PROTOCOL_STARTUP   0x40
 */

public var BIO_FLAGS_BASE64_NO_NL: Int32 { get }

/*
 * This is used with memory BIOs: it means we shouldn't free up or change the
 * data in any way.
 */
public var BIO_FLAGS_MEM_RDONLY: Int32 { get }

public typealias BIO = bio_st

public func BIO_set_flags(_ b: UnsafeMutablePointer<BIO>!, _ flags: Int32)
public func BIO_test_flags(_ b: UnsafePointer<BIO>!, _ flags: Int32) -> Int32
public func BIO_clear_flags(_ b: UnsafeMutablePointer<BIO>!, _ flags: Int32)

/* These are normally used internally in BIOs */

/* These should be used by the application to tell why we should retry */

/*
 * The next three are used in conjunction with the BIO_should_io_special()
 * condition.  After this returns true, BIO *BIO_get_retry_BIO(BIO *bio, int
 * *reason); will walk the BIO stack and return the 'reason' for the special
 * and the offending BIO. Given a BIO, BIO_get_retry_reason(bio) will return
 * the code.
 */
/*
 * Returned from the SSL bio when the certificate retrieval code had an error
 */
public var BIO_RR_SSL_X509_LOOKUP: Int32 { get }
/* Returned from the connect BIO when a connect would have blocked */
public var BIO_RR_CONNECT: Int32 { get }
/* Returned from the accept BIO when an accept would have blocked */
public var BIO_RR_ACCEPT: Int32 { get }

/* These are passed by the BIO callback */
public var BIO_CB_FREE: Int32 { get }
public var BIO_CB_READ: Int32 { get }
public var BIO_CB_WRITE: Int32 { get }
public var BIO_CB_PUTS: Int32 { get }
public var BIO_CB_GETS: Int32 { get }
public var BIO_CB_CTRL: Int32 { get }

/*
 * The callback is called before and after the underling operation, The
 * BIO_CB_RETURN flag indicates if it is after the call
 */
public var BIO_CB_RETURN: Int32 { get }

public func BIO_get_callback(_ b: UnsafePointer<BIO>!) -> (@convention(c) (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Int)!
public func BIO_set_callback(_ b: UnsafeMutablePointer<BIO>!, _ callback: (@escaping @convention(c) (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Int)!)
public func BIO_get_callback_arg(_ b: UnsafePointer<BIO>!) -> UnsafeMutablePointer<Int8>!
public func BIO_set_callback_arg(_ b: UnsafeMutablePointer<BIO>!, _ arg: UnsafeMutablePointer<Int8>!)

public func BIO_method_name(_ b: UnsafePointer<BIO>!) -> UnsafePointer<Int8>!
public func BIO_method_type(_ b: UnsafePointer<BIO>!) -> Int32

public typealias bio_info_cb = (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Swift.Void

public struct bio_method_st {

    public var type: Int32

    public var name: UnsafePointer<Int8>!

    public var bwrite: (@convention(c) (UnsafeMutablePointer<BIO>?, UnsafePointer<Int8>?, Int32) -> Int32)!

    public var bread: (@convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<Int8>?, Int32) -> Int32)!

    public var bputs: (@convention(c) (UnsafeMutablePointer<BIO>?, UnsafePointer<Int8>?) -> Int32)!

    public var bgets: (@convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<Int8>?, Int32) -> Int32)!

    public var ctrl: (@convention(c) (UnsafeMutablePointer<BIO>?, Int32, Int, UnsafeMutableRawPointer?) -> Int)!

    public var create: (@convention(c) (UnsafeMutablePointer<BIO>?) -> Int32)!

    public var destroy: (@convention(c) (UnsafeMutablePointer<BIO>?) -> Int32)!

    public var callback_ctrl: (@convention(c) (UnsafeMutablePointer<BIO>?, Int32, (@escaping @convention(c) (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Swift.Void)?) -> Int)!

    public init()

    public init(type: Int32, name: UnsafePointer<Int8>!, bwrite: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafePointer<Int8>?, Int32) -> Int32)!, bread: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<Int8>?, Int32) -> Int32)!, bputs: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafePointer<Int8>?) -> Int32)!, bgets: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<Int8>?, Int32) -> Int32)!, ctrl: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, Int32, Int, UnsafeMutableRawPointer?) -> Int)!, create: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?) -> Int32)!, destroy: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?) -> Int32)!, callback_ctrl: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, Int32, (@escaping @convention(c) (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Swift.Void)?) -> Int)!)
}
public typealias BIO_METHOD = bio_method_st

public struct bio_st {

    public var method: UnsafeMutablePointer<BIO_METHOD>!

    /* bio, mode, argp, argi, argl, ret */
    public var callback: (@convention(c) (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Int)!

    public var cb_arg: UnsafeMutablePointer<Int8>! /* first argument for the callback */

    public var `init`: Int32

    public var shutdown: Int32

    public var flags: Int32 /* extra storage */

    public var retry_reason: Int32

    public var num: Int32

    public var ptr: UnsafeMutableRawPointer!

    public var next_bio: UnsafeMutablePointer<bio_st>! /* used by filter BIOs */

    public var prev_bio: UnsafeMutablePointer<bio_st>! /* used by filter BIOs */

    public var references: Int32

    public var num_read: UInt

    public var num_write: UInt

    public var ex_data: CRYPTO_EX_DATA

    public init()

    public init(method: UnsafeMutablePointer<BIO_METHOD>!, callback: (@escaping @convention(c) (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Int)!, cb_arg: UnsafeMutablePointer<Int8>!, init: Int32, shutdown: Int32, flags: Int32, retry_reason: Int32, num: Int32, ptr: UnsafeMutableRawPointer!, next_bio: UnsafeMutablePointer<bio_st>!, prev_bio: UnsafeMutablePointer<bio_st>!, references: Int32, num_read: UInt, num_write: UInt, ex_data: CRYPTO_EX_DATA)
}

public struct stack_st_BIO {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct bio_f_buffer_ctx_struct {

    /*-
     * Buffers are setup like this:
     *
     * <---------------------- size ----------------------->
     * +---------------------------------------------------+
     * | consumed | remaining          | free space        |
     * +---------------------------------------------------+
     * <-- off --><------- len ------->
     */
    /*- BIO *bio; */
    /*
    * this is now in the BIO struct
    */
    public var ibuf_size: Int32 /* how big is the input buffer */

    public var obuf_size: Int32 /* how big is the output buffer */

    public var ibuf: UnsafeMutablePointer<Int8>! /* the char array */

    public var ibuf_len: Int32 /* how many bytes are in it */

    public var ibuf_off: Int32 /* write/read offset */

    public var obuf: UnsafeMutablePointer<Int8>! /* the char array */

    public var obuf_len: Int32 /* how many bytes are in it */

    public var obuf_off: Int32 /* write/read offset */

    public init()

    public init(ibuf_size: Int32, obuf_size: Int32, ibuf: UnsafeMutablePointer<Int8>!, ibuf_len: Int32, ibuf_off: Int32, obuf: UnsafeMutablePointer<Int8>!, obuf_len: Int32, obuf_off: Int32)
}
public typealias BIO_F_BUFFER_CTX = bio_f_buffer_ctx_struct

/* Prefix and suffix callback in ASN1 BIO */
public typealias asn1_ps_func = (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32

/* SCTP parameter structs */

/* connect BIO stuff */
public var BIO_CONN_S_BEFORE: Int32 { get }
public var BIO_CONN_S_GET_IP: Int32 { get }
public var BIO_CONN_S_GET_PORT: Int32 { get }
public var BIO_CONN_S_CREATE_SOCKET: Int32 { get }
public var BIO_CONN_S_CONNECT: Int32 { get }
public var BIO_CONN_S_OK: Int32 { get }
public var BIO_CONN_S_BLOCKED_CONNECT: Int32 { get }
public var BIO_CONN_S_NBIO: Int32 { get }
/*
 * #define BIO_CONN_get_param_hostname BIO_ctrl
 */

public var BIO_C_SET_CONNECT: Int32 { get }
public var BIO_C_DO_STATE_MACHINE: Int32 { get }
public var BIO_C_SET_NBIO: Int32 { get }
public var BIO_C_SET_PROXY_PARAM: Int32 { get }
public var BIO_C_SET_FD: Int32 { get }
public var BIO_C_GET_FD: Int32 { get }
public var BIO_C_SET_FILE_PTR: Int32 { get }
public var BIO_C_GET_FILE_PTR: Int32 { get }
public var BIO_C_SET_FILENAME: Int32 { get }
public var BIO_C_SET_SSL: Int32 { get }
public var BIO_C_GET_SSL: Int32 { get }
public var BIO_C_SET_MD: Int32 { get }
public var BIO_C_GET_MD: Int32 { get }
public var BIO_C_GET_CIPHER_STATUS: Int32 { get }
public var BIO_C_SET_BUF_MEM: Int32 { get }
public var BIO_C_GET_BUF_MEM_PTR: Int32 { get }
public var BIO_C_GET_BUFF_NUM_LINES: Int32 { get }
public var BIO_C_SET_BUFF_SIZE: Int32 { get }
public var BIO_C_SET_ACCEPT: Int32 { get }
public var BIO_C_SSL_MODE: Int32 { get }
public var BIO_C_GET_MD_CTX: Int32 { get }
public var BIO_C_GET_PROXY_PARAM: Int32 { get }
public var BIO_C_SET_BUFF_READ_DATA: Int32 { get } /* data to read first */
public var BIO_C_GET_CONNECT: Int32 { get }
public var BIO_C_GET_ACCEPT: Int32 { get }
public var BIO_C_SET_SSL_RENEGOTIATE_BYTES: Int32 { get }
public var BIO_C_GET_SSL_NUM_RENEGOTIATES: Int32 { get }
public var BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT: Int32 { get }
public var BIO_C_FILE_SEEK: Int32 { get }
public var BIO_C_GET_CIPHER_CTX: Int32 { get }
public var BIO_C_SET_BUF_MEM_EOF_RETURN: Int32 { get } /* return end of input
                                                     * value */

public var BIO_C_SET_BIND_MODE: Int32 { get }
public var BIO_C_GET_BIND_MODE: Int32 { get }
public var BIO_C_FILE_TELL: Int32 { get }
public var BIO_C_GET_SOCKS: Int32 { get }
public var BIO_C_SET_SOCKS: Int32 { get }

public var BIO_C_SET_WRITE_BUF_SIZE: Int32 { get } /* for BIO_s_bio */
public var BIO_C_GET_WRITE_BUF_SIZE: Int32 { get }
public var BIO_C_MAKE_BIO_PAIR: Int32 { get }
public var BIO_C_DESTROY_BIO_PAIR: Int32 { get }
public var BIO_C_GET_WRITE_GUARANTEE: Int32 { get }
public var BIO_C_GET_READ_REQUEST: Int32 { get }
public var BIO_C_SHUTDOWN_WR: Int32 { get }
public var BIO_C_NREAD0: Int32 { get }
public var BIO_C_NREAD: Int32 { get }
public var BIO_C_NWRITE0: Int32 { get }
public var BIO_C_NWRITE: Int32 { get }
public var BIO_C_RESET_READ_REQUEST: Int32 { get }
public var BIO_C_SET_MD_CTX: Int32 { get }

public var BIO_C_SET_PREFIX: Int32 { get }
public var BIO_C_GET_PREFIX: Int32 { get }
public var BIO_C_SET_SUFFIX: Int32 { get }
public var BIO_C_GET_SUFFIX: Int32 { get }

public var BIO_C_SET_EX_ARG: Int32 { get }
public var BIO_C_GET_EX_ARG: Int32 { get }

/* BIO_s_connect() and BIO_s_socks4a_connect() */

/* BIO_s_accept() */

/* #define BIO_set_nbio(b,n)    BIO_ctrl(b,BIO_C_SET_NBIO,(n),NULL) */

public var BIO_BIND_NORMAL: Int32 { get }
public var BIO_BIND_REUSEADDR_IF_UNUSED: Int32 { get }
public var BIO_BIND_REUSEADDR: Int32 { get }

/* BIO_s_accept() and BIO_s_connect() */

/* BIO_s_proxy_client() */

/* BIO_set_nbio(b,n) */

/* BIO *BIO_get_filter_bio(BIO *bio); */

/* BIO_s_datagram(), BIO_s_fd(), BIO_s_socket(), BIO_s_accept() and BIO_s_connect() */

/* BIO_s_file() */

/* BIO_s_fd() and BIO_s_file() */

/*
 * name is cast to lose const, but might be better to route through a
 * function so we can do it safely
 */

/*
 * If you are wondering why this isn't defined, its because CONST_STRICT is
 * purely a compile-time kludge to allow const to be checked.
 */

/*
 * WARNING WARNING, this ups the reference count on the read bio of the SSL
 * structure.  This is because the ssl read BIO is now pointed to by the
 * next_bio field in the bio.  So when you free the BIO, make sure you are
 * doing a BIO_free_all() to catch the underlying BIO.
 */

/* defined in evp.h */
/* #define BIO_set_md(b,md)     BIO_ctrl(b,BIO_C_SET_MD,1,(char *)md) */

/* For the BIO_f_buffer() type */

/* Don't use the next one unless you know what you are doing :-) */

/* ...pending macros have inappropriate return type */
public func BIO_ctrl_pending(_ b: UnsafeMutablePointer<BIO>!) -> Int
public func BIO_ctrl_wpending(_ b: UnsafeMutablePointer<BIO>!) -> Int

/* For the BIO_f_buffer() type */

/* For BIO_s_bio() */

/* macros with inappropriate type -- but ...pending macros use int too: */

public func BIO_ctrl_get_write_guarantee(_ b: UnsafeMutablePointer<BIO>!) -> Int
public func BIO_ctrl_get_read_request(_ b: UnsafeMutablePointer<BIO>!) -> Int
public func BIO_ctrl_reset_read_request(_ b: UnsafeMutablePointer<BIO>!) -> Int32

/* ctrl macros for dgram */

/* These two aren't currently implemented */
/* int BIO_get_ex_num(BIO *bio); */
/* void BIO_set_ex_free_func(BIO *bio,int idx,void (*cb)()); */
public func BIO_set_ex_data(_ bio: UnsafeMutablePointer<BIO>!, _ idx: Int32, _ data: UnsafeMutableRawPointer!) -> Int32
public func BIO_get_ex_data(_ bio: UnsafeMutablePointer<BIO>!, _ idx: Int32) -> UnsafeMutableRawPointer!
public func BIO_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func BIO_number_read(_ bio: UnsafeMutablePointer<BIO>!) -> UInt
public func BIO_number_written(_ bio: UnsafeMutablePointer<BIO>!) -> UInt

/* For BIO_f_asn1() */
public func BIO_asn1_set_prefix(_ b: UnsafeMutablePointer<BIO>!, _ prefix: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!, _ prefix_free: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!) -> Int32
public func BIO_asn1_get_prefix(_ b: UnsafeMutablePointer<BIO>!, _ pprefix: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)?>!, _ pprefix_free: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)?>!) -> Int32
public func BIO_asn1_set_suffix(_ b: UnsafeMutablePointer<BIO>!, _ suffix: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!, _ suffix_free: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!) -> Int32
public func BIO_asn1_get_suffix(_ b: UnsafeMutablePointer<BIO>!, _ psuffix: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)?>!, _ psuffix_free: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)?>!) -> Int32

public func BIO_s_file() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_new_file(_ filename: UnsafePointer<Int8>!, _ mode: UnsafePointer<Int8>!) -> UnsafeMutablePointer<BIO>!
public func BIO_new_fp(_ stream: UnsafeMutablePointer<FILE>!, _ close_flag: Int32) -> UnsafeMutablePointer<BIO>!

public func BIO_new(_ type: UnsafeMutablePointer<BIO_METHOD>!) -> UnsafeMutablePointer<BIO>!
public func BIO_set(_ a: UnsafeMutablePointer<BIO>!, _ type: UnsafeMutablePointer<BIO_METHOD>!) -> Int32
public func BIO_free(_ a: UnsafeMutablePointer<BIO>!) -> Int32
public func BIO_vfree(_ a: UnsafeMutablePointer<BIO>!)
public func BIO_read(_ b: UnsafeMutablePointer<BIO>!, _ data: UnsafeMutableRawPointer!, _ len: Int32) -> Int32
public func BIO_gets(_ bp: UnsafeMutablePointer<BIO>!, _ buf: UnsafeMutablePointer<Int8>!, _ size: Int32) -> Int32
public func BIO_write(_ b: UnsafeMutablePointer<BIO>!, _ data: UnsafeRawPointer!, _ len: Int32) -> Int32
public func BIO_puts(_ bp: UnsafeMutablePointer<BIO>!, _ buf: UnsafePointer<Int8>!) -> Int32
public func BIO_indent(_ b: UnsafeMutablePointer<BIO>!, _ indent: Int32, _ max: Int32) -> Int32
public func BIO_ctrl(_ bp: UnsafeMutablePointer<BIO>!, _ cmd: Int32, _ larg: Int, _ parg: UnsafeMutableRawPointer!) -> Int
public func BIO_callback_ctrl(_ b: UnsafeMutablePointer<BIO>!, _ cmd: Int32, _ fp: (@escaping @convention(c) (UnsafeMutablePointer<bio_st>?, Int32, UnsafePointer<Int8>?, Int32, Int, Int) -> Swift.Void)!) -> Int
public func BIO_ptr_ctrl(_ bp: UnsafeMutablePointer<BIO>!, _ cmd: Int32, _ larg: Int) -> UnsafeMutablePointer<Int8>!
public func BIO_int_ctrl(_ bp: UnsafeMutablePointer<BIO>!, _ cmd: Int32, _ larg: Int, _ iarg: Int32) -> Int
public func BIO_push(_ b: UnsafeMutablePointer<BIO>!, _ append: UnsafeMutablePointer<BIO>!) -> UnsafeMutablePointer<BIO>!
public func BIO_pop(_ b: UnsafeMutablePointer<BIO>!) -> UnsafeMutablePointer<BIO>!
public func BIO_free_all(_ a: UnsafeMutablePointer<BIO>!)
public func BIO_find_type(_ b: UnsafeMutablePointer<BIO>!, _ bio_type: Int32) -> UnsafeMutablePointer<BIO>!
public func BIO_next(_ b: UnsafeMutablePointer<BIO>!) -> UnsafeMutablePointer<BIO>!
public func BIO_get_retry_BIO(_ bio: UnsafeMutablePointer<BIO>!, _ reason: UnsafeMutablePointer<Int32>!) -> UnsafeMutablePointer<BIO>!
public func BIO_get_retry_reason(_ bio: UnsafeMutablePointer<BIO>!) -> Int32
public func BIO_dup_chain(_ in: UnsafeMutablePointer<BIO>!) -> UnsafeMutablePointer<BIO>!

public func BIO_nread0(_ bio: UnsafeMutablePointer<BIO>!, _ buf: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!) -> Int32
public func BIO_nread(_ bio: UnsafeMutablePointer<BIO>!, _ buf: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ num: Int32) -> Int32
public func BIO_nwrite0(_ bio: UnsafeMutablePointer<BIO>!, _ buf: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!) -> Int32
public func BIO_nwrite(_ bio: UnsafeMutablePointer<BIO>!, _ buf: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ num: Int32) -> Int32

public func BIO_debug_callback(_ bio: UnsafeMutablePointer<BIO>!, _ cmd: Int32, _ argp: UnsafePointer<Int8>!, _ argi: Int32, _ argl: Int, _ ret: Int) -> Int

public func BIO_s_mem() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_new_mem_buf(_ buf: UnsafeRawPointer!, _ len: Int32) -> UnsafeMutablePointer<BIO>!
public func BIO_s_socket() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_s_connect() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_s_accept() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_s_fd() -> UnsafeMutablePointer<BIO_METHOD>!

public func BIO_s_log() -> UnsafeMutablePointer<BIO_METHOD>!

public func BIO_s_bio() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_s_null() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_f_null() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_f_buffer() -> UnsafeMutablePointer<BIO_METHOD>!

public func BIO_f_nbio_test() -> UnsafeMutablePointer<BIO_METHOD>!

public func BIO_s_datagram() -> UnsafeMutablePointer<BIO_METHOD>!

/* BIO_METHOD *BIO_f_ber(void); */

public func BIO_sock_should_retry(_ i: Int32) -> Int32
public func BIO_sock_non_fatal_error(_ error: Int32) -> Int32
public func BIO_dgram_non_fatal_error(_ error: Int32) -> Int32

public func BIO_fd_should_retry(_ i: Int32) -> Int32
public func BIO_fd_non_fatal_error(_ error: Int32) -> Int32
public func BIO_dump_cb(_ cb: (@escaping @convention(c) (UnsafeRawPointer?, Int, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!, _ s: UnsafePointer<Int8>!, _ len: Int32) -> Int32
public func BIO_dump_indent_cb(_ cb: (@escaping @convention(c) (UnsafeRawPointer?, Int, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!, _ s: UnsafePointer<Int8>!, _ len: Int32, _ indent: Int32) -> Int32
public func BIO_dump(_ b: UnsafeMutablePointer<BIO>!, _ bytes: UnsafePointer<Int8>!, _ len: Int32) -> Int32
public func BIO_dump_indent(_ b: UnsafeMutablePointer<BIO>!, _ bytes: UnsafePointer<Int8>!, _ len: Int32, _ indent: Int32) -> Int32

public func BIO_dump_fp(_ fp: UnsafeMutablePointer<FILE>!, _ s: UnsafePointer<Int8>!, _ len: Int32) -> Int32
public func BIO_dump_indent_fp(_ fp: UnsafeMutablePointer<FILE>!, _ s: UnsafePointer<Int8>!, _ len: Int32, _ indent: Int32) -> Int32

public func BIO_hex_string(_ out: UnsafeMutablePointer<BIO>!, _ indent: Int32, _ width: Int32, _ data: UnsafeMutablePointer<UInt8>!, _ datalen: Int32) -> Int32

public func BIO_gethostbyname(_ name: UnsafePointer<Int8>!) -> UnsafeMutablePointer<hostent>!
/*-
 * We might want a thread-safe interface too:
 * struct hostent *BIO_gethostbyname_r(const char *name,
 *     struct hostent *result, void *buffer, size_t buflen);
 * or something similar (caller allocates a struct hostent,
 * pointed to by "result", and additional buffer space for the various
 * substructures; if the buffer does not suffice, NULL is returned
 * and an appropriate error code is set).
 */
public func BIO_sock_error(_ sock: Int32) -> Int32
public func BIO_socket_ioctl(_ fd: Int32, _ type: Int, _ arg: UnsafeMutableRawPointer!) -> Int32
public func BIO_socket_nbio(_ fd: Int32, _ mode: Int32) -> Int32
public func BIO_get_port(_ str: UnsafePointer<Int8>!, _ port_ptr: UnsafeMutablePointer<UInt16>!) -> Int32
public func BIO_get_host_ip(_ str: UnsafePointer<Int8>!, _ ip: UnsafeMutablePointer<UInt8>!) -> Int32
public func BIO_get_accept_socket(_ host_port: UnsafeMutablePointer<Int8>!, _ mode: Int32) -> Int32
public func BIO_accept(_ sock: Int32, _ ip_port: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!) -> Int32
public func BIO_sock_init() -> Int32
public func BIO_sock_cleanup()
public func BIO_set_tcp_ndelay(_ sock: Int32, _ turn_on: Int32) -> Int32

public func BIO_new_socket(_ sock: Int32, _ close_flag: Int32) -> UnsafeMutablePointer<BIO>!
public func BIO_new_dgram(_ fd: Int32, _ close_flag: Int32) -> UnsafeMutablePointer<BIO>!

public func BIO_new_fd(_ fd: Int32, _ close_flag: Int32) -> UnsafeMutablePointer<BIO>!
public func BIO_new_connect(_ host_port: UnsafePointer<Int8>!) -> UnsafeMutablePointer<BIO>!
public func BIO_new_accept(_ host_port: UnsafePointer<Int8>!) -> UnsafeMutablePointer<BIO>!

public func BIO_new_bio_pair(_ bio1: UnsafeMutablePointer<UnsafeMutablePointer<BIO>?>!, _ writebuf1: Int, _ bio2: UnsafeMutablePointer<UnsafeMutablePointer<BIO>?>!, _ writebuf2: Int) -> Int32
/*
 * If successful, returns 1 and in *bio1, *bio2 two BIO pair endpoints.
 * Otherwise returns 0 and sets *bio1 and *bio2 to NULL. Size 0 uses default
 * value.
 */

public func BIO_copy_next_retry(_ b: UnsafeMutablePointer<BIO>!)

public func BIO_vprintf(_ bio: UnsafeMutablePointer<BIO>!, _ format: UnsafePointer<Int8>!, _ args: CVaListPointer) -> Int32

public func BIO_vsnprintf(_ buf: UnsafeMutablePointer<Int8>!, _ n: Int, _ format: UnsafePointer<Int8>!, _ args: CVaListPointer) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_BIO_strings()

/* Error codes for the BIO functions. */

/* Function codes. */
public var BIO_F_ACPT_STATE: Int32 { get }
public var BIO_F_BIO_ACCEPT: Int32 { get }
public var BIO_F_BIO_BER_GET_HEADER: Int32 { get }
public var BIO_F_BIO_CALLBACK_CTRL: Int32 { get }
public var BIO_F_BIO_CTRL: Int32 { get }
public var BIO_F_BIO_GETHOSTBYNAME: Int32 { get }
public var BIO_F_BIO_GETS: Int32 { get }
public var BIO_F_BIO_GET_ACCEPT_SOCKET: Int32 { get }
public var BIO_F_BIO_GET_HOST_IP: Int32 { get }
public var BIO_F_BIO_GET_PORT: Int32 { get }
public var BIO_F_BIO_MAKE_PAIR: Int32 { get }
public var BIO_F_BIO_NEW: Int32 { get }
public var BIO_F_BIO_NEW_FILE: Int32 { get }
public var BIO_F_BIO_NEW_MEM_BUF: Int32 { get }
public var BIO_F_BIO_NREAD: Int32 { get }
public var BIO_F_BIO_NREAD0: Int32 { get }
public var BIO_F_BIO_NWRITE: Int32 { get }
public var BIO_F_BIO_NWRITE0: Int32 { get }
public var BIO_F_BIO_PUTS: Int32 { get }
public var BIO_F_BIO_READ: Int32 { get }
public var BIO_F_BIO_SOCK_INIT: Int32 { get }
public var BIO_F_BIO_WRITE: Int32 { get }
public var BIO_F_BUFFER_CTRL: Int32 { get }
public var BIO_F_CONN_CTRL: Int32 { get }
public var BIO_F_CONN_STATE: Int32 { get }
public var BIO_F_DGRAM_SCTP_READ: Int32 { get }
public var BIO_F_DGRAM_SCTP_WRITE: Int32 { get }
public var BIO_F_FILE_CTRL: Int32 { get }
public var BIO_F_FILE_READ: Int32 { get }
public var BIO_F_LINEBUFFER_CTRL: Int32 { get }
public var BIO_F_MEM_READ: Int32 { get }
public var BIO_F_MEM_WRITE: Int32 { get }
public var BIO_F_SSL_NEW: Int32 { get }
public var BIO_F_WSASTARTUP: Int32 { get }

/* Reason codes. */
public var BIO_R_ACCEPT_ERROR: Int32 { get }
public var BIO_R_BAD_FOPEN_MODE: Int32 { get }
public var BIO_R_BAD_HOSTNAME_LOOKUP: Int32 { get }
public var BIO_R_BROKEN_PIPE: Int32 { get }
public var BIO_R_CONNECT_ERROR: Int32 { get }
public var BIO_R_EOF_ON_MEMORY_BIO: Int32 { get }
public var BIO_R_ERROR_SETTING_NBIO: Int32 { get }
public var BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET: Int32 { get }
public var BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET: Int32 { get }
public var BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET: Int32 { get }
public var BIO_R_INVALID_ARGUMENT: Int32 { get }
public var BIO_R_INVALID_IP_ADDRESS: Int32 { get }
public var BIO_R_IN_USE: Int32 { get }
public var BIO_R_KEEPALIVE: Int32 { get }
public var BIO_R_NBIO_CONNECT_ERROR: Int32 { get }
public var BIO_R_NO_ACCEPT_PORT_SPECIFIED: Int32 { get }
public var BIO_R_NO_HOSTNAME_SPECIFIED: Int32 { get }
public var BIO_R_NO_PORT_DEFINED: Int32 { get }
public var BIO_R_NO_PORT_SPECIFIED: Int32 { get }
public var BIO_R_NO_SUCH_FILE: Int32 { get }
public var BIO_R_NULL_PARAMETER: Int32 { get }
public var BIO_R_TAG_MISMATCH: Int32 { get }
public var BIO_R_UNABLE_TO_BIND_SOCKET: Int32 { get }
public var BIO_R_UNABLE_TO_CREATE_SOCKET: Int32 { get }
public var BIO_R_UNABLE_TO_LISTEN_SOCKET: Int32 { get }
public var BIO_R_UNINITIALIZED: Int32 { get }
public var BIO_R_UNSUPPORTED_METHOD: Int32 { get }
public var BIO_R_WRITE_TO_READ_ONLY_BIO: Int32 { get }
public var BIO_R_WSASTARTUP: Int32 { get }
/* crypto/lhash/lhash.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*
 * Header for dynamic hash table routines Author - Eric Young
 */

public struct lhash_node_st {

    public var data: UnsafeMutableRawPointer!

    public var next: UnsafeMutablePointer<lhash_node_st>!

    
    public var hash: UInt

    public init()

    public init(data: UnsafeMutableRawPointer!, next: UnsafeMutablePointer<lhash_node_st>!, hash: UInt)
}
public typealias LHASH_NODE = lhash_node_st

public typealias LHASH_COMP_FN_TYPE = @convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32
public typealias LHASH_HASH_FN_TYPE = @convention(c) (UnsafeRawPointer?) -> UInt
public typealias LHASH_DOALL_FN_TYPE = @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void
public typealias LHASH_DOALL_ARG_FN_TYPE = @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?) -> Swift.Void

/*
 * Macros for declaring and implementing type-safe wrappers for LHASH
 * callbacks. This way, callbacks can be provided to LHASH structures without
 * function pointer casting and the macro-defined callbacks provide
 * per-variable casting before deferring to the underlying type-specific
 * callbacks. NB: It is possible to place a "static" in front of both the
 * DECLARE and IMPLEMENT macros if the functions are strictly internal.
 */

/* First: "hash" functions */

/* Second: "compare" functions */

/* Third: "doall" functions */

/* Fourth: "doall_arg" functions */

public struct lhash_st {

    public var b: UnsafeMutablePointer<UnsafeMutablePointer<LHASH_NODE>?>!

    public var comp: OpenSSL.LHASH_COMP_FN_TYPE!

    public var hash: OpenSSL.LHASH_HASH_FN_TYPE!

    public var num_nodes: UInt32

    public var num_alloc_nodes: UInt32

    public var p: UInt32

    public var pmax: UInt32

    public var up_load: UInt /* load times 256 */

    public var down_load: UInt /* load times 256 */

    public var num_items: UInt

    public var num_expands: UInt

    public var num_expand_reallocs: UInt

    public var num_contracts: UInt

    public var num_contract_reallocs: UInt

    public var num_hash_calls: UInt

    public var num_comp_calls: UInt

    public var num_insert: UInt

    public var num_replace: UInt

    public var num_delete: UInt

    public var num_no_delete: UInt

    public var num_retrieve: UInt

    public var num_retrieve_miss: UInt

    public var num_hash_comps: UInt

    public var error: Int32

    public init()

    public init(b: UnsafeMutablePointer<UnsafeMutablePointer<LHASH_NODE>?>!, comp: OpenSSL.LHASH_COMP_FN_TYPE!, hash: OpenSSL.LHASH_HASH_FN_TYPE!, num_nodes: UInt32, num_alloc_nodes: UInt32, p: UInt32, pmax: UInt32, up_load: UInt, down_load: UInt, num_items: UInt, num_expands: UInt, num_expand_reallocs: UInt, num_contracts: UInt, num_contract_reallocs: UInt, num_hash_calls: UInt, num_comp_calls: UInt, num_insert: UInt, num_replace: UInt, num_delete: UInt, num_no_delete: UInt, num_retrieve: UInt, num_retrieve_miss: UInt, num_hash_comps: UInt, error: Int32)
}
public typealias _LHASH = lhash_st
/* Do not use _LHASH directly, use LHASH_OF
 * and friends */

public var LH_LOAD_MULT: Int32 { get }

/*
 * Indicates a malloc() error in the last call, this is only bad in
 * lh_insert().
 */

public func lh_new(_ h: OpenSSL.LHASH_HASH_FN_TYPE!, _ c: OpenSSL.LHASH_COMP_FN_TYPE!) -> UnsafeMutablePointer<_LHASH>!
public func lh_free(_ lh: UnsafeMutablePointer<_LHASH>!)
public func lh_insert(_ lh: UnsafeMutablePointer<_LHASH>!, _ data: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func lh_delete(_ lh: UnsafeMutablePointer<_LHASH>!, _ data: UnsafeRawPointer!) -> UnsafeMutableRawPointer!
public func lh_retrieve(_ lh: UnsafeMutablePointer<_LHASH>!, _ data: UnsafeRawPointer!) -> UnsafeMutableRawPointer!
public func lh_doall(_ lh: UnsafeMutablePointer<_LHASH>!, _ func: OpenSSL.LHASH_DOALL_FN_TYPE!)
public func lh_doall_arg(_ lh: UnsafeMutablePointer<_LHASH>!, _ func: OpenSSL.LHASH_DOALL_ARG_FN_TYPE!, _ arg: UnsafeMutableRawPointer!)
public func lh_strhash(_ c: UnsafePointer<Int8>!) -> UInt
public func lh_num_items(_ lh: UnsafePointer<_LHASH>!) -> UInt

public func lh_stats(_ lh: UnsafePointer<_LHASH>!, _ out: UnsafeMutablePointer<FILE>!)
public func lh_node_stats(_ lh: UnsafePointer<_LHASH>!, _ out: UnsafeMutablePointer<FILE>!)
public func lh_node_usage_stats(_ lh: UnsafePointer<_LHASH>!, _ out: UnsafeMutablePointer<FILE>!)

public func lh_stats_bio(_ lh: UnsafePointer<_LHASH>!, _ out: UnsafeMutablePointer<BIO>!)
public func lh_node_stats_bio(_ lh: UnsafePointer<_LHASH>!, _ out: UnsafeMutablePointer<BIO>!)
public func lh_node_usage_stats_bio(_ lh: UnsafePointer<_LHASH>!, _ out: UnsafeMutablePointer<BIO>!)

/* Type checking... */

/* Define wrapper functions. */

public struct lhash_st_OPENSSL_STRING {

    
    public var dummy: Int32

    public init()

    public init(dummy: Int32)
}

public struct lhash_st_OPENSSL_CSTRING {

    
    public var dummy: Int32

    public init()

    public init(dummy: Int32)
}
/* crypto/conf/conf.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

public struct CONF_VALUE {

    public var section: UnsafeMutablePointer<Int8>!

    public var name: UnsafeMutablePointer<Int8>!

    public var value: UnsafeMutablePointer<Int8>!

    public init()

    public init(section: UnsafeMutablePointer<Int8>!, name: UnsafeMutablePointer<Int8>!, value: UnsafeMutablePointer<Int8>!)
}

public struct stack_st_CONF_VALUE {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct lhash_st_CONF_VALUE {

    
    public var dummy: Int32

    public init()

    public init(dummy: Int32)
}

public typealias CONF_METHOD = conf_method_st

public struct conf_method_st {

    public var name: UnsafePointer<Int8>!

    public var create: (@convention(c) (UnsafeMutablePointer<CONF_METHOD>?) -> UnsafeMutablePointer<CONF>?)!

    public var `init`: (@convention(c) (UnsafeMutablePointer<CONF>?) -> Int32)!

    public var destroy: (@convention(c) (UnsafeMutablePointer<CONF>?) -> Int32)!

    public var destroy_data: (@convention(c) (UnsafeMutablePointer<CONF>?) -> Int32)!

    public var load_bio: (@convention(c) (UnsafeMutablePointer<CONF>?, UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<Int>?) -> Int32)!

    public var dump: (@convention(c) (UnsafePointer<CONF>?, UnsafeMutablePointer<BIO>?) -> Int32)!

    public var is_number: (@convention(c) (UnsafePointer<CONF>?, Int8) -> Int32)!

    public var to_int: (@convention(c) (UnsafePointer<CONF>?, Int8) -> Int32)!

    public var load: (@convention(c) (UnsafeMutablePointer<CONF>?, UnsafePointer<Int8>?, UnsafeMutablePointer<Int>?) -> Int32)!

    public init()

    public init(name: UnsafePointer<Int8>!, create: (@escaping @convention(c) (UnsafeMutablePointer<CONF_METHOD>?) -> UnsafeMutablePointer<CONF>?)!, init: (@escaping @convention(c) (UnsafeMutablePointer<CONF>?) -> Int32)!, destroy: (@escaping @convention(c) (UnsafeMutablePointer<CONF>?) -> Int32)!, destroy_data: (@escaping @convention(c) (UnsafeMutablePointer<CONF>?) -> Int32)!, load_bio: (@escaping @convention(c) (UnsafeMutablePointer<CONF>?, UnsafeMutablePointer<BIO>?, UnsafeMutablePointer<Int>?) -> Int32)!, dump: (@escaping @convention(c) (UnsafePointer<CONF>?, UnsafeMutablePointer<BIO>?) -> Int32)!, is_number: (@escaping @convention(c) (UnsafePointer<CONF>?, Int8) -> Int32)!, to_int: (@escaping @convention(c) (UnsafePointer<CONF>?, Int8) -> Int32)!, load: (@escaping @convention(c) (UnsafeMutablePointer<CONF>?, UnsafePointer<Int8>?, UnsafeMutablePointer<Int>?) -> Int32)!)
}

/* Module definitions */

public struct stack_st_CONF_MODULE {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct stack_st_CONF_IMODULE {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* DSO module function typedefs */
public typealias conf_init_func = (OpaquePointer?, UnsafePointer<CONF>?) -> Int32
public typealias conf_finish_func = (OpaquePointer?) -> Swift.Void

public var CONF_MFLAGS_IGNORE_ERRORS: Int32 { get }
public var CONF_MFLAGS_IGNORE_RETURN_CODES: Int32 { get }
public var CONF_MFLAGS_SILENT: Int32 { get }
public var CONF_MFLAGS_NO_DSO: Int32 { get }
public var CONF_MFLAGS_IGNORE_MISSING_FILE: Int32 { get }
public var CONF_MFLAGS_DEFAULT_SECTION: Int32 { get }

public func CONF_set_default_method(_ meth: UnsafeMutablePointer<CONF_METHOD>!) -> Int32
public func CONF_set_nconf(_ conf: UnsafeMutablePointer<CONF>!, _ hash: UnsafeMutablePointer<lhash_st_CONF_VALUE>!)
public func CONF_load(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ file: UnsafePointer<Int8>!, _ eline: UnsafeMutablePointer<Int>!) -> UnsafeMutablePointer<lhash_st_CONF_VALUE>!

public func CONF_load_fp(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ fp: UnsafeMutablePointer<FILE>!, _ eline: UnsafeMutablePointer<Int>!) -> UnsafeMutablePointer<lhash_st_CONF_VALUE>!

public func CONF_load_bio(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ bp: UnsafeMutablePointer<BIO>!, _ eline: UnsafeMutablePointer<Int>!) -> UnsafeMutablePointer<lhash_st_CONF_VALUE>!
public func CONF_get_section(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ section: UnsafePointer<Int8>!) -> UnsafeMutablePointer<stack_st_CONF_VALUE>!
public func CONF_get_string(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ group: UnsafePointer<Int8>!, _ name: UnsafePointer<Int8>!) -> UnsafeMutablePointer<Int8>!
public func CONF_get_number(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ group: UnsafePointer<Int8>!, _ name: UnsafePointer<Int8>!) -> Int
public func CONF_free(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!)
public func CONF_dump_fp(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ out: UnsafeMutablePointer<FILE>!) -> Int32
public func CONF_dump_bio(_ conf: UnsafeMutablePointer<lhash_st_CONF_VALUE>!, _ out: UnsafeMutablePointer<BIO>!) -> Int32

public func OPENSSL_config(_ config_name: UnsafePointer<Int8>!)
public func OPENSSL_no_config()

/*
 * New conf code.  The semantics are different from the functions above. If
 * that wasn't the case, the above functions would have been replaced
 */

public struct conf_st {

    public var meth: UnsafeMutablePointer<CONF_METHOD>!

    public var meth_data: UnsafeMutableRawPointer!

    public var data: UnsafeMutablePointer<lhash_st_CONF_VALUE>!

    public init()

    public init(meth: UnsafeMutablePointer<CONF_METHOD>!, meth_data: UnsafeMutableRawPointer!, data: UnsafeMutablePointer<lhash_st_CONF_VALUE>!)
}

public func NCONF_new(_ meth: UnsafeMutablePointer<CONF_METHOD>!) -> UnsafeMutablePointer<CONF>!
public func NCONF_default() -> UnsafeMutablePointer<CONF_METHOD>!
public func NCONF_WIN32() -> UnsafeMutablePointer<CONF_METHOD>!
/* Just to give you an idea of what I have in
 * mind */

public func NCONF_free(_ conf: UnsafeMutablePointer<CONF>!)
public func NCONF_free_data(_ conf: UnsafeMutablePointer<CONF>!)

public func NCONF_load(_ conf: UnsafeMutablePointer<CONF>!, _ file: UnsafePointer<Int8>!, _ eline: UnsafeMutablePointer<Int>!) -> Int32

public func NCONF_load_fp(_ conf: UnsafeMutablePointer<CONF>!, _ fp: UnsafeMutablePointer<FILE>!, _ eline: UnsafeMutablePointer<Int>!) -> Int32

public func NCONF_load_bio(_ conf: UnsafeMutablePointer<CONF>!, _ bp: UnsafeMutablePointer<BIO>!, _ eline: UnsafeMutablePointer<Int>!) -> Int32
public func NCONF_get_section(_ conf: UnsafePointer<CONF>!, _ section: UnsafePointer<Int8>!) -> UnsafeMutablePointer<stack_st_CONF_VALUE>!
public func NCONF_get_string(_ conf: UnsafePointer<CONF>!, _ group: UnsafePointer<Int8>!, _ name: UnsafePointer<Int8>!) -> UnsafeMutablePointer<Int8>!
public func NCONF_get_number_e(_ conf: UnsafePointer<CONF>!, _ group: UnsafePointer<Int8>!, _ name: UnsafePointer<Int8>!, _ result: UnsafeMutablePointer<Int>!) -> Int32
public func NCONF_dump_fp(_ conf: UnsafePointer<CONF>!, _ out: UnsafeMutablePointer<FILE>!) -> Int32
public func NCONF_dump_bio(_ conf: UnsafePointer<CONF>!, _ out: UnsafeMutablePointer<BIO>!) -> Int32

/* The following function has no error
 * checking, and should therefore be avoided */

/* Module functions */

public func CONF_modules_load(_ cnf: UnsafePointer<CONF>!, _ appname: UnsafePointer<Int8>!, _ flags: UInt) -> Int32
public func CONF_modules_load_file(_ filename: UnsafePointer<Int8>!, _ appname: UnsafePointer<Int8>!, _ flags: UInt) -> Int32
public func CONF_modules_unload(_ all: Int32)
public func CONF_modules_finish()
public func CONF_modules_free()
public func CONF_module_add(_ name: UnsafePointer<Int8>!, _ ifunc: (@escaping @convention(c) (OpaquePointer?, UnsafePointer<CONF>?) -> Int32)!, _ ffunc: (@escaping @convention(c) (OpaquePointer?) -> Swift.Void)!) -> Int32

public func CONF_imodule_get_name(_ md: OpaquePointer!) -> UnsafePointer<Int8>!
public func CONF_imodule_get_value(_ md: OpaquePointer!) -> UnsafePointer<Int8>!
public func CONF_imodule_get_usr_data(_ md: OpaquePointer!) -> UnsafeMutableRawPointer!
public func CONF_imodule_set_usr_data(_ md: OpaquePointer!, _ usr_data: UnsafeMutableRawPointer!)
public func CONF_imodule_get_module(_ md: OpaquePointer!) -> OpaquePointer!
public func CONF_imodule_get_flags(_ md: OpaquePointer!) -> UInt
public func CONF_imodule_set_flags(_ md: OpaquePointer!, _ flags: UInt)
public func CONF_module_get_usr_data(_ pmod: OpaquePointer!) -> UnsafeMutableRawPointer!
public func CONF_module_set_usr_data(_ pmod: OpaquePointer!, _ usr_data: UnsafeMutableRawPointer!)

public func CONF_get1_default_config_file() -> UnsafeMutablePointer<Int8>!

public func CONF_parse_list(_ list: UnsafePointer<Int8>!, _ sep: Int32, _ nospc: Int32, _ list_cb: (@escaping @convention(c) (UnsafePointer<Int8>?, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ arg: UnsafeMutableRawPointer!) -> Int32

public func OPENSSL_load_builtin_modules()

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_CONF_strings()

/* Error codes for the CONF functions. */

/* Function codes. */
public var CONF_F_CONF_DUMP_FP: Int32 { get }
public var CONF_F_CONF_LOAD: Int32 { get }
public var CONF_F_CONF_LOAD_BIO: Int32 { get }
public var CONF_F_CONF_LOAD_FP: Int32 { get }
public var CONF_F_CONF_MODULES_LOAD: Int32 { get }
public var CONF_F_CONF_PARSE_LIST: Int32 { get }
public var CONF_F_DEF_LOAD: Int32 { get }
public var CONF_F_DEF_LOAD_BIO: Int32 { get }
public var CONF_F_MODULE_INIT: Int32 { get }
public var CONF_F_MODULE_LOAD_DSO: Int32 { get }
public var CONF_F_MODULE_RUN: Int32 { get }
public var CONF_F_NCONF_DUMP_BIO: Int32 { get }
public var CONF_F_NCONF_DUMP_FP: Int32 { get }
public var CONF_F_NCONF_GET_NUMBER: Int32 { get }
public var CONF_F_NCONF_GET_NUMBER_E: Int32 { get }
public var CONF_F_NCONF_GET_SECTION: Int32 { get }
public var CONF_F_NCONF_GET_STRING: Int32 { get }
public var CONF_F_NCONF_LOAD: Int32 { get }
public var CONF_F_NCONF_LOAD_BIO: Int32 { get }
public var CONF_F_NCONF_LOAD_FP: Int32 { get }
public var CONF_F_NCONF_NEW: Int32 { get }
public var CONF_F_STR_COPY: Int32 { get }

/* Reason codes. */
public var CONF_R_ERROR_LOADING_DSO: Int32 { get }
public var CONF_R_LIST_CANNOT_BE_NULL: Int32 { get }
public var CONF_R_MISSING_CLOSE_SQUARE_BRACKET: Int32 { get }
public var CONF_R_MISSING_EQUAL_SIGN: Int32 { get }
public var CONF_R_MISSING_FINISH_FUNCTION: Int32 { get }
public var CONF_R_MISSING_INIT_FUNCTION: Int32 { get }
public var CONF_R_MODULE_INITIALIZATION_ERROR: Int32 { get }
public var CONF_R_NO_CLOSE_BRACE: Int32 { get }
public var CONF_R_NO_CONF: Int32 { get }
public var CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE: Int32 { get }
public var CONF_R_NO_SECTION: Int32 { get }
public var CONF_R_NO_SUCH_FILE: Int32 { get }
public var CONF_R_NO_VALUE: Int32 { get }
public var CONF_R_UNABLE_TO_CREATE_NEW_SECTION: Int32 { get }
public var CONF_R_UNKNOWN_MODULE_NAME: Int32 { get }
public var CONF_R_VARIABLE_HAS_NO_VALUE: Int32 { get }
/* crypto/evp/evp.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*-
#define EVP_RC2_KEY_SIZE                16
#define EVP_RC4_KEY_SIZE                16
#define EVP_BLOWFISH_KEY_SIZE           16
#define EVP_CAST5_KEY_SIZE              16
#define EVP_RC5_32_12_16_KEY_SIZE       16
*/
public var EVP_MAX_MD_SIZE: Int32 { get } /* longest known is SHA512 */
public var EVP_MAX_KEY_LENGTH: Int32 { get }
public var EVP_MAX_IV_LENGTH: Int32 { get }
public var EVP_MAX_BLOCK_LENGTH: Int32 { get }

public var PKCS5_SALT_LEN: Int32 { get }
/* Default PKCS#5 iteration count */
public var PKCS5_DEFAULT_ITER: Int32 { get }
/* crypto/objects/obj_mac.h */

/*
 * THIS FILE IS GENERATED FROM objects.txt by objects.pl via the following
 * command: perl objects.pl objects.txt obj_mac.num obj_mac.h
 */

/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

public var SN_undef: String { get }
public var LN_undef: String { get }
public var NID_undef: Int32 { get }
public var OBJ_undef: Int { get }

public var SN_itu_t: String { get }
public var LN_itu_t: String { get }
public var NID_itu_t: Int32 { get }
public var OBJ_itu_t: Int { get }

public var NID_ccitt: Int32 { get }
public var OBJ_ccitt: Int { get }

public var SN_iso: String { get }
public var LN_iso: String { get }
public var NID_iso: Int32 { get }
public var OBJ_iso: Int { get }

public var SN_joint_iso_itu_t: String { get }
public var LN_joint_iso_itu_t: String { get }
public var NID_joint_iso_itu_t: Int32 { get }
public var OBJ_joint_iso_itu_t: Int { get }

public var NID_joint_iso_ccitt: Int32 { get }
public var OBJ_joint_iso_ccitt: Int { get }

public var SN_member_body: String { get }
public var LN_member_body: String { get }
public var NID_member_body: Int32 { get }

public var SN_identified_organization: String { get }
public var NID_identified_organization: Int32 { get }

public var SN_hmac_md5: String { get }
public var LN_hmac_md5: String { get }
public var NID_hmac_md5: Int32 { get }

public var SN_hmac_sha1: String { get }
public var LN_hmac_sha1: String { get }
public var NID_hmac_sha1: Int32 { get }

public var SN_certicom_arc: String { get }
public var NID_certicom_arc: Int32 { get }

public var SN_international_organizations: String { get }
public var LN_international_organizations: String { get }
public var NID_international_organizations: Int32 { get }

public var SN_wap: String { get }
public var NID_wap: Int32 { get }

public var SN_wap_wsg: String { get }
public var NID_wap_wsg: Int32 { get }

public var SN_selected_attribute_types: String { get }
public var LN_selected_attribute_types: String { get }
public var NID_selected_attribute_types: Int32 { get }

public var SN_clearance: String { get }
public var NID_clearance: Int32 { get }

public var SN_ISO_US: String { get }
public var LN_ISO_US: String { get }
public var NID_ISO_US: Int32 { get }

public var SN_X9_57: String { get }
public var LN_X9_57: String { get }
public var NID_X9_57: Int32 { get }

public var SN_X9cm: String { get }
public var LN_X9cm: String { get }
public var NID_X9cm: Int32 { get }

public var SN_dsa: String { get }
public var LN_dsa: String { get }
public var NID_dsa: Int32 { get }

public var SN_dsaWithSHA1: String { get }
public var LN_dsaWithSHA1: String { get }
public var NID_dsaWithSHA1: Int32 { get }

public var SN_ansi_X9_62: String { get }
public var LN_ansi_X9_62: String { get }
public var NID_ansi_X9_62: Int32 { get }

public var SN_X9_62_prime_field: String { get }
public var NID_X9_62_prime_field: Int32 { get }

public var SN_X9_62_characteristic_two_field: String { get }
public var NID_X9_62_characteristic_two_field: Int32 { get }

public var SN_X9_62_id_characteristic_two_basis: String { get }
public var NID_X9_62_id_characteristic_two_basis: Int32 { get }

public var SN_X9_62_onBasis: String { get }
public var NID_X9_62_onBasis: Int32 { get }

public var SN_X9_62_tpBasis: String { get }
public var NID_X9_62_tpBasis: Int32 { get }

public var SN_X9_62_ppBasis: String { get }
public var NID_X9_62_ppBasis: Int32 { get }

public var SN_X9_62_id_ecPublicKey: String { get }
public var NID_X9_62_id_ecPublicKey: Int32 { get }

public var SN_X9_62_c2pnb163v1: String { get }
public var NID_X9_62_c2pnb163v1: Int32 { get }

public var SN_X9_62_c2pnb163v2: String { get }
public var NID_X9_62_c2pnb163v2: Int32 { get }

public var SN_X9_62_c2pnb163v3: String { get }
public var NID_X9_62_c2pnb163v3: Int32 { get }

public var SN_X9_62_c2pnb176v1: String { get }
public var NID_X9_62_c2pnb176v1: Int32 { get }

public var SN_X9_62_c2tnb191v1: String { get }
public var NID_X9_62_c2tnb191v1: Int32 { get }

public var SN_X9_62_c2tnb191v2: String { get }
public var NID_X9_62_c2tnb191v2: Int32 { get }

public var SN_X9_62_c2tnb191v3: String { get }
public var NID_X9_62_c2tnb191v3: Int32 { get }

public var SN_X9_62_c2onb191v4: String { get }
public var NID_X9_62_c2onb191v4: Int32 { get }

public var SN_X9_62_c2onb191v5: String { get }
public var NID_X9_62_c2onb191v5: Int32 { get }

public var SN_X9_62_c2pnb208w1: String { get }
public var NID_X9_62_c2pnb208w1: Int32 { get }

public var SN_X9_62_c2tnb239v1: String { get }
public var NID_X9_62_c2tnb239v1: Int32 { get }

public var SN_X9_62_c2tnb239v2: String { get }
public var NID_X9_62_c2tnb239v2: Int32 { get }

public var SN_X9_62_c2tnb239v3: String { get }
public var NID_X9_62_c2tnb239v3: Int32 { get }

public var SN_X9_62_c2onb239v4: String { get }
public var NID_X9_62_c2onb239v4: Int32 { get }

public var SN_X9_62_c2onb239v5: String { get }
public var NID_X9_62_c2onb239v5: Int32 { get }

public var SN_X9_62_c2pnb272w1: String { get }
public var NID_X9_62_c2pnb272w1: Int32 { get }

public var SN_X9_62_c2pnb304w1: String { get }
public var NID_X9_62_c2pnb304w1: Int32 { get }

public var SN_X9_62_c2tnb359v1: String { get }
public var NID_X9_62_c2tnb359v1: Int32 { get }

public var SN_X9_62_c2pnb368w1: String { get }
public var NID_X9_62_c2pnb368w1: Int32 { get }

public var SN_X9_62_c2tnb431r1: String { get }
public var NID_X9_62_c2tnb431r1: Int32 { get }

public var SN_X9_62_prime192v1: String { get }
public var NID_X9_62_prime192v1: Int32 { get }

public var SN_X9_62_prime192v2: String { get }
public var NID_X9_62_prime192v2: Int32 { get }

public var SN_X9_62_prime192v3: String { get }
public var NID_X9_62_prime192v3: Int32 { get }

public var SN_X9_62_prime239v1: String { get }
public var NID_X9_62_prime239v1: Int32 { get }

public var SN_X9_62_prime239v2: String { get }
public var NID_X9_62_prime239v2: Int32 { get }

public var SN_X9_62_prime239v3: String { get }
public var NID_X9_62_prime239v3: Int32 { get }

public var SN_X9_62_prime256v1: String { get }
public var NID_X9_62_prime256v1: Int32 { get }

public var SN_ecdsa_with_SHA1: String { get }
public var NID_ecdsa_with_SHA1: Int32 { get }

public var SN_ecdsa_with_Recommended: String { get }
public var NID_ecdsa_with_Recommended: Int32 { get }

public var SN_ecdsa_with_Specified: String { get }
public var NID_ecdsa_with_Specified: Int32 { get }

public var SN_ecdsa_with_SHA224: String { get }
public var NID_ecdsa_with_SHA224: Int32 { get }

public var SN_ecdsa_with_SHA256: String { get }
public var NID_ecdsa_with_SHA256: Int32 { get }

public var SN_ecdsa_with_SHA384: String { get }
public var NID_ecdsa_with_SHA384: Int32 { get }

public var SN_ecdsa_with_SHA512: String { get }
public var NID_ecdsa_with_SHA512: Int32 { get }

public var SN_secp112r1: String { get }
public var NID_secp112r1: Int32 { get }

public var SN_secp112r2: String { get }
public var NID_secp112r2: Int32 { get }

public var SN_secp128r1: String { get }
public var NID_secp128r1: Int32 { get }

public var SN_secp128r2: String { get }
public var NID_secp128r2: Int32 { get }

public var SN_secp160k1: String { get }
public var NID_secp160k1: Int32 { get }

public var SN_secp160r1: String { get }
public var NID_secp160r1: Int32 { get }

public var SN_secp160r2: String { get }
public var NID_secp160r2: Int32 { get }

public var SN_secp192k1: String { get }
public var NID_secp192k1: Int32 { get }

public var SN_secp224k1: String { get }
public var NID_secp224k1: Int32 { get }

public var SN_secp224r1: String { get }
public var NID_secp224r1: Int32 { get }

public var SN_secp256k1: String { get }
public var NID_secp256k1: Int32 { get }

public var SN_secp384r1: String { get }
public var NID_secp384r1: Int32 { get }

public var SN_secp521r1: String { get }
public var NID_secp521r1: Int32 { get }

public var SN_sect113r1: String { get }
public var NID_sect113r1: Int32 { get }

public var SN_sect113r2: String { get }
public var NID_sect113r2: Int32 { get }

public var SN_sect131r1: String { get }
public var NID_sect131r1: Int32 { get }

public var SN_sect131r2: String { get }
public var NID_sect131r2: Int32 { get }

public var SN_sect163k1: String { get }
public var NID_sect163k1: Int32 { get }

public var SN_sect163r1: String { get }
public var NID_sect163r1: Int32 { get }

public var SN_sect163r2: String { get }
public var NID_sect163r2: Int32 { get }

public var SN_sect193r1: String { get }
public var NID_sect193r1: Int32 { get }

public var SN_sect193r2: String { get }
public var NID_sect193r2: Int32 { get }

public var SN_sect233k1: String { get }
public var NID_sect233k1: Int32 { get }

public var SN_sect233r1: String { get }
public var NID_sect233r1: Int32 { get }

public var SN_sect239k1: String { get }
public var NID_sect239k1: Int32 { get }

public var SN_sect283k1: String { get }
public var NID_sect283k1: Int32 { get }

public var SN_sect283r1: String { get }
public var NID_sect283r1: Int32 { get }

public var SN_sect409k1: String { get }
public var NID_sect409k1: Int32 { get }

public var SN_sect409r1: String { get }
public var NID_sect409r1: Int32 { get }

public var SN_sect571k1: String { get }
public var NID_sect571k1: Int32 { get }

public var SN_sect571r1: String { get }
public var NID_sect571r1: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls1: String { get }
public var NID_wap_wsg_idm_ecid_wtls1: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls3: String { get }
public var NID_wap_wsg_idm_ecid_wtls3: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls4: String { get }
public var NID_wap_wsg_idm_ecid_wtls4: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls5: String { get }
public var NID_wap_wsg_idm_ecid_wtls5: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls6: String { get }
public var NID_wap_wsg_idm_ecid_wtls6: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls7: String { get }
public var NID_wap_wsg_idm_ecid_wtls7: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls8: String { get }
public var NID_wap_wsg_idm_ecid_wtls8: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls9: String { get }
public var NID_wap_wsg_idm_ecid_wtls9: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls10: String { get }
public var NID_wap_wsg_idm_ecid_wtls10: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls11: String { get }
public var NID_wap_wsg_idm_ecid_wtls11: Int32 { get }

public var SN_wap_wsg_idm_ecid_wtls12: String { get }
public var NID_wap_wsg_idm_ecid_wtls12: Int32 { get }

public var SN_cast5_cbc: String { get }
public var LN_cast5_cbc: String { get }
public var NID_cast5_cbc: Int32 { get }

public var SN_cast5_ecb: String { get }
public var LN_cast5_ecb: String { get }
public var NID_cast5_ecb: Int32 { get }

public var SN_cast5_cfb64: String { get }
public var LN_cast5_cfb64: String { get }
public var NID_cast5_cfb64: Int32 { get }

public var SN_cast5_ofb64: String { get }
public var LN_cast5_ofb64: String { get }
public var NID_cast5_ofb64: Int32 { get }

public var LN_pbeWithMD5AndCast5_CBC: String { get }
public var NID_pbeWithMD5AndCast5_CBC: Int32 { get }

public var SN_id_PasswordBasedMAC: String { get }
public var LN_id_PasswordBasedMAC: String { get }
public var NID_id_PasswordBasedMAC: Int32 { get }

public var SN_id_DHBasedMac: String { get }
public var LN_id_DHBasedMac: String { get }
public var NID_id_DHBasedMac: Int32 { get }

public var SN_rsadsi: String { get }
public var LN_rsadsi: String { get }
public var NID_rsadsi: Int32 { get }

public var SN_pkcs: String { get }
public var LN_pkcs: String { get }
public var NID_pkcs: Int32 { get }

public var SN_pkcs1: String { get }
public var NID_pkcs1: Int32 { get }

public var LN_rsaEncryption: String { get }
public var NID_rsaEncryption: Int32 { get }

public var SN_md2WithRSAEncryption: String { get }
public var LN_md2WithRSAEncryption: String { get }
public var NID_md2WithRSAEncryption: Int32 { get }

public var SN_md4WithRSAEncryption: String { get }
public var LN_md4WithRSAEncryption: String { get }
public var NID_md4WithRSAEncryption: Int32 { get }

public var SN_md5WithRSAEncryption: String { get }
public var LN_md5WithRSAEncryption: String { get }
public var NID_md5WithRSAEncryption: Int32 { get }

public var SN_sha1WithRSAEncryption: String { get }
public var LN_sha1WithRSAEncryption: String { get }
public var NID_sha1WithRSAEncryption: Int32 { get }

public var SN_rsaesOaep: String { get }
public var LN_rsaesOaep: String { get }
public var NID_rsaesOaep: Int32 { get }

public var SN_mgf1: String { get }
public var LN_mgf1: String { get }
public var NID_mgf1: Int32 { get }

public var SN_pSpecified: String { get }
public var LN_pSpecified: String { get }
public var NID_pSpecified: Int32 { get }

public var SN_rsassaPss: String { get }
public var LN_rsassaPss: String { get }
public var NID_rsassaPss: Int32 { get }

public var SN_sha256WithRSAEncryption: String { get }
public var LN_sha256WithRSAEncryption: String { get }
public var NID_sha256WithRSAEncryption: Int32 { get }

public var SN_sha384WithRSAEncryption: String { get }
public var LN_sha384WithRSAEncryption: String { get }
public var NID_sha384WithRSAEncryption: Int32 { get }

public var SN_sha512WithRSAEncryption: String { get }
public var LN_sha512WithRSAEncryption: String { get }
public var NID_sha512WithRSAEncryption: Int32 { get }

public var SN_sha224WithRSAEncryption: String { get }
public var LN_sha224WithRSAEncryption: String { get }
public var NID_sha224WithRSAEncryption: Int32 { get }

public var SN_pkcs3: String { get }
public var NID_pkcs3: Int32 { get }

public var LN_dhKeyAgreement: String { get }
public var NID_dhKeyAgreement: Int32 { get }

public var SN_pkcs5: String { get }
public var NID_pkcs5: Int32 { get }

public var SN_pbeWithMD2AndDES_CBC: String { get }
public var LN_pbeWithMD2AndDES_CBC: String { get }
public var NID_pbeWithMD2AndDES_CBC: Int32 { get }

public var SN_pbeWithMD5AndDES_CBC: String { get }
public var LN_pbeWithMD5AndDES_CBC: String { get }
public var NID_pbeWithMD5AndDES_CBC: Int32 { get }

public var SN_pbeWithMD2AndRC2_CBC: String { get }
public var LN_pbeWithMD2AndRC2_CBC: String { get }
public var NID_pbeWithMD2AndRC2_CBC: Int32 { get }

public var SN_pbeWithMD5AndRC2_CBC: String { get }
public var LN_pbeWithMD5AndRC2_CBC: String { get }
public var NID_pbeWithMD5AndRC2_CBC: Int32 { get }

public var SN_pbeWithSHA1AndDES_CBC: String { get }
public var LN_pbeWithSHA1AndDES_CBC: String { get }
public var NID_pbeWithSHA1AndDES_CBC: Int32 { get }

public var SN_pbeWithSHA1AndRC2_CBC: String { get }
public var LN_pbeWithSHA1AndRC2_CBC: String { get }
public var NID_pbeWithSHA1AndRC2_CBC: Int32 { get }

public var LN_id_pbkdf2: String { get }
public var NID_id_pbkdf2: Int32 { get }

public var LN_pbes2: String { get }
public var NID_pbes2: Int32 { get }

public var LN_pbmac1: String { get }
public var NID_pbmac1: Int32 { get }

public var SN_pkcs7: String { get }
public var NID_pkcs7: Int32 { get }

public var LN_pkcs7_data: String { get }
public var NID_pkcs7_data: Int32 { get }

public var LN_pkcs7_signed: String { get }
public var NID_pkcs7_signed: Int32 { get }

public var LN_pkcs7_enveloped: String { get }
public var NID_pkcs7_enveloped: Int32 { get }

public var LN_pkcs7_signedAndEnveloped: String { get }
public var NID_pkcs7_signedAndEnveloped: Int32 { get }

public var LN_pkcs7_digest: String { get }
public var NID_pkcs7_digest: Int32 { get }

public var LN_pkcs7_encrypted: String { get }
public var NID_pkcs7_encrypted: Int32 { get }

public var SN_pkcs9: String { get }
public var NID_pkcs9: Int32 { get }

public var LN_pkcs9_emailAddress: String { get }
public var NID_pkcs9_emailAddress: Int32 { get }

public var LN_pkcs9_unstructuredName: String { get }
public var NID_pkcs9_unstructuredName: Int32 { get }

public var LN_pkcs9_contentType: String { get }
public var NID_pkcs9_contentType: Int32 { get }

public var LN_pkcs9_messageDigest: String { get }
public var NID_pkcs9_messageDigest: Int32 { get }

public var LN_pkcs9_signingTime: String { get }
public var NID_pkcs9_signingTime: Int32 { get }

public var LN_pkcs9_countersignature: String { get }
public var NID_pkcs9_countersignature: Int32 { get }

public var LN_pkcs9_challengePassword: String { get }
public var NID_pkcs9_challengePassword: Int32 { get }

public var LN_pkcs9_unstructuredAddress: String { get }
public var NID_pkcs9_unstructuredAddress: Int32 { get }

public var LN_pkcs9_extCertAttributes: String { get }
public var NID_pkcs9_extCertAttributes: Int32 { get }

public var SN_ext_req: String { get }
public var LN_ext_req: String { get }
public var NID_ext_req: Int32 { get }

public var SN_SMIMECapabilities: String { get }
public var LN_SMIMECapabilities: String { get }
public var NID_SMIMECapabilities: Int32 { get }

public var SN_SMIME: String { get }
public var LN_SMIME: String { get }
public var NID_SMIME: Int32 { get }

public var SN_id_smime_mod: String { get }
public var NID_id_smime_mod: Int32 { get }

public var SN_id_smime_ct: String { get }
public var NID_id_smime_ct: Int32 { get }

public var SN_id_smime_aa: String { get }
public var NID_id_smime_aa: Int32 { get }

public var SN_id_smime_alg: String { get }
public var NID_id_smime_alg: Int32 { get }

public var SN_id_smime_cd: String { get }
public var NID_id_smime_cd: Int32 { get }

public var SN_id_smime_spq: String { get }
public var NID_id_smime_spq: Int32 { get }

public var SN_id_smime_cti: String { get }
public var NID_id_smime_cti: Int32 { get }

public var SN_id_smime_mod_cms: String { get }
public var NID_id_smime_mod_cms: Int32 { get }

public var SN_id_smime_mod_ess: String { get }
public var NID_id_smime_mod_ess: Int32 { get }

public var SN_id_smime_mod_oid: String { get }
public var NID_id_smime_mod_oid: Int32 { get }

public var SN_id_smime_mod_msg_v3: String { get }
public var NID_id_smime_mod_msg_v3: Int32 { get }

public var SN_id_smime_mod_ets_eSignature_88: String { get }
public var NID_id_smime_mod_ets_eSignature_88: Int32 { get }

public var SN_id_smime_mod_ets_eSignature_97: String { get }
public var NID_id_smime_mod_ets_eSignature_97: Int32 { get }

public var SN_id_smime_mod_ets_eSigPolicy_88: String { get }
public var NID_id_smime_mod_ets_eSigPolicy_88: Int32 { get }

public var SN_id_smime_mod_ets_eSigPolicy_97: String { get }
public var NID_id_smime_mod_ets_eSigPolicy_97: Int32 { get }

public var SN_id_smime_ct_receipt: String { get }
public var NID_id_smime_ct_receipt: Int32 { get }

public var SN_id_smime_ct_authData: String { get }
public var NID_id_smime_ct_authData: Int32 { get }

public var SN_id_smime_ct_publishCert: String { get }
public var NID_id_smime_ct_publishCert: Int32 { get }

public var SN_id_smime_ct_TSTInfo: String { get }
public var NID_id_smime_ct_TSTInfo: Int32 { get }

public var SN_id_smime_ct_TDTInfo: String { get }
public var NID_id_smime_ct_TDTInfo: Int32 { get }

public var SN_id_smime_ct_contentInfo: String { get }
public var NID_id_smime_ct_contentInfo: Int32 { get }

public var SN_id_smime_ct_DVCSRequestData: String { get }
public var NID_id_smime_ct_DVCSRequestData: Int32 { get }

public var SN_id_smime_ct_DVCSResponseData: String { get }
public var NID_id_smime_ct_DVCSResponseData: Int32 { get }

public var SN_id_smime_ct_compressedData: String { get }
public var NID_id_smime_ct_compressedData: Int32 { get }

public var SN_id_ct_asciiTextWithCRLF: String { get }
public var NID_id_ct_asciiTextWithCRLF: Int32 { get }

public var SN_id_smime_aa_receiptRequest: String { get }
public var NID_id_smime_aa_receiptRequest: Int32 { get }

public var SN_id_smime_aa_securityLabel: String { get }
public var NID_id_smime_aa_securityLabel: Int32 { get }

public var SN_id_smime_aa_mlExpandHistory: String { get }
public var NID_id_smime_aa_mlExpandHistory: Int32 { get }

public var SN_id_smime_aa_contentHint: String { get }
public var NID_id_smime_aa_contentHint: Int32 { get }

public var SN_id_smime_aa_msgSigDigest: String { get }
public var NID_id_smime_aa_msgSigDigest: Int32 { get }

public var SN_id_smime_aa_encapContentType: String { get }
public var NID_id_smime_aa_encapContentType: Int32 { get }

public var SN_id_smime_aa_contentIdentifier: String { get }
public var NID_id_smime_aa_contentIdentifier: Int32 { get }

public var SN_id_smime_aa_macValue: String { get }
public var NID_id_smime_aa_macValue: Int32 { get }

public var SN_id_smime_aa_equivalentLabels: String { get }
public var NID_id_smime_aa_equivalentLabels: Int32 { get }

public var SN_id_smime_aa_contentReference: String { get }
public var NID_id_smime_aa_contentReference: Int32 { get }

public var SN_id_smime_aa_encrypKeyPref: String { get }
public var NID_id_smime_aa_encrypKeyPref: Int32 { get }

public var SN_id_smime_aa_signingCertificate: String { get }
public var NID_id_smime_aa_signingCertificate: Int32 { get }

public var SN_id_smime_aa_smimeEncryptCerts: String { get }
public var NID_id_smime_aa_smimeEncryptCerts: Int32 { get }

public var SN_id_smime_aa_timeStampToken: String { get }
public var NID_id_smime_aa_timeStampToken: Int32 { get }

public var SN_id_smime_aa_ets_sigPolicyId: String { get }
public var NID_id_smime_aa_ets_sigPolicyId: Int32 { get }

public var SN_id_smime_aa_ets_commitmentType: String { get }
public var NID_id_smime_aa_ets_commitmentType: Int32 { get }

public var SN_id_smime_aa_ets_signerLocation: String { get }
public var NID_id_smime_aa_ets_signerLocation: Int32 { get }

public var SN_id_smime_aa_ets_signerAttr: String { get }
public var NID_id_smime_aa_ets_signerAttr: Int32 { get }

public var SN_id_smime_aa_ets_otherSigCert: String { get }
public var NID_id_smime_aa_ets_otherSigCert: Int32 { get }

public var SN_id_smime_aa_ets_contentTimestamp: String { get }
public var NID_id_smime_aa_ets_contentTimestamp: Int32 { get }

public var SN_id_smime_aa_ets_CertificateRefs: String { get }
public var NID_id_smime_aa_ets_CertificateRefs: Int32 { get }

public var SN_id_smime_aa_ets_RevocationRefs: String { get }
public var NID_id_smime_aa_ets_RevocationRefs: Int32 { get }

public var SN_id_smime_aa_ets_certValues: String { get }
public var NID_id_smime_aa_ets_certValues: Int32 { get }

public var SN_id_smime_aa_ets_revocationValues: String { get }
public var NID_id_smime_aa_ets_revocationValues: Int32 { get }

public var SN_id_smime_aa_ets_escTimeStamp: String { get }
public var NID_id_smime_aa_ets_escTimeStamp: Int32 { get }

public var SN_id_smime_aa_ets_certCRLTimestamp: String { get }
public var NID_id_smime_aa_ets_certCRLTimestamp: Int32 { get }

public var SN_id_smime_aa_ets_archiveTimeStamp: String { get }
public var NID_id_smime_aa_ets_archiveTimeStamp: Int32 { get }

public var SN_id_smime_aa_signatureType: String { get }
public var NID_id_smime_aa_signatureType: Int32 { get }

public var SN_id_smime_aa_dvcs_dvc: String { get }
public var NID_id_smime_aa_dvcs_dvc: Int32 { get }

public var SN_id_smime_alg_ESDHwith3DES: String { get }
public var NID_id_smime_alg_ESDHwith3DES: Int32 { get }

public var SN_id_smime_alg_ESDHwithRC2: String { get }
public var NID_id_smime_alg_ESDHwithRC2: Int32 { get }

public var SN_id_smime_alg_3DESwrap: String { get }
public var NID_id_smime_alg_3DESwrap: Int32 { get }

public var SN_id_smime_alg_RC2wrap: String { get }
public var NID_id_smime_alg_RC2wrap: Int32 { get }

public var SN_id_smime_alg_ESDH: String { get }
public var NID_id_smime_alg_ESDH: Int32 { get }

public var SN_id_smime_alg_CMS3DESwrap: String { get }
public var NID_id_smime_alg_CMS3DESwrap: Int32 { get }

public var SN_id_smime_alg_CMSRC2wrap: String { get }
public var NID_id_smime_alg_CMSRC2wrap: Int32 { get }

public var SN_id_alg_PWRI_KEK: String { get }
public var NID_id_alg_PWRI_KEK: Int32 { get }

public var SN_id_smime_cd_ldap: String { get }
public var NID_id_smime_cd_ldap: Int32 { get }

public var SN_id_smime_spq_ets_sqt_uri: String { get }
public var NID_id_smime_spq_ets_sqt_uri: Int32 { get }

public var SN_id_smime_spq_ets_sqt_unotice: String { get }
public var NID_id_smime_spq_ets_sqt_unotice: Int32 { get }

public var SN_id_smime_cti_ets_proofOfOrigin: String { get }
public var NID_id_smime_cti_ets_proofOfOrigin: Int32 { get }

public var SN_id_smime_cti_ets_proofOfReceipt: String { get }
public var NID_id_smime_cti_ets_proofOfReceipt: Int32 { get }

public var SN_id_smime_cti_ets_proofOfDelivery: String { get }
public var NID_id_smime_cti_ets_proofOfDelivery: Int32 { get }

public var SN_id_smime_cti_ets_proofOfSender: String { get }
public var NID_id_smime_cti_ets_proofOfSender: Int32 { get }

public var SN_id_smime_cti_ets_proofOfApproval: String { get }
public var NID_id_smime_cti_ets_proofOfApproval: Int32 { get }

public var SN_id_smime_cti_ets_proofOfCreation: String { get }
public var NID_id_smime_cti_ets_proofOfCreation: Int32 { get }

public var LN_friendlyName: String { get }
public var NID_friendlyName: Int32 { get }

public var LN_localKeyID: String { get }
public var NID_localKeyID: Int32 { get }

public var SN_ms_csp_name: String { get }
public var LN_ms_csp_name: String { get }
public var NID_ms_csp_name: Int32 { get }

public var SN_LocalKeySet: String { get }
public var LN_LocalKeySet: String { get }
public var NID_LocalKeySet: Int32 { get }

public var LN_x509Certificate: String { get }
public var NID_x509Certificate: Int32 { get }

public var LN_sdsiCertificate: String { get }
public var NID_sdsiCertificate: Int32 { get }

public var LN_x509Crl: String { get }
public var NID_x509Crl: Int32 { get }

public var SN_pbe_WithSHA1And128BitRC4: String { get }
public var LN_pbe_WithSHA1And128BitRC4: String { get }
public var NID_pbe_WithSHA1And128BitRC4: Int32 { get }

public var SN_pbe_WithSHA1And40BitRC4: String { get }
public var LN_pbe_WithSHA1And40BitRC4: String { get }
public var NID_pbe_WithSHA1And40BitRC4: Int32 { get }

public var SN_pbe_WithSHA1And3_Key_TripleDES_CBC: String { get }
public var LN_pbe_WithSHA1And3_Key_TripleDES_CBC: String { get }
public var NID_pbe_WithSHA1And3_Key_TripleDES_CBC: Int32 { get }

public var SN_pbe_WithSHA1And2_Key_TripleDES_CBC: String { get }
public var LN_pbe_WithSHA1And2_Key_TripleDES_CBC: String { get }
public var NID_pbe_WithSHA1And2_Key_TripleDES_CBC: Int32 { get }

public var SN_pbe_WithSHA1And128BitRC2_CBC: String { get }
public var LN_pbe_WithSHA1And128BitRC2_CBC: String { get }
public var NID_pbe_WithSHA1And128BitRC2_CBC: Int32 { get }

public var SN_pbe_WithSHA1And40BitRC2_CBC: String { get }
public var LN_pbe_WithSHA1And40BitRC2_CBC: String { get }
public var NID_pbe_WithSHA1And40BitRC2_CBC: Int32 { get }

public var LN_keyBag: String { get }
public var NID_keyBag: Int32 { get }

public var LN_pkcs8ShroudedKeyBag: String { get }
public var NID_pkcs8ShroudedKeyBag: Int32 { get }

public var LN_certBag: String { get }
public var NID_certBag: Int32 { get }

public var LN_crlBag: String { get }
public var NID_crlBag: Int32 { get }

public var LN_secretBag: String { get }
public var NID_secretBag: Int32 { get }

public var LN_safeContentsBag: String { get }
public var NID_safeContentsBag: Int32 { get }

public var SN_md2: String { get }
public var LN_md2: String { get }
public var NID_md2: Int32 { get }

public var SN_md4: String { get }
public var LN_md4: String { get }
public var NID_md4: Int32 { get }

public var SN_md5: String { get }
public var LN_md5: String { get }
public var NID_md5: Int32 { get }

public var SN_md5_sha1: String { get }
public var LN_md5_sha1: String { get }
public var NID_md5_sha1: Int32 { get }

public var LN_hmacWithMD5: String { get }
public var NID_hmacWithMD5: Int32 { get }

public var LN_hmacWithSHA1: String { get }
public var NID_hmacWithSHA1: Int32 { get }

public var LN_hmacWithSHA224: String { get }
public var NID_hmacWithSHA224: Int32 { get }

public var LN_hmacWithSHA256: String { get }
public var NID_hmacWithSHA256: Int32 { get }

public var LN_hmacWithSHA384: String { get }
public var NID_hmacWithSHA384: Int32 { get }

public var LN_hmacWithSHA512: String { get }
public var NID_hmacWithSHA512: Int32 { get }

public var SN_rc2_cbc: String { get }
public var LN_rc2_cbc: String { get }
public var NID_rc2_cbc: Int32 { get }

public var SN_rc2_ecb: String { get }
public var LN_rc2_ecb: String { get }
public var NID_rc2_ecb: Int32 { get }

public var SN_rc2_cfb64: String { get }
public var LN_rc2_cfb64: String { get }
public var NID_rc2_cfb64: Int32 { get }

public var SN_rc2_ofb64: String { get }
public var LN_rc2_ofb64: String { get }
public var NID_rc2_ofb64: Int32 { get }

public var SN_rc2_40_cbc: String { get }
public var LN_rc2_40_cbc: String { get }
public var NID_rc2_40_cbc: Int32 { get }

public var SN_rc2_64_cbc: String { get }
public var LN_rc2_64_cbc: String { get }
public var NID_rc2_64_cbc: Int32 { get }

public var SN_rc4: String { get }
public var LN_rc4: String { get }
public var NID_rc4: Int32 { get }

public var SN_rc4_40: String { get }
public var LN_rc4_40: String { get }
public var NID_rc4_40: Int32 { get }

public var SN_des_ede3_cbc: String { get }
public var LN_des_ede3_cbc: String { get }
public var NID_des_ede3_cbc: Int32 { get }

public var SN_rc5_cbc: String { get }
public var LN_rc5_cbc: String { get }
public var NID_rc5_cbc: Int32 { get }

public var SN_rc5_ecb: String { get }
public var LN_rc5_ecb: String { get }
public var NID_rc5_ecb: Int32 { get }

public var SN_rc5_cfb64: String { get }
public var LN_rc5_cfb64: String { get }
public var NID_rc5_cfb64: Int32 { get }

public var SN_rc5_ofb64: String { get }
public var LN_rc5_ofb64: String { get }
public var NID_rc5_ofb64: Int32 { get }

public var SN_ms_ext_req: String { get }
public var LN_ms_ext_req: String { get }
public var NID_ms_ext_req: Int32 { get }

public var SN_ms_code_ind: String { get }
public var LN_ms_code_ind: String { get }
public var NID_ms_code_ind: Int32 { get }

public var SN_ms_code_com: String { get }
public var LN_ms_code_com: String { get }
public var NID_ms_code_com: Int32 { get }

public var SN_ms_ctl_sign: String { get }
public var LN_ms_ctl_sign: String { get }
public var NID_ms_ctl_sign: Int32 { get }

public var SN_ms_sgc: String { get }
public var LN_ms_sgc: String { get }
public var NID_ms_sgc: Int32 { get }

public var SN_ms_efs: String { get }
public var LN_ms_efs: String { get }
public var NID_ms_efs: Int32 { get }

public var SN_ms_smartcard_login: String { get }
public var LN_ms_smartcard_login: String { get }
public var NID_ms_smartcard_login: Int32 { get }

public var SN_ms_upn: String { get }
public var LN_ms_upn: String { get }
public var NID_ms_upn: Int32 { get }

public var SN_idea_cbc: String { get }
public var LN_idea_cbc: String { get }
public var NID_idea_cbc: Int32 { get }

public var SN_idea_ecb: String { get }
public var LN_idea_ecb: String { get }
public var NID_idea_ecb: Int32 { get }

public var SN_idea_cfb64: String { get }
public var LN_idea_cfb64: String { get }
public var NID_idea_cfb64: Int32 { get }

public var SN_idea_ofb64: String { get }
public var LN_idea_ofb64: String { get }
public var NID_idea_ofb64: Int32 { get }

public var SN_bf_cbc: String { get }
public var LN_bf_cbc: String { get }
public var NID_bf_cbc: Int32 { get }

public var SN_bf_ecb: String { get }
public var LN_bf_ecb: String { get }
public var NID_bf_ecb: Int32 { get }

public var SN_bf_cfb64: String { get }
public var LN_bf_cfb64: String { get }
public var NID_bf_cfb64: Int32 { get }

public var SN_bf_ofb64: String { get }
public var LN_bf_ofb64: String { get }
public var NID_bf_ofb64: Int32 { get }

public var SN_id_pkix: String { get }
public var NID_id_pkix: Int32 { get }

public var SN_id_pkix_mod: String { get }
public var NID_id_pkix_mod: Int32 { get }

public var SN_id_pe: String { get }
public var NID_id_pe: Int32 { get }

public var SN_id_qt: String { get }
public var NID_id_qt: Int32 { get }

public var SN_id_kp: String { get }
public var NID_id_kp: Int32 { get }

public var SN_id_it: String { get }
public var NID_id_it: Int32 { get }

public var SN_id_pkip: String { get }
public var NID_id_pkip: Int32 { get }

public var SN_id_alg: String { get }
public var NID_id_alg: Int32 { get }

public var SN_id_cmc: String { get }
public var NID_id_cmc: Int32 { get }

public var SN_id_on: String { get }
public var NID_id_on: Int32 { get }

public var SN_id_pda: String { get }
public var NID_id_pda: Int32 { get }

public var SN_id_aca: String { get }
public var NID_id_aca: Int32 { get }

public var SN_id_qcs: String { get }
public var NID_id_qcs: Int32 { get }

public var SN_id_cct: String { get }
public var NID_id_cct: Int32 { get }

public var SN_id_ppl: String { get }
public var NID_id_ppl: Int32 { get }

public var SN_id_ad: String { get }
public var NID_id_ad: Int32 { get }

public var SN_id_pkix1_explicit_88: String { get }
public var NID_id_pkix1_explicit_88: Int32 { get }

public var SN_id_pkix1_implicit_88: String { get }
public var NID_id_pkix1_implicit_88: Int32 { get }

public var SN_id_pkix1_explicit_93: String { get }
public var NID_id_pkix1_explicit_93: Int32 { get }

public var SN_id_pkix1_implicit_93: String { get }
public var NID_id_pkix1_implicit_93: Int32 { get }

public var SN_id_mod_crmf: String { get }
public var NID_id_mod_crmf: Int32 { get }

public var SN_id_mod_cmc: String { get }
public var NID_id_mod_cmc: Int32 { get }

public var SN_id_mod_kea_profile_88: String { get }
public var NID_id_mod_kea_profile_88: Int32 { get }

public var SN_id_mod_kea_profile_93: String { get }
public var NID_id_mod_kea_profile_93: Int32 { get }

public var SN_id_mod_cmp: String { get }
public var NID_id_mod_cmp: Int32 { get }

public var SN_id_mod_qualified_cert_88: String { get }
public var NID_id_mod_qualified_cert_88: Int32 { get }

public var SN_id_mod_qualified_cert_93: String { get }
public var NID_id_mod_qualified_cert_93: Int32 { get }

public var SN_id_mod_attribute_cert: String { get }
public var NID_id_mod_attribute_cert: Int32 { get }

public var SN_id_mod_timestamp_protocol: String { get }
public var NID_id_mod_timestamp_protocol: Int32 { get }

public var SN_id_mod_ocsp: String { get }
public var NID_id_mod_ocsp: Int32 { get }

public var SN_id_mod_dvcs: String { get }
public var NID_id_mod_dvcs: Int32 { get }

public var SN_id_mod_cmp2000: String { get }
public var NID_id_mod_cmp2000: Int32 { get }

public var SN_info_access: String { get }
public var LN_info_access: String { get }
public var NID_info_access: Int32 { get }

public var SN_biometricInfo: String { get }
public var LN_biometricInfo: String { get }
public var NID_biometricInfo: Int32 { get }

public var SN_qcStatements: String { get }
public var NID_qcStatements: Int32 { get }

public var SN_ac_auditEntity: String { get }
public var NID_ac_auditEntity: Int32 { get }

public var SN_ac_targeting: String { get }
public var NID_ac_targeting: Int32 { get }

public var SN_aaControls: String { get }
public var NID_aaControls: Int32 { get }

public var SN_sbgp_ipAddrBlock: String { get }
public var NID_sbgp_ipAddrBlock: Int32 { get }

public var SN_sbgp_autonomousSysNum: String { get }
public var NID_sbgp_autonomousSysNum: Int32 { get }

public var SN_sbgp_routerIdentifier: String { get }
public var NID_sbgp_routerIdentifier: Int32 { get }

public var SN_ac_proxying: String { get }
public var NID_ac_proxying: Int32 { get }

public var SN_sinfo_access: String { get }
public var LN_sinfo_access: String { get }
public var NID_sinfo_access: Int32 { get }

public var SN_proxyCertInfo: String { get }
public var LN_proxyCertInfo: String { get }
public var NID_proxyCertInfo: Int32 { get }

public var SN_id_qt_cps: String { get }
public var LN_id_qt_cps: String { get }
public var NID_id_qt_cps: Int32 { get }

public var SN_id_qt_unotice: String { get }
public var LN_id_qt_unotice: String { get }
public var NID_id_qt_unotice: Int32 { get }

public var SN_textNotice: String { get }
public var NID_textNotice: Int32 { get }

public var SN_server_auth: String { get }
public var LN_server_auth: String { get }
public var NID_server_auth: Int32 { get }

public var SN_client_auth: String { get }
public var LN_client_auth: String { get }
public var NID_client_auth: Int32 { get }

public var SN_code_sign: String { get }
public var LN_code_sign: String { get }
public var NID_code_sign: Int32 { get }

public var SN_email_protect: String { get }
public var LN_email_protect: String { get }
public var NID_email_protect: Int32 { get }

public var SN_ipsecEndSystem: String { get }
public var LN_ipsecEndSystem: String { get }
public var NID_ipsecEndSystem: Int32 { get }

public var SN_ipsecTunnel: String { get }
public var LN_ipsecTunnel: String { get }
public var NID_ipsecTunnel: Int32 { get }

public var SN_ipsecUser: String { get }
public var LN_ipsecUser: String { get }
public var NID_ipsecUser: Int32 { get }

public var SN_time_stamp: String { get }
public var LN_time_stamp: String { get }
public var NID_time_stamp: Int32 { get }

public var SN_OCSP_sign: String { get }
public var LN_OCSP_sign: String { get }
public var NID_OCSP_sign: Int32 { get }

public var SN_dvcs: String { get }
public var LN_dvcs: String { get }
public var NID_dvcs: Int32 { get }

public var SN_id_it_caProtEncCert: String { get }
public var NID_id_it_caProtEncCert: Int32 { get }

public var SN_id_it_signKeyPairTypes: String { get }
public var NID_id_it_signKeyPairTypes: Int32 { get }

public var SN_id_it_encKeyPairTypes: String { get }
public var NID_id_it_encKeyPairTypes: Int32 { get }

public var SN_id_it_preferredSymmAlg: String { get }
public var NID_id_it_preferredSymmAlg: Int32 { get }

public var SN_id_it_caKeyUpdateInfo: String { get }
public var NID_id_it_caKeyUpdateInfo: Int32 { get }

public var SN_id_it_currentCRL: String { get }
public var NID_id_it_currentCRL: Int32 { get }

public var SN_id_it_unsupportedOIDs: String { get }
public var NID_id_it_unsupportedOIDs: Int32 { get }

public var SN_id_it_subscriptionRequest: String { get }
public var NID_id_it_subscriptionRequest: Int32 { get }

public var SN_id_it_subscriptionResponse: String { get }
public var NID_id_it_subscriptionResponse: Int32 { get }

public var SN_id_it_keyPairParamReq: String { get }
public var NID_id_it_keyPairParamReq: Int32 { get }

public var SN_id_it_keyPairParamRep: String { get }
public var NID_id_it_keyPairParamRep: Int32 { get }

public var SN_id_it_revPassphrase: String { get }
public var NID_id_it_revPassphrase: Int32 { get }

public var SN_id_it_implicitConfirm: String { get }
public var NID_id_it_implicitConfirm: Int32 { get }

public var SN_id_it_confirmWaitTime: String { get }
public var NID_id_it_confirmWaitTime: Int32 { get }

public var SN_id_it_origPKIMessage: String { get }
public var NID_id_it_origPKIMessage: Int32 { get }

public var SN_id_it_suppLangTags: String { get }
public var NID_id_it_suppLangTags: Int32 { get }

public var SN_id_regCtrl: String { get }
public var NID_id_regCtrl: Int32 { get }

public var SN_id_regInfo: String { get }
public var NID_id_regInfo: Int32 { get }

public var SN_id_regCtrl_regToken: String { get }
public var NID_id_regCtrl_regToken: Int32 { get }

public var SN_id_regCtrl_authenticator: String { get }
public var NID_id_regCtrl_authenticator: Int32 { get }

public var SN_id_regCtrl_pkiPublicationInfo: String { get }
public var NID_id_regCtrl_pkiPublicationInfo: Int32 { get }

public var SN_id_regCtrl_pkiArchiveOptions: String { get }
public var NID_id_regCtrl_pkiArchiveOptions: Int32 { get }

public var SN_id_regCtrl_oldCertID: String { get }
public var NID_id_regCtrl_oldCertID: Int32 { get }

public var SN_id_regCtrl_protocolEncrKey: String { get }
public var NID_id_regCtrl_protocolEncrKey: Int32 { get }

public var SN_id_regInfo_utf8Pairs: String { get }
public var NID_id_regInfo_utf8Pairs: Int32 { get }

public var SN_id_regInfo_certReq: String { get }
public var NID_id_regInfo_certReq: Int32 { get }

public var SN_id_alg_des40: String { get }
public var NID_id_alg_des40: Int32 { get }

public var SN_id_alg_noSignature: String { get }
public var NID_id_alg_noSignature: Int32 { get }

public var SN_id_alg_dh_sig_hmac_sha1: String { get }
public var NID_id_alg_dh_sig_hmac_sha1: Int32 { get }

public var SN_id_alg_dh_pop: String { get }
public var NID_id_alg_dh_pop: Int32 { get }

public var SN_id_cmc_statusInfo: String { get }
public var NID_id_cmc_statusInfo: Int32 { get }

public var SN_id_cmc_identification: String { get }
public var NID_id_cmc_identification: Int32 { get }

public var SN_id_cmc_identityProof: String { get }
public var NID_id_cmc_identityProof: Int32 { get }

public var SN_id_cmc_dataReturn: String { get }
public var NID_id_cmc_dataReturn: Int32 { get }

public var SN_id_cmc_transactionId: String { get }
public var NID_id_cmc_transactionId: Int32 { get }

public var SN_id_cmc_senderNonce: String { get }
public var NID_id_cmc_senderNonce: Int32 { get }

public var SN_id_cmc_recipientNonce: String { get }
public var NID_id_cmc_recipientNonce: Int32 { get }

public var SN_id_cmc_addExtensions: String { get }
public var NID_id_cmc_addExtensions: Int32 { get }

public var SN_id_cmc_encryptedPOP: String { get }
public var NID_id_cmc_encryptedPOP: Int32 { get }

public var SN_id_cmc_decryptedPOP: String { get }
public var NID_id_cmc_decryptedPOP: Int32 { get }

public var SN_id_cmc_lraPOPWitness: String { get }
public var NID_id_cmc_lraPOPWitness: Int32 { get }

public var SN_id_cmc_getCert: String { get }
public var NID_id_cmc_getCert: Int32 { get }

public var SN_id_cmc_getCRL: String { get }
public var NID_id_cmc_getCRL: Int32 { get }

public var SN_id_cmc_revokeRequest: String { get }
public var NID_id_cmc_revokeRequest: Int32 { get }

public var SN_id_cmc_regInfo: String { get }
public var NID_id_cmc_regInfo: Int32 { get }

public var SN_id_cmc_responseInfo: String { get }
public var NID_id_cmc_responseInfo: Int32 { get }

public var SN_id_cmc_queryPending: String { get }
public var NID_id_cmc_queryPending: Int32 { get }

public var SN_id_cmc_popLinkRandom: String { get }
public var NID_id_cmc_popLinkRandom: Int32 { get }

public var SN_id_cmc_popLinkWitness: String { get }
public var NID_id_cmc_popLinkWitness: Int32 { get }

public var SN_id_cmc_confirmCertAcceptance: String { get }
public var NID_id_cmc_confirmCertAcceptance: Int32 { get }

public var SN_id_on_personalData: String { get }
public var NID_id_on_personalData: Int32 { get }

public var SN_id_on_permanentIdentifier: String { get }
public var LN_id_on_permanentIdentifier: String { get }
public var NID_id_on_permanentIdentifier: Int32 { get }

public var SN_id_pda_dateOfBirth: String { get }
public var NID_id_pda_dateOfBirth: Int32 { get }

public var SN_id_pda_placeOfBirth: String { get }
public var NID_id_pda_placeOfBirth: Int32 { get }

public var SN_id_pda_gender: String { get }
public var NID_id_pda_gender: Int32 { get }

public var SN_id_pda_countryOfCitizenship: String { get }
public var NID_id_pda_countryOfCitizenship: Int32 { get }

public var SN_id_pda_countryOfResidence: String { get }
public var NID_id_pda_countryOfResidence: Int32 { get }

public var SN_id_aca_authenticationInfo: String { get }
public var NID_id_aca_authenticationInfo: Int32 { get }

public var SN_id_aca_accessIdentity: String { get }
public var NID_id_aca_accessIdentity: Int32 { get }

public var SN_id_aca_chargingIdentity: String { get }
public var NID_id_aca_chargingIdentity: Int32 { get }

public var SN_id_aca_group: String { get }
public var NID_id_aca_group: Int32 { get }

public var SN_id_aca_role: String { get }
public var NID_id_aca_role: Int32 { get }

public var SN_id_aca_encAttrs: String { get }
public var NID_id_aca_encAttrs: Int32 { get }

public var SN_id_qcs_pkixQCSyntax_v1: String { get }
public var NID_id_qcs_pkixQCSyntax_v1: Int32 { get }

public var SN_id_cct_crs: String { get }
public var NID_id_cct_crs: Int32 { get }

public var SN_id_cct_PKIData: String { get }
public var NID_id_cct_PKIData: Int32 { get }

public var SN_id_cct_PKIResponse: String { get }
public var NID_id_cct_PKIResponse: Int32 { get }

public var SN_id_ppl_anyLanguage: String { get }
public var LN_id_ppl_anyLanguage: String { get }
public var NID_id_ppl_anyLanguage: Int32 { get }

public var SN_id_ppl_inheritAll: String { get }
public var LN_id_ppl_inheritAll: String { get }
public var NID_id_ppl_inheritAll: Int32 { get }

public var SN_Independent: String { get }
public var LN_Independent: String { get }
public var NID_Independent: Int32 { get }

public var SN_ad_OCSP: String { get }
public var LN_ad_OCSP: String { get }
public var NID_ad_OCSP: Int32 { get }

public var SN_ad_ca_issuers: String { get }
public var LN_ad_ca_issuers: String { get }
public var NID_ad_ca_issuers: Int32 { get }

public var SN_ad_timeStamping: String { get }
public var LN_ad_timeStamping: String { get }
public var NID_ad_timeStamping: Int32 { get }

public var SN_ad_dvcs: String { get }
public var LN_ad_dvcs: String { get }
public var NID_ad_dvcs: Int32 { get }

public var SN_caRepository: String { get }
public var LN_caRepository: String { get }
public var NID_caRepository: Int32 { get }

public var SN_id_pkix_OCSP_basic: String { get }
public var LN_id_pkix_OCSP_basic: String { get }
public var NID_id_pkix_OCSP_basic: Int32 { get }

public var SN_id_pkix_OCSP_Nonce: String { get }
public var LN_id_pkix_OCSP_Nonce: String { get }
public var NID_id_pkix_OCSP_Nonce: Int32 { get }

public var SN_id_pkix_OCSP_CrlID: String { get }
public var LN_id_pkix_OCSP_CrlID: String { get }
public var NID_id_pkix_OCSP_CrlID: Int32 { get }

public var SN_id_pkix_OCSP_acceptableResponses: String { get }
public var LN_id_pkix_OCSP_acceptableResponses: String { get }
public var NID_id_pkix_OCSP_acceptableResponses: Int32 { get }

public var SN_id_pkix_OCSP_noCheck: String { get }
public var LN_id_pkix_OCSP_noCheck: String { get }
public var NID_id_pkix_OCSP_noCheck: Int32 { get }

public var SN_id_pkix_OCSP_archiveCutoff: String { get }
public var LN_id_pkix_OCSP_archiveCutoff: String { get }
public var NID_id_pkix_OCSP_archiveCutoff: Int32 { get }

public var SN_id_pkix_OCSP_serviceLocator: String { get }
public var LN_id_pkix_OCSP_serviceLocator: String { get }
public var NID_id_pkix_OCSP_serviceLocator: Int32 { get }

public var SN_id_pkix_OCSP_extendedStatus: String { get }
public var LN_id_pkix_OCSP_extendedStatus: String { get }
public var NID_id_pkix_OCSP_extendedStatus: Int32 { get }

public var SN_id_pkix_OCSP_valid: String { get }
public var NID_id_pkix_OCSP_valid: Int32 { get }

public var SN_id_pkix_OCSP_path: String { get }
public var NID_id_pkix_OCSP_path: Int32 { get }

public var SN_id_pkix_OCSP_trustRoot: String { get }
public var LN_id_pkix_OCSP_trustRoot: String { get }
public var NID_id_pkix_OCSP_trustRoot: Int32 { get }

public var SN_algorithm: String { get }
public var LN_algorithm: String { get }
public var NID_algorithm: Int32 { get }

public var SN_md5WithRSA: String { get }
public var LN_md5WithRSA: String { get }
public var NID_md5WithRSA: Int32 { get }

public var SN_des_ecb: String { get }
public var LN_des_ecb: String { get }
public var NID_des_ecb: Int32 { get }

public var SN_des_cbc: String { get }
public var LN_des_cbc: String { get }
public var NID_des_cbc: Int32 { get }

public var SN_des_ofb64: String { get }
public var LN_des_ofb64: String { get }
public var NID_des_ofb64: Int32 { get }

public var SN_des_cfb64: String { get }
public var LN_des_cfb64: String { get }
public var NID_des_cfb64: Int32 { get }

public var SN_rsaSignature: String { get }
public var NID_rsaSignature: Int32 { get }

public var SN_dsa_2: String { get }
public var LN_dsa_2: String { get }
public var NID_dsa_2: Int32 { get }

public var SN_dsaWithSHA: String { get }
public var LN_dsaWithSHA: String { get }
public var NID_dsaWithSHA: Int32 { get }

public var SN_shaWithRSAEncryption: String { get }
public var LN_shaWithRSAEncryption: String { get }
public var NID_shaWithRSAEncryption: Int32 { get }

public var SN_des_ede_ecb: String { get }
public var LN_des_ede_ecb: String { get }
public var NID_des_ede_ecb: Int32 { get }

public var SN_des_ede3_ecb: String { get }
public var LN_des_ede3_ecb: String { get }
public var NID_des_ede3_ecb: Int32 { get }

public var SN_des_ede_cbc: String { get }
public var LN_des_ede_cbc: String { get }
public var NID_des_ede_cbc: Int32 { get }

public var SN_des_ede_cfb64: String { get }
public var LN_des_ede_cfb64: String { get }
public var NID_des_ede_cfb64: Int32 { get }

public var SN_des_ede3_cfb64: String { get }
public var LN_des_ede3_cfb64: String { get }
public var NID_des_ede3_cfb64: Int32 { get }

public var SN_des_ede_ofb64: String { get }
public var LN_des_ede_ofb64: String { get }
public var NID_des_ede_ofb64: Int32 { get }

public var SN_des_ede3_ofb64: String { get }
public var LN_des_ede3_ofb64: String { get }
public var NID_des_ede3_ofb64: Int32 { get }

public var SN_desx_cbc: String { get }
public var LN_desx_cbc: String { get }
public var NID_desx_cbc: Int32 { get }

public var SN_sha: String { get }
public var LN_sha: String { get }
public var NID_sha: Int32 { get }

public var SN_sha1: String { get }
public var LN_sha1: String { get }
public var NID_sha1: Int32 { get }

public var SN_dsaWithSHA1_2: String { get }
public var LN_dsaWithSHA1_2: String { get }
public var NID_dsaWithSHA1_2: Int32 { get }

public var SN_sha1WithRSA: String { get }
public var LN_sha1WithRSA: String { get }
public var NID_sha1WithRSA: Int32 { get }

public var SN_ripemd160: String { get }
public var LN_ripemd160: String { get }
public var NID_ripemd160: Int32 { get }

public var SN_ripemd160WithRSA: String { get }
public var LN_ripemd160WithRSA: String { get }
public var NID_ripemd160WithRSA: Int32 { get }

public var SN_sxnet: String { get }
public var LN_sxnet: String { get }
public var NID_sxnet: Int32 { get }

public var SN_X500: String { get }
public var LN_X500: String { get }
public var NID_X500: Int32 { get }

public var SN_X509: String { get }
public var NID_X509: Int32 { get }

public var SN_commonName: String { get }
public var LN_commonName: String { get }
public var NID_commonName: Int32 { get }

public var SN_surname: String { get }
public var LN_surname: String { get }
public var NID_surname: Int32 { get }

public var LN_serialNumber: String { get }
public var NID_serialNumber: Int32 { get }

public var SN_countryName: String { get }
public var LN_countryName: String { get }
public var NID_countryName: Int32 { get }

public var SN_localityName: String { get }
public var LN_localityName: String { get }
public var NID_localityName: Int32 { get }

public var SN_stateOrProvinceName: String { get }
public var LN_stateOrProvinceName: String { get }
public var NID_stateOrProvinceName: Int32 { get }

public var SN_streetAddress: String { get }
public var LN_streetAddress: String { get }
public var NID_streetAddress: Int32 { get }

public var SN_organizationName: String { get }
public var LN_organizationName: String { get }
public var NID_organizationName: Int32 { get }

public var SN_organizationalUnitName: String { get }
public var LN_organizationalUnitName: String { get }
public var NID_organizationalUnitName: Int32 { get }

public var SN_title: String { get }
public var LN_title: String { get }
public var NID_title: Int32 { get }

public var LN_description: String { get }
public var NID_description: Int32 { get }

public var LN_searchGuide: String { get }
public var NID_searchGuide: Int32 { get }

public var LN_businessCategory: String { get }
public var NID_businessCategory: Int32 { get }

public var LN_postalAddress: String { get }
public var NID_postalAddress: Int32 { get }

public var LN_postalCode: String { get }
public var NID_postalCode: Int32 { get }

public var LN_postOfficeBox: String { get }
public var NID_postOfficeBox: Int32 { get }

public var LN_physicalDeliveryOfficeName: String { get }
public var NID_physicalDeliveryOfficeName: Int32 { get }

public var LN_telephoneNumber: String { get }
public var NID_telephoneNumber: Int32 { get }

public var LN_telexNumber: String { get }
public var NID_telexNumber: Int32 { get }

public var LN_teletexTerminalIdentifier: String { get }
public var NID_teletexTerminalIdentifier: Int32 { get }

public var LN_facsimileTelephoneNumber: String { get }
public var NID_facsimileTelephoneNumber: Int32 { get }

public var LN_x121Address: String { get }
public var NID_x121Address: Int32 { get }

public var LN_internationaliSDNNumber: String { get }
public var NID_internationaliSDNNumber: Int32 { get }

public var LN_registeredAddress: String { get }
public var NID_registeredAddress: Int32 { get }

public var LN_destinationIndicator: String { get }
public var NID_destinationIndicator: Int32 { get }

public var LN_preferredDeliveryMethod: String { get }
public var NID_preferredDeliveryMethod: Int32 { get }

public var LN_presentationAddress: String { get }
public var NID_presentationAddress: Int32 { get }

public var LN_supportedApplicationContext: String { get }
public var NID_supportedApplicationContext: Int32 { get }

public var SN_member: String { get }
public var NID_member: Int32 { get }

public var SN_owner: String { get }
public var NID_owner: Int32 { get }

public var LN_roleOccupant: String { get }
public var NID_roleOccupant: Int32 { get }

public var SN_seeAlso: String { get }
public var NID_seeAlso: Int32 { get }

public var LN_userPassword: String { get }
public var NID_userPassword: Int32 { get }

public var LN_userCertificate: String { get }
public var NID_userCertificate: Int32 { get }

public var LN_cACertificate: String { get }
public var NID_cACertificate: Int32 { get }

public var LN_authorityRevocationList: String { get }
public var NID_authorityRevocationList: Int32 { get }

public var LN_certificateRevocationList: String { get }
public var NID_certificateRevocationList: Int32 { get }

public var LN_crossCertificatePair: String { get }
public var NID_crossCertificatePair: Int32 { get }

public var SN_name: String { get }
public var LN_name: String { get }
public var NID_name: Int32 { get }

public var SN_givenName: String { get }
public var LN_givenName: String { get }
public var NID_givenName: Int32 { get }

public var SN_initials: String { get }
public var LN_initials: String { get }
public var NID_initials: Int32 { get }

public var LN_generationQualifier: String { get }
public var NID_generationQualifier: Int32 { get }

public var LN_x500UniqueIdentifier: String { get }
public var NID_x500UniqueIdentifier: Int32 { get }

public var SN_dnQualifier: String { get }
public var LN_dnQualifier: String { get }
public var NID_dnQualifier: Int32 { get }

public var LN_enhancedSearchGuide: String { get }
public var NID_enhancedSearchGuide: Int32 { get }

public var LN_protocolInformation: String { get }
public var NID_protocolInformation: Int32 { get }

public var LN_distinguishedName: String { get }
public var NID_distinguishedName: Int32 { get }

public var LN_uniqueMember: String { get }
public var NID_uniqueMember: Int32 { get }

public var LN_houseIdentifier: String { get }
public var NID_houseIdentifier: Int32 { get }

public var LN_supportedAlgorithms: String { get }
public var NID_supportedAlgorithms: Int32 { get }

public var LN_deltaRevocationList: String { get }
public var NID_deltaRevocationList: Int32 { get }

public var SN_dmdName: String { get }
public var NID_dmdName: Int32 { get }

public var LN_pseudonym: String { get }
public var NID_pseudonym: Int32 { get }

public var SN_role: String { get }
public var LN_role: String { get }
public var NID_role: Int32 { get }

public var SN_X500algorithms: String { get }
public var LN_X500algorithms: String { get }
public var NID_X500algorithms: Int32 { get }

public var SN_rsa: String { get }
public var LN_rsa: String { get }
public var NID_rsa: Int32 { get }

public var SN_mdc2WithRSA: String { get }
public var LN_mdc2WithRSA: String { get }
public var NID_mdc2WithRSA: Int32 { get }

public var SN_mdc2: String { get }
public var LN_mdc2: String { get }
public var NID_mdc2: Int32 { get }

public var SN_id_ce: String { get }
public var NID_id_ce: Int32 { get }

public var SN_subject_directory_attributes: String { get }
public var LN_subject_directory_attributes: String { get }
public var NID_subject_directory_attributes: Int32 { get }

public var SN_subject_key_identifier: String { get }
public var LN_subject_key_identifier: String { get }
public var NID_subject_key_identifier: Int32 { get }

public var SN_key_usage: String { get }
public var LN_key_usage: String { get }
public var NID_key_usage: Int32 { get }

public var SN_private_key_usage_period: String { get }
public var LN_private_key_usage_period: String { get }
public var NID_private_key_usage_period: Int32 { get }

public var SN_subject_alt_name: String { get }
public var LN_subject_alt_name: String { get }
public var NID_subject_alt_name: Int32 { get }

public var SN_issuer_alt_name: String { get }
public var LN_issuer_alt_name: String { get }
public var NID_issuer_alt_name: Int32 { get }

public var SN_basic_constraints: String { get }
public var LN_basic_constraints: String { get }
public var NID_basic_constraints: Int32 { get }

public var SN_crl_number: String { get }
public var LN_crl_number: String { get }
public var NID_crl_number: Int32 { get }

public var SN_crl_reason: String { get }
public var LN_crl_reason: String { get }
public var NID_crl_reason: Int32 { get }

public var SN_invalidity_date: String { get }
public var LN_invalidity_date: String { get }
public var NID_invalidity_date: Int32 { get }

public var SN_delta_crl: String { get }
public var LN_delta_crl: String { get }
public var NID_delta_crl: Int32 { get }

public var SN_issuing_distribution_point: String { get }
public var LN_issuing_distribution_point: String { get }
public var NID_issuing_distribution_point: Int32 { get }

public var SN_certificate_issuer: String { get }
public var LN_certificate_issuer: String { get }
public var NID_certificate_issuer: Int32 { get }

public var SN_name_constraints: String { get }
public var LN_name_constraints: String { get }
public var NID_name_constraints: Int32 { get }

public var SN_crl_distribution_points: String { get }
public var LN_crl_distribution_points: String { get }
public var NID_crl_distribution_points: Int32 { get }

public var SN_certificate_policies: String { get }
public var LN_certificate_policies: String { get }
public var NID_certificate_policies: Int32 { get }

public var SN_any_policy: String { get }
public var LN_any_policy: String { get }
public var NID_any_policy: Int32 { get }

public var SN_policy_mappings: String { get }
public var LN_policy_mappings: String { get }
public var NID_policy_mappings: Int32 { get }

public var SN_authority_key_identifier: String { get }
public var LN_authority_key_identifier: String { get }
public var NID_authority_key_identifier: Int32 { get }

public var SN_policy_constraints: String { get }
public var LN_policy_constraints: String { get }
public var NID_policy_constraints: Int32 { get }

public var SN_ext_key_usage: String { get }
public var LN_ext_key_usage: String { get }
public var NID_ext_key_usage: Int32 { get }

public var SN_freshest_crl: String { get }
public var LN_freshest_crl: String { get }
public var NID_freshest_crl: Int32 { get }

public var SN_inhibit_any_policy: String { get }
public var LN_inhibit_any_policy: String { get }
public var NID_inhibit_any_policy: Int32 { get }

public var SN_target_information: String { get }
public var LN_target_information: String { get }
public var NID_target_information: Int32 { get }

public var SN_no_rev_avail: String { get }
public var LN_no_rev_avail: String { get }
public var NID_no_rev_avail: Int32 { get }

public var SN_anyExtendedKeyUsage: String { get }
public var LN_anyExtendedKeyUsage: String { get }
public var NID_anyExtendedKeyUsage: Int32 { get }

public var SN_netscape: String { get }
public var LN_netscape: String { get }
public var NID_netscape: Int32 { get }

public var SN_netscape_cert_extension: String { get }
public var LN_netscape_cert_extension: String { get }
public var NID_netscape_cert_extension: Int32 { get }

public var SN_netscape_data_type: String { get }
public var LN_netscape_data_type: String { get }
public var NID_netscape_data_type: Int32 { get }

public var SN_netscape_cert_type: String { get }
public var LN_netscape_cert_type: String { get }
public var NID_netscape_cert_type: Int32 { get }

public var SN_netscape_base_url: String { get }
public var LN_netscape_base_url: String { get }
public var NID_netscape_base_url: Int32 { get }

public var SN_netscape_revocation_url: String { get }
public var LN_netscape_revocation_url: String { get }
public var NID_netscape_revocation_url: Int32 { get }

public var SN_netscape_ca_revocation_url: String { get }
public var LN_netscape_ca_revocation_url: String { get }
public var NID_netscape_ca_revocation_url: Int32 { get }

public var SN_netscape_renewal_url: String { get }
public var LN_netscape_renewal_url: String { get }
public var NID_netscape_renewal_url: Int32 { get }

public var SN_netscape_ca_policy_url: String { get }
public var LN_netscape_ca_policy_url: String { get }
public var NID_netscape_ca_policy_url: Int32 { get }

public var SN_netscape_ssl_server_name: String { get }
public var LN_netscape_ssl_server_name: String { get }
public var NID_netscape_ssl_server_name: Int32 { get }

public var SN_netscape_comment: String { get }
public var LN_netscape_comment: String { get }
public var NID_netscape_comment: Int32 { get }

public var SN_netscape_cert_sequence: String { get }
public var LN_netscape_cert_sequence: String { get }
public var NID_netscape_cert_sequence: Int32 { get }

public var SN_ns_sgc: String { get }
public var LN_ns_sgc: String { get }
public var NID_ns_sgc: Int32 { get }

public var SN_org: String { get }
public var LN_org: String { get }
public var NID_org: Int32 { get }

public var SN_dod: String { get }
public var LN_dod: String { get }
public var NID_dod: Int32 { get }

public var SN_iana: String { get }
public var LN_iana: String { get }
public var NID_iana: Int32 { get }

public var SN_Directory: String { get }
public var LN_Directory: String { get }
public var NID_Directory: Int32 { get }

public var SN_Management: String { get }
public var LN_Management: String { get }
public var NID_Management: Int32 { get }

public var SN_Experimental: String { get }
public var LN_Experimental: String { get }
public var NID_Experimental: Int32 { get }

public var SN_Private: String { get }
public var LN_Private: String { get }
public var NID_Private: Int32 { get }

public var SN_Security: String { get }
public var LN_Security: String { get }
public var NID_Security: Int32 { get }

public var SN_SNMPv2: String { get }
public var LN_SNMPv2: String { get }
public var NID_SNMPv2: Int32 { get }

public var LN_Mail: String { get }
public var NID_Mail: Int32 { get }

public var SN_Enterprises: String { get }
public var LN_Enterprises: String { get }
public var NID_Enterprises: Int32 { get }

public var SN_dcObject: String { get }
public var LN_dcObject: String { get }
public var NID_dcObject: Int32 { get }

public var SN_mime_mhs: String { get }
public var LN_mime_mhs: String { get }
public var NID_mime_mhs: Int32 { get }

public var SN_mime_mhs_headings: String { get }
public var LN_mime_mhs_headings: String { get }
public var NID_mime_mhs_headings: Int32 { get }

public var SN_mime_mhs_bodies: String { get }
public var LN_mime_mhs_bodies: String { get }
public var NID_mime_mhs_bodies: Int32 { get }

public var SN_id_hex_partial_message: String { get }
public var LN_id_hex_partial_message: String { get }
public var NID_id_hex_partial_message: Int32 { get }

public var SN_id_hex_multipart_message: String { get }
public var LN_id_hex_multipart_message: String { get }
public var NID_id_hex_multipart_message: Int32 { get }

public var SN_rle_compression: String { get }
public var LN_rle_compression: String { get }
public var NID_rle_compression: Int32 { get }

public var SN_zlib_compression: String { get }
public var LN_zlib_compression: String { get }
public var NID_zlib_compression: Int32 { get }

public var SN_aes_128_ecb: String { get }
public var LN_aes_128_ecb: String { get }
public var NID_aes_128_ecb: Int32 { get }

public var SN_aes_128_cbc: String { get }
public var LN_aes_128_cbc: String { get }
public var NID_aes_128_cbc: Int32 { get }

public var SN_aes_128_ofb128: String { get }
public var LN_aes_128_ofb128: String { get }
public var NID_aes_128_ofb128: Int32 { get }

public var SN_aes_128_cfb128: String { get }
public var LN_aes_128_cfb128: String { get }
public var NID_aes_128_cfb128: Int32 { get }

public var SN_id_aes128_wrap: String { get }
public var NID_id_aes128_wrap: Int32 { get }

public var SN_aes_128_gcm: String { get }
public var LN_aes_128_gcm: String { get }
public var NID_aes_128_gcm: Int32 { get }

public var SN_aes_128_ccm: String { get }
public var LN_aes_128_ccm: String { get }
public var NID_aes_128_ccm: Int32 { get }

public var SN_id_aes128_wrap_pad: String { get }
public var NID_id_aes128_wrap_pad: Int32 { get }

public var SN_aes_192_ecb: String { get }
public var LN_aes_192_ecb: String { get }
public var NID_aes_192_ecb: Int32 { get }

public var SN_aes_192_cbc: String { get }
public var LN_aes_192_cbc: String { get }
public var NID_aes_192_cbc: Int32 { get }

public var SN_aes_192_ofb128: String { get }
public var LN_aes_192_ofb128: String { get }
public var NID_aes_192_ofb128: Int32 { get }

public var SN_aes_192_cfb128: String { get }
public var LN_aes_192_cfb128: String { get }
public var NID_aes_192_cfb128: Int32 { get }

public var SN_id_aes192_wrap: String { get }
public var NID_id_aes192_wrap: Int32 { get }

public var SN_aes_192_gcm: String { get }
public var LN_aes_192_gcm: String { get }
public var NID_aes_192_gcm: Int32 { get }

public var SN_aes_192_ccm: String { get }
public var LN_aes_192_ccm: String { get }
public var NID_aes_192_ccm: Int32 { get }

public var SN_id_aes192_wrap_pad: String { get }
public var NID_id_aes192_wrap_pad: Int32 { get }

public var SN_aes_256_ecb: String { get }
public var LN_aes_256_ecb: String { get }
public var NID_aes_256_ecb: Int32 { get }

public var SN_aes_256_cbc: String { get }
public var LN_aes_256_cbc: String { get }
public var NID_aes_256_cbc: Int32 { get }

public var SN_aes_256_ofb128: String { get }
public var LN_aes_256_ofb128: String { get }
public var NID_aes_256_ofb128: Int32 { get }

public var SN_aes_256_cfb128: String { get }
public var LN_aes_256_cfb128: String { get }
public var NID_aes_256_cfb128: Int32 { get }

public var SN_id_aes256_wrap: String { get }
public var NID_id_aes256_wrap: Int32 { get }

public var SN_aes_256_gcm: String { get }
public var LN_aes_256_gcm: String { get }
public var NID_aes_256_gcm: Int32 { get }

public var SN_aes_256_ccm: String { get }
public var LN_aes_256_ccm: String { get }
public var NID_aes_256_ccm: Int32 { get }

public var SN_id_aes256_wrap_pad: String { get }
public var NID_id_aes256_wrap_pad: Int32 { get }

public var SN_aes_128_cfb1: String { get }
public var LN_aes_128_cfb1: String { get }
public var NID_aes_128_cfb1: Int32 { get }

public var SN_aes_192_cfb1: String { get }
public var LN_aes_192_cfb1: String { get }
public var NID_aes_192_cfb1: Int32 { get }

public var SN_aes_256_cfb1: String { get }
public var LN_aes_256_cfb1: String { get }
public var NID_aes_256_cfb1: Int32 { get }

public var SN_aes_128_cfb8: String { get }
public var LN_aes_128_cfb8: String { get }
public var NID_aes_128_cfb8: Int32 { get }

public var SN_aes_192_cfb8: String { get }
public var LN_aes_192_cfb8: String { get }
public var NID_aes_192_cfb8: Int32 { get }

public var SN_aes_256_cfb8: String { get }
public var LN_aes_256_cfb8: String { get }
public var NID_aes_256_cfb8: Int32 { get }

public var SN_aes_128_ctr: String { get }
public var LN_aes_128_ctr: String { get }
public var NID_aes_128_ctr: Int32 { get }

public var SN_aes_192_ctr: String { get }
public var LN_aes_192_ctr: String { get }
public var NID_aes_192_ctr: Int32 { get }

public var SN_aes_256_ctr: String { get }
public var LN_aes_256_ctr: String { get }
public var NID_aes_256_ctr: Int32 { get }

public var SN_aes_128_xts: String { get }
public var LN_aes_128_xts: String { get }
public var NID_aes_128_xts: Int32 { get }

public var SN_aes_256_xts: String { get }
public var LN_aes_256_xts: String { get }
public var NID_aes_256_xts: Int32 { get }

public var SN_des_cfb1: String { get }
public var LN_des_cfb1: String { get }
public var NID_des_cfb1: Int32 { get }

public var SN_des_cfb8: String { get }
public var LN_des_cfb8: String { get }
public var NID_des_cfb8: Int32 { get }

public var SN_des_ede3_cfb1: String { get }
public var LN_des_ede3_cfb1: String { get }
public var NID_des_ede3_cfb1: Int32 { get }

public var SN_des_ede3_cfb8: String { get }
public var LN_des_ede3_cfb8: String { get }
public var NID_des_ede3_cfb8: Int32 { get }

public var SN_sha256: String { get }
public var LN_sha256: String { get }
public var NID_sha256: Int32 { get }

public var SN_sha384: String { get }
public var LN_sha384: String { get }
public var NID_sha384: Int32 { get }

public var SN_sha512: String { get }
public var LN_sha512: String { get }
public var NID_sha512: Int32 { get }

public var SN_sha224: String { get }
public var LN_sha224: String { get }
public var NID_sha224: Int32 { get }

public var SN_dsa_with_SHA224: String { get }
public var NID_dsa_with_SHA224: Int32 { get }

public var SN_dsa_with_SHA256: String { get }
public var NID_dsa_with_SHA256: Int32 { get }

public var SN_hold_instruction_code: String { get }
public var LN_hold_instruction_code: String { get }
public var NID_hold_instruction_code: Int32 { get }

public var SN_hold_instruction_none: String { get }
public var LN_hold_instruction_none: String { get }
public var NID_hold_instruction_none: Int32 { get }

public var SN_hold_instruction_call_issuer: String { get }
public var LN_hold_instruction_call_issuer: String { get }
public var NID_hold_instruction_call_issuer: Int32 { get }

public var SN_hold_instruction_reject: String { get }
public var LN_hold_instruction_reject: String { get }
public var NID_hold_instruction_reject: Int32 { get }

public var SN_data: String { get }
public var NID_data: Int32 { get }

public var SN_pss: String { get }
public var NID_pss: Int32 { get }

public var SN_ucl: String { get }
public var NID_ucl: Int32 { get }

public var SN_pilot: String { get }
public var NID_pilot: Int32 { get }

public var LN_pilotAttributeType: String { get }
public var NID_pilotAttributeType: Int32 { get }

public var LN_pilotAttributeSyntax: String { get }
public var NID_pilotAttributeSyntax: Int32 { get }

public var LN_pilotObjectClass: String { get }
public var NID_pilotObjectClass: Int32 { get }

public var LN_pilotGroups: String { get }
public var NID_pilotGroups: Int32 { get }

public var LN_iA5StringSyntax: String { get }
public var NID_iA5StringSyntax: Int32 { get }

public var LN_caseIgnoreIA5StringSyntax: String { get }
public var NID_caseIgnoreIA5StringSyntax: Int32 { get }

public var LN_pilotObject: String { get }
public var NID_pilotObject: Int32 { get }

public var LN_pilotPerson: String { get }
public var NID_pilotPerson: Int32 { get }

public var SN_account: String { get }
public var NID_account: Int32 { get }

public var SN_document: String { get }
public var NID_document: Int32 { get }

public var SN_room: String { get }
public var NID_room: Int32 { get }

public var LN_documentSeries: String { get }
public var NID_documentSeries: Int32 { get }

public var SN_Domain: String { get }
public var LN_Domain: String { get }
public var NID_Domain: Int32 { get }

public var LN_rFC822localPart: String { get }
public var NID_rFC822localPart: Int32 { get }

public var LN_dNSDomain: String { get }
public var NID_dNSDomain: Int32 { get }

public var LN_domainRelatedObject: String { get }
public var NID_domainRelatedObject: Int32 { get }

public var LN_friendlyCountry: String { get }
public var NID_friendlyCountry: Int32 { get }

public var LN_simpleSecurityObject: String { get }
public var NID_simpleSecurityObject: Int32 { get }

public var LN_pilotOrganization: String { get }
public var NID_pilotOrganization: Int32 { get }

public var LN_pilotDSA: String { get }
public var NID_pilotDSA: Int32 { get }

public var LN_qualityLabelledData: String { get }
public var NID_qualityLabelledData: Int32 { get }

public var SN_userId: String { get }
public var LN_userId: String { get }
public var NID_userId: Int32 { get }

public var LN_textEncodedORAddress: String { get }
public var NID_textEncodedORAddress: Int32 { get }

public var SN_rfc822Mailbox: String { get }
public var LN_rfc822Mailbox: String { get }
public var NID_rfc822Mailbox: Int32 { get }

public var SN_info: String { get }
public var NID_info: Int32 { get }

public var LN_favouriteDrink: String { get }
public var NID_favouriteDrink: Int32 { get }

public var LN_roomNumber: String { get }
public var NID_roomNumber: Int32 { get }

public var SN_photo: String { get }
public var NID_photo: Int32 { get }

public var LN_userClass: String { get }
public var NID_userClass: Int32 { get }

public var SN_host: String { get }
public var NID_host: Int32 { get }

public var SN_manager: String { get }
public var NID_manager: Int32 { get }

public var LN_documentIdentifier: String { get }
public var NID_documentIdentifier: Int32 { get }

public var LN_documentTitle: String { get }
public var NID_documentTitle: Int32 { get }

public var LN_documentVersion: String { get }
public var NID_documentVersion: Int32 { get }

public var LN_documentAuthor: String { get }
public var NID_documentAuthor: Int32 { get }

public var LN_documentLocation: String { get }
public var NID_documentLocation: Int32 { get }

public var LN_homeTelephoneNumber: String { get }
public var NID_homeTelephoneNumber: Int32 { get }

public var SN_secretary: String { get }
public var NID_secretary: Int32 { get }

public var LN_otherMailbox: String { get }
public var NID_otherMailbox: Int32 { get }

public var LN_lastModifiedTime: String { get }
public var NID_lastModifiedTime: Int32 { get }

public var LN_lastModifiedBy: String { get }
public var NID_lastModifiedBy: Int32 { get }

public var SN_domainComponent: String { get }
public var LN_domainComponent: String { get }
public var NID_domainComponent: Int32 { get }

public var LN_aRecord: String { get }
public var NID_aRecord: Int32 { get }

public var LN_pilotAttributeType27: String { get }
public var NID_pilotAttributeType27: Int32 { get }

public var LN_mXRecord: String { get }
public var NID_mXRecord: Int32 { get }

public var LN_nSRecord: String { get }
public var NID_nSRecord: Int32 { get }

public var LN_sOARecord: String { get }
public var NID_sOARecord: Int32 { get }

public var LN_cNAMERecord: String { get }
public var NID_cNAMERecord: Int32 { get }

public var LN_associatedDomain: String { get }
public var NID_associatedDomain: Int32 { get }

public var LN_associatedName: String { get }
public var NID_associatedName: Int32 { get }

public var LN_homePostalAddress: String { get }
public var NID_homePostalAddress: Int32 { get }

public var LN_personalTitle: String { get }
public var NID_personalTitle: Int32 { get }

public var LN_mobileTelephoneNumber: String { get }
public var NID_mobileTelephoneNumber: Int32 { get }

public var LN_pagerTelephoneNumber: String { get }
public var NID_pagerTelephoneNumber: Int32 { get }

public var LN_friendlyCountryName: String { get }
public var NID_friendlyCountryName: Int32 { get }

public var LN_organizationalStatus: String { get }
public var NID_organizationalStatus: Int32 { get }

public var LN_janetMailbox: String { get }
public var NID_janetMailbox: Int32 { get }

public var LN_mailPreferenceOption: String { get }
public var NID_mailPreferenceOption: Int32 { get }

public var LN_buildingName: String { get }
public var NID_buildingName: Int32 { get }

public var LN_dSAQuality: String { get }
public var NID_dSAQuality: Int32 { get }

public var LN_singleLevelQuality: String { get }
public var NID_singleLevelQuality: Int32 { get }

public var LN_subtreeMinimumQuality: String { get }
public var NID_subtreeMinimumQuality: Int32 { get }

public var LN_subtreeMaximumQuality: String { get }
public var NID_subtreeMaximumQuality: Int32 { get }

public var LN_personalSignature: String { get }
public var NID_personalSignature: Int32 { get }

public var LN_dITRedirect: String { get }
public var NID_dITRedirect: Int32 { get }

public var SN_audio: String { get }
public var NID_audio: Int32 { get }

public var LN_documentPublisher: String { get }
public var NID_documentPublisher: Int32 { get }

public var SN_id_set: String { get }
public var LN_id_set: String { get }
public var NID_id_set: Int32 { get }

public var SN_set_ctype: String { get }
public var LN_set_ctype: String { get }
public var NID_set_ctype: Int32 { get }

public var SN_set_msgExt: String { get }
public var LN_set_msgExt: String { get }
public var NID_set_msgExt: Int32 { get }

public var SN_set_attr: String { get }
public var NID_set_attr: Int32 { get }

public var SN_set_policy: String { get }
public var NID_set_policy: Int32 { get }

public var SN_set_certExt: String { get }
public var LN_set_certExt: String { get }
public var NID_set_certExt: Int32 { get }

public var SN_set_brand: String { get }
public var NID_set_brand: Int32 { get }

public var SN_setct_PANData: String { get }
public var NID_setct_PANData: Int32 { get }

public var SN_setct_PANToken: String { get }
public var NID_setct_PANToken: Int32 { get }

public var SN_setct_PANOnly: String { get }
public var NID_setct_PANOnly: Int32 { get }

public var SN_setct_OIData: String { get }
public var NID_setct_OIData: Int32 { get }

public var SN_setct_PI: String { get }
public var NID_setct_PI: Int32 { get }

public var SN_setct_PIData: String { get }
public var NID_setct_PIData: Int32 { get }

public var SN_setct_PIDataUnsigned: String { get }
public var NID_setct_PIDataUnsigned: Int32 { get }

public var SN_setct_HODInput: String { get }
public var NID_setct_HODInput: Int32 { get }

public var SN_setct_AuthResBaggage: String { get }
public var NID_setct_AuthResBaggage: Int32 { get }

public var SN_setct_AuthRevReqBaggage: String { get }
public var NID_setct_AuthRevReqBaggage: Int32 { get }

public var SN_setct_AuthRevResBaggage: String { get }
public var NID_setct_AuthRevResBaggage: Int32 { get }

public var SN_setct_CapTokenSeq: String { get }
public var NID_setct_CapTokenSeq: Int32 { get }

public var SN_setct_PInitResData: String { get }
public var NID_setct_PInitResData: Int32 { get }

public var SN_setct_PI_TBS: String { get }
public var NID_setct_PI_TBS: Int32 { get }

public var SN_setct_PResData: String { get }
public var NID_setct_PResData: Int32 { get }

public var SN_setct_AuthReqTBS: String { get }
public var NID_setct_AuthReqTBS: Int32 { get }

public var SN_setct_AuthResTBS: String { get }
public var NID_setct_AuthResTBS: Int32 { get }

public var SN_setct_AuthResTBSX: String { get }
public var NID_setct_AuthResTBSX: Int32 { get }

public var SN_setct_AuthTokenTBS: String { get }
public var NID_setct_AuthTokenTBS: Int32 { get }

public var SN_setct_CapTokenData: String { get }
public var NID_setct_CapTokenData: Int32 { get }

public var SN_setct_CapTokenTBS: String { get }
public var NID_setct_CapTokenTBS: Int32 { get }

public var SN_setct_AcqCardCodeMsg: String { get }
public var NID_setct_AcqCardCodeMsg: Int32 { get }

public var SN_setct_AuthRevReqTBS: String { get }
public var NID_setct_AuthRevReqTBS: Int32 { get }

public var SN_setct_AuthRevResData: String { get }
public var NID_setct_AuthRevResData: Int32 { get }

public var SN_setct_AuthRevResTBS: String { get }
public var NID_setct_AuthRevResTBS: Int32 { get }

public var SN_setct_CapReqTBS: String { get }
public var NID_setct_CapReqTBS: Int32 { get }

public var SN_setct_CapReqTBSX: String { get }
public var NID_setct_CapReqTBSX: Int32 { get }

public var SN_setct_CapResData: String { get }
public var NID_setct_CapResData: Int32 { get }

public var SN_setct_CapRevReqTBS: String { get }
public var NID_setct_CapRevReqTBS: Int32 { get }

public var SN_setct_CapRevReqTBSX: String { get }
public var NID_setct_CapRevReqTBSX: Int32 { get }

public var SN_setct_CapRevResData: String { get }
public var NID_setct_CapRevResData: Int32 { get }

public var SN_setct_CredReqTBS: String { get }
public var NID_setct_CredReqTBS: Int32 { get }

public var SN_setct_CredReqTBSX: String { get }
public var NID_setct_CredReqTBSX: Int32 { get }

public var SN_setct_CredResData: String { get }
public var NID_setct_CredResData: Int32 { get }

public var SN_setct_CredRevReqTBS: String { get }
public var NID_setct_CredRevReqTBS: Int32 { get }

public var SN_setct_CredRevReqTBSX: String { get }
public var NID_setct_CredRevReqTBSX: Int32 { get }

public var SN_setct_CredRevResData: String { get }
public var NID_setct_CredRevResData: Int32 { get }

public var SN_setct_PCertReqData: String { get }
public var NID_setct_PCertReqData: Int32 { get }

public var SN_setct_PCertResTBS: String { get }
public var NID_setct_PCertResTBS: Int32 { get }

public var SN_setct_BatchAdminReqData: String { get }
public var NID_setct_BatchAdminReqData: Int32 { get }

public var SN_setct_BatchAdminResData: String { get }
public var NID_setct_BatchAdminResData: Int32 { get }

public var SN_setct_CardCInitResTBS: String { get }
public var NID_setct_CardCInitResTBS: Int32 { get }

public var SN_setct_MeAqCInitResTBS: String { get }
public var NID_setct_MeAqCInitResTBS: Int32 { get }

public var SN_setct_RegFormResTBS: String { get }
public var NID_setct_RegFormResTBS: Int32 { get }

public var SN_setct_CertReqData: String { get }
public var NID_setct_CertReqData: Int32 { get }

public var SN_setct_CertReqTBS: String { get }
public var NID_setct_CertReqTBS: Int32 { get }

public var SN_setct_CertResData: String { get }
public var NID_setct_CertResData: Int32 { get }

public var SN_setct_CertInqReqTBS: String { get }
public var NID_setct_CertInqReqTBS: Int32 { get }

public var SN_setct_ErrorTBS: String { get }
public var NID_setct_ErrorTBS: Int32 { get }

public var SN_setct_PIDualSignedTBE: String { get }
public var NID_setct_PIDualSignedTBE: Int32 { get }

public var SN_setct_PIUnsignedTBE: String { get }
public var NID_setct_PIUnsignedTBE: Int32 { get }

public var SN_setct_AuthReqTBE: String { get }
public var NID_setct_AuthReqTBE: Int32 { get }

public var SN_setct_AuthResTBE: String { get }
public var NID_setct_AuthResTBE: Int32 { get }

public var SN_setct_AuthResTBEX: String { get }
public var NID_setct_AuthResTBEX: Int32 { get }

public var SN_setct_AuthTokenTBE: String { get }
public var NID_setct_AuthTokenTBE: Int32 { get }

public var SN_setct_CapTokenTBE: String { get }
public var NID_setct_CapTokenTBE: Int32 { get }

public var SN_setct_CapTokenTBEX: String { get }
public var NID_setct_CapTokenTBEX: Int32 { get }

public var SN_setct_AcqCardCodeMsgTBE: String { get }
public var NID_setct_AcqCardCodeMsgTBE: Int32 { get }

public var SN_setct_AuthRevReqTBE: String { get }
public var NID_setct_AuthRevReqTBE: Int32 { get }

public var SN_setct_AuthRevResTBE: String { get }
public var NID_setct_AuthRevResTBE: Int32 { get }

public var SN_setct_AuthRevResTBEB: String { get }
public var NID_setct_AuthRevResTBEB: Int32 { get }

public var SN_setct_CapReqTBE: String { get }
public var NID_setct_CapReqTBE: Int32 { get }

public var SN_setct_CapReqTBEX: String { get }
public var NID_setct_CapReqTBEX: Int32 { get }

public var SN_setct_CapResTBE: String { get }
public var NID_setct_CapResTBE: Int32 { get }

public var SN_setct_CapRevReqTBE: String { get }
public var NID_setct_CapRevReqTBE: Int32 { get }

public var SN_setct_CapRevReqTBEX: String { get }
public var NID_setct_CapRevReqTBEX: Int32 { get }

public var SN_setct_CapRevResTBE: String { get }
public var NID_setct_CapRevResTBE: Int32 { get }

public var SN_setct_CredReqTBE: String { get }
public var NID_setct_CredReqTBE: Int32 { get }

public var SN_setct_CredReqTBEX: String { get }
public var NID_setct_CredReqTBEX: Int32 { get }

public var SN_setct_CredResTBE: String { get }
public var NID_setct_CredResTBE: Int32 { get }

public var SN_setct_CredRevReqTBE: String { get }
public var NID_setct_CredRevReqTBE: Int32 { get }

public var SN_setct_CredRevReqTBEX: String { get }
public var NID_setct_CredRevReqTBEX: Int32 { get }

public var SN_setct_CredRevResTBE: String { get }
public var NID_setct_CredRevResTBE: Int32 { get }

public var SN_setct_BatchAdminReqTBE: String { get }
public var NID_setct_BatchAdminReqTBE: Int32 { get }

public var SN_setct_BatchAdminResTBE: String { get }
public var NID_setct_BatchAdminResTBE: Int32 { get }

public var SN_setct_RegFormReqTBE: String { get }
public var NID_setct_RegFormReqTBE: Int32 { get }

public var SN_setct_CertReqTBE: String { get }
public var NID_setct_CertReqTBE: Int32 { get }

public var SN_setct_CertReqTBEX: String { get }
public var NID_setct_CertReqTBEX: Int32 { get }

public var SN_setct_CertResTBE: String { get }
public var NID_setct_CertResTBE: Int32 { get }

public var SN_setct_CRLNotificationTBS: String { get }
public var NID_setct_CRLNotificationTBS: Int32 { get }

public var SN_setct_CRLNotificationResTBS: String { get }
public var NID_setct_CRLNotificationResTBS: Int32 { get }

public var SN_setct_BCIDistributionTBS: String { get }
public var NID_setct_BCIDistributionTBS: Int32 { get }

public var SN_setext_genCrypt: String { get }
public var LN_setext_genCrypt: String { get }
public var NID_setext_genCrypt: Int32 { get }

public var SN_setext_miAuth: String { get }
public var LN_setext_miAuth: String { get }
public var NID_setext_miAuth: Int32 { get }

public var SN_setext_pinSecure: String { get }
public var NID_setext_pinSecure: Int32 { get }

public var SN_setext_pinAny: String { get }
public var NID_setext_pinAny: Int32 { get }

public var SN_setext_track2: String { get }
public var NID_setext_track2: Int32 { get }

public var SN_setext_cv: String { get }
public var LN_setext_cv: String { get }
public var NID_setext_cv: Int32 { get }

public var SN_set_policy_root: String { get }
public var NID_set_policy_root: Int32 { get }

public var SN_setCext_hashedRoot: String { get }
public var NID_setCext_hashedRoot: Int32 { get }

public var SN_setCext_certType: String { get }
public var NID_setCext_certType: Int32 { get }

public var SN_setCext_merchData: String { get }
public var NID_setCext_merchData: Int32 { get }

public var SN_setCext_cCertRequired: String { get }
public var NID_setCext_cCertRequired: Int32 { get }

public var SN_setCext_tunneling: String { get }
public var NID_setCext_tunneling: Int32 { get }

public var SN_setCext_setExt: String { get }
public var NID_setCext_setExt: Int32 { get }

public var SN_setCext_setQualf: String { get }
public var NID_setCext_setQualf: Int32 { get }

public var SN_setCext_PGWYcapabilities: String { get }
public var NID_setCext_PGWYcapabilities: Int32 { get }

public var SN_setCext_TokenIdentifier: String { get }
public var NID_setCext_TokenIdentifier: Int32 { get }

public var SN_setCext_Track2Data: String { get }
public var NID_setCext_Track2Data: Int32 { get }

public var SN_setCext_TokenType: String { get }
public var NID_setCext_TokenType: Int32 { get }

public var SN_setCext_IssuerCapabilities: String { get }
public var NID_setCext_IssuerCapabilities: Int32 { get }

public var SN_setAttr_Cert: String { get }
public var NID_setAttr_Cert: Int32 { get }

public var SN_setAttr_PGWYcap: String { get }
public var LN_setAttr_PGWYcap: String { get }
public var NID_setAttr_PGWYcap: Int32 { get }

public var SN_setAttr_TokenType: String { get }
public var NID_setAttr_TokenType: Int32 { get }

public var SN_setAttr_IssCap: String { get }
public var LN_setAttr_IssCap: String { get }
public var NID_setAttr_IssCap: Int32 { get }

public var SN_set_rootKeyThumb: String { get }
public var NID_set_rootKeyThumb: Int32 { get }

public var SN_set_addPolicy: String { get }
public var NID_set_addPolicy: Int32 { get }

public var SN_setAttr_Token_EMV: String { get }
public var NID_setAttr_Token_EMV: Int32 { get }

public var SN_setAttr_Token_B0Prime: String { get }
public var NID_setAttr_Token_B0Prime: Int32 { get }

public var SN_setAttr_IssCap_CVM: String { get }
public var NID_setAttr_IssCap_CVM: Int32 { get }

public var SN_setAttr_IssCap_T2: String { get }
public var NID_setAttr_IssCap_T2: Int32 { get }

public var SN_setAttr_IssCap_Sig: String { get }
public var NID_setAttr_IssCap_Sig: Int32 { get }

public var SN_setAttr_GenCryptgrm: String { get }
public var LN_setAttr_GenCryptgrm: String { get }
public var NID_setAttr_GenCryptgrm: Int32 { get }

public var SN_setAttr_T2Enc: String { get }
public var LN_setAttr_T2Enc: String { get }
public var NID_setAttr_T2Enc: Int32 { get }

public var SN_setAttr_T2cleartxt: String { get }
public var LN_setAttr_T2cleartxt: String { get }
public var NID_setAttr_T2cleartxt: Int32 { get }

public var SN_setAttr_TokICCsig: String { get }
public var LN_setAttr_TokICCsig: String { get }
public var NID_setAttr_TokICCsig: Int32 { get }

public var SN_setAttr_SecDevSig: String { get }
public var LN_setAttr_SecDevSig: String { get }
public var NID_setAttr_SecDevSig: Int32 { get }

public var SN_set_brand_IATA_ATA: String { get }
public var NID_set_brand_IATA_ATA: Int32 { get }

public var SN_set_brand_Diners: String { get }
public var NID_set_brand_Diners: Int32 { get }

public var SN_set_brand_AmericanExpress: String { get }
public var NID_set_brand_AmericanExpress: Int32 { get }

public var SN_set_brand_JCB: String { get }
public var NID_set_brand_JCB: Int32 { get }

public var SN_set_brand_Visa: String { get }
public var NID_set_brand_Visa: Int32 { get }

public var SN_set_brand_MasterCard: String { get }
public var NID_set_brand_MasterCard: Int32 { get }

public var SN_set_brand_Novus: String { get }
public var NID_set_brand_Novus: Int32 { get }

public var SN_des_cdmf: String { get }
public var LN_des_cdmf: String { get }
public var NID_des_cdmf: Int32 { get }

public var SN_rsaOAEPEncryptionSET: String { get }
public var NID_rsaOAEPEncryptionSET: Int32 { get }

public var SN_ipsec3: String { get }
public var LN_ipsec3: String { get }
public var NID_ipsec3: Int32 { get }

public var SN_ipsec4: String { get }
public var LN_ipsec4: String { get }
public var NID_ipsec4: Int32 { get }

public var SN_whirlpool: String { get }
public var NID_whirlpool: Int32 { get }

public var SN_cryptopro: String { get }
public var NID_cryptopro: Int32 { get }

public var SN_cryptocom: String { get }
public var NID_cryptocom: Int32 { get }

public var SN_id_GostR3411_94_with_GostR3410_2001: String { get }
public var LN_id_GostR3411_94_with_GostR3410_2001: String { get }
public var NID_id_GostR3411_94_with_GostR3410_2001: Int32 { get }

public var SN_id_GostR3411_94_with_GostR3410_94: String { get }
public var LN_id_GostR3411_94_with_GostR3410_94: String { get }
public var NID_id_GostR3411_94_with_GostR3410_94: Int32 { get }

public var SN_id_GostR3411_94: String { get }
public var LN_id_GostR3411_94: String { get }
public var NID_id_GostR3411_94: Int32 { get }

public var SN_id_HMACGostR3411_94: String { get }
public var LN_id_HMACGostR3411_94: String { get }
public var NID_id_HMACGostR3411_94: Int32 { get }

public var SN_id_GostR3410_2001: String { get }
public var LN_id_GostR3410_2001: String { get }
public var NID_id_GostR3410_2001: Int32 { get }

public var SN_id_GostR3410_94: String { get }
public var LN_id_GostR3410_94: String { get }
public var NID_id_GostR3410_94: Int32 { get }

public var SN_id_Gost28147_89: String { get }
public var LN_id_Gost28147_89: String { get }
public var NID_id_Gost28147_89: Int32 { get }

public var SN_gost89_cnt: String { get }
public var NID_gost89_cnt: Int32 { get }

public var SN_id_Gost28147_89_MAC: String { get }
public var LN_id_Gost28147_89_MAC: String { get }
public var NID_id_Gost28147_89_MAC: Int32 { get }

public var SN_id_GostR3411_94_prf: String { get }
public var LN_id_GostR3411_94_prf: String { get }
public var NID_id_GostR3411_94_prf: Int32 { get }

public var SN_id_GostR3410_2001DH: String { get }
public var LN_id_GostR3410_2001DH: String { get }
public var NID_id_GostR3410_2001DH: Int32 { get }

public var SN_id_GostR3410_94DH: String { get }
public var LN_id_GostR3410_94DH: String { get }
public var NID_id_GostR3410_94DH: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_KeyMeshing: String { get }
public var NID_id_Gost28147_89_CryptoPro_KeyMeshing: Int32 { get }

public var SN_id_Gost28147_89_None_KeyMeshing: String { get }
public var NID_id_Gost28147_89_None_KeyMeshing: Int32 { get }

public var SN_id_GostR3411_94_TestParamSet: String { get }
public var NID_id_GostR3411_94_TestParamSet: Int32 { get }

public var SN_id_GostR3411_94_CryptoProParamSet: String { get }
public var NID_id_GostR3411_94_CryptoProParamSet: Int32 { get }

public var SN_id_Gost28147_89_TestParamSet: String { get }
public var NID_id_Gost28147_89_TestParamSet: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_A_ParamSet: String { get }
public var NID_id_Gost28147_89_CryptoPro_A_ParamSet: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_B_ParamSet: String { get }
public var NID_id_Gost28147_89_CryptoPro_B_ParamSet: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_C_ParamSet: String { get }
public var NID_id_Gost28147_89_CryptoPro_C_ParamSet: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_D_ParamSet: String { get }
public var NID_id_Gost28147_89_CryptoPro_D_ParamSet: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: String { get }
public var NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: String { get }
public var NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet: Int32 { get }

public var SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: String { get }
public var NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_TestParamSet: String { get }
public var NID_id_GostR3410_94_TestParamSet: Int32 { get }

public var SN_id_GostR3410_94_CryptoPro_A_ParamSet: String { get }
public var NID_id_GostR3410_94_CryptoPro_A_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_CryptoPro_B_ParamSet: String { get }
public var NID_id_GostR3410_94_CryptoPro_B_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_CryptoPro_C_ParamSet: String { get }
public var NID_id_GostR3410_94_CryptoPro_C_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_CryptoPro_D_ParamSet: String { get }
public var NID_id_GostR3410_94_CryptoPro_D_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_CryptoPro_XchA_ParamSet: String { get }
public var NID_id_GostR3410_94_CryptoPro_XchA_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_CryptoPro_XchB_ParamSet: String { get }
public var NID_id_GostR3410_94_CryptoPro_XchB_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_CryptoPro_XchC_ParamSet: String { get }
public var NID_id_GostR3410_94_CryptoPro_XchC_ParamSet: Int32 { get }

public var SN_id_GostR3410_2001_TestParamSet: String { get }
public var NID_id_GostR3410_2001_TestParamSet: Int32 { get }

public var SN_id_GostR3410_2001_CryptoPro_A_ParamSet: String { get }
public var NID_id_GostR3410_2001_CryptoPro_A_ParamSet: Int32 { get }

public var SN_id_GostR3410_2001_CryptoPro_B_ParamSet: String { get }
public var NID_id_GostR3410_2001_CryptoPro_B_ParamSet: Int32 { get }

public var SN_id_GostR3410_2001_CryptoPro_C_ParamSet: String { get }
public var NID_id_GostR3410_2001_CryptoPro_C_ParamSet: Int32 { get }

public var SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet: String { get }
public var NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet: Int32 { get }

public var SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet: String { get }
public var NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet: Int32 { get }

public var SN_id_GostR3410_94_a: String { get }
public var NID_id_GostR3410_94_a: Int32 { get }

public var SN_id_GostR3410_94_aBis: String { get }
public var NID_id_GostR3410_94_aBis: Int32 { get }

public var SN_id_GostR3410_94_b: String { get }
public var NID_id_GostR3410_94_b: Int32 { get }

public var SN_id_GostR3410_94_bBis: String { get }
public var NID_id_GostR3410_94_bBis: Int32 { get }

public var SN_id_Gost28147_89_cc: String { get }
public var LN_id_Gost28147_89_cc: String { get }
public var NID_id_Gost28147_89_cc: Int32 { get }

public var SN_id_GostR3410_94_cc: String { get }
public var LN_id_GostR3410_94_cc: String { get }
public var NID_id_GostR3410_94_cc: Int32 { get }

public var SN_id_GostR3410_2001_cc: String { get }
public var LN_id_GostR3410_2001_cc: String { get }
public var NID_id_GostR3410_2001_cc: Int32 { get }

public var SN_id_GostR3411_94_with_GostR3410_94_cc: String { get }
public var LN_id_GostR3411_94_with_GostR3410_94_cc: String { get }
public var NID_id_GostR3411_94_with_GostR3410_94_cc: Int32 { get }

public var SN_id_GostR3411_94_with_GostR3410_2001_cc: String { get }
public var LN_id_GostR3411_94_with_GostR3410_2001_cc: String { get }
public var NID_id_GostR3411_94_with_GostR3410_2001_cc: Int32 { get }

public var SN_id_GostR3410_2001_ParamSet_cc: String { get }
public var LN_id_GostR3410_2001_ParamSet_cc: String { get }
public var NID_id_GostR3410_2001_ParamSet_cc: Int32 { get }

public var SN_camellia_128_cbc: String { get }
public var LN_camellia_128_cbc: String { get }
public var NID_camellia_128_cbc: Int32 { get }

public var SN_camellia_192_cbc: String { get }
public var LN_camellia_192_cbc: String { get }
public var NID_camellia_192_cbc: Int32 { get }

public var SN_camellia_256_cbc: String { get }
public var LN_camellia_256_cbc: String { get }
public var NID_camellia_256_cbc: Int32 { get }

public var SN_id_camellia128_wrap: String { get }
public var NID_id_camellia128_wrap: Int32 { get }

public var SN_id_camellia192_wrap: String { get }
public var NID_id_camellia192_wrap: Int32 { get }

public var SN_id_camellia256_wrap: String { get }
public var NID_id_camellia256_wrap: Int32 { get }

public var SN_camellia_128_ecb: String { get }
public var LN_camellia_128_ecb: String { get }
public var NID_camellia_128_ecb: Int32 { get }

public var SN_camellia_128_ofb128: String { get }
public var LN_camellia_128_ofb128: String { get }
public var NID_camellia_128_ofb128: Int32 { get }

public var SN_camellia_128_cfb128: String { get }
public var LN_camellia_128_cfb128: String { get }
public var NID_camellia_128_cfb128: Int32 { get }

public var SN_camellia_192_ecb: String { get }
public var LN_camellia_192_ecb: String { get }
public var NID_camellia_192_ecb: Int32 { get }

public var SN_camellia_192_ofb128: String { get }
public var LN_camellia_192_ofb128: String { get }
public var NID_camellia_192_ofb128: Int32 { get }

public var SN_camellia_192_cfb128: String { get }
public var LN_camellia_192_cfb128: String { get }
public var NID_camellia_192_cfb128: Int32 { get }

public var SN_camellia_256_ecb: String { get }
public var LN_camellia_256_ecb: String { get }
public var NID_camellia_256_ecb: Int32 { get }

public var SN_camellia_256_ofb128: String { get }
public var LN_camellia_256_ofb128: String { get }
public var NID_camellia_256_ofb128: Int32 { get }

public var SN_camellia_256_cfb128: String { get }
public var LN_camellia_256_cfb128: String { get }
public var NID_camellia_256_cfb128: Int32 { get }

public var SN_camellia_128_cfb1: String { get }
public var LN_camellia_128_cfb1: String { get }
public var NID_camellia_128_cfb1: Int32 { get }

public var SN_camellia_192_cfb1: String { get }
public var LN_camellia_192_cfb1: String { get }
public var NID_camellia_192_cfb1: Int32 { get }

public var SN_camellia_256_cfb1: String { get }
public var LN_camellia_256_cfb1: String { get }
public var NID_camellia_256_cfb1: Int32 { get }

public var SN_camellia_128_cfb8: String { get }
public var LN_camellia_128_cfb8: String { get }
public var NID_camellia_128_cfb8: Int32 { get }

public var SN_camellia_192_cfb8: String { get }
public var LN_camellia_192_cfb8: String { get }
public var NID_camellia_192_cfb8: Int32 { get }

public var SN_camellia_256_cfb8: String { get }
public var LN_camellia_256_cfb8: String { get }
public var NID_camellia_256_cfb8: Int32 { get }

public var SN_kisa: String { get }
public var LN_kisa: String { get }
public var NID_kisa: Int32 { get }

public var SN_seed_ecb: String { get }
public var LN_seed_ecb: String { get }
public var NID_seed_ecb: Int32 { get }

public var SN_seed_cbc: String { get }
public var LN_seed_cbc: String { get }
public var NID_seed_cbc: Int32 { get }

public var SN_seed_cfb128: String { get }
public var LN_seed_cfb128: String { get }
public var NID_seed_cfb128: Int32 { get }

public var SN_seed_ofb128: String { get }
public var LN_seed_ofb128: String { get }
public var NID_seed_ofb128: Int32 { get }

public var SN_hmac: String { get }
public var LN_hmac: String { get }
public var NID_hmac: Int32 { get }

public var SN_cmac: String { get }
public var LN_cmac: String { get }
public var NID_cmac: Int32 { get }

public var SN_rc4_hmac_md5: String { get }
public var LN_rc4_hmac_md5: String { get }
public var NID_rc4_hmac_md5: Int32 { get }

public var SN_aes_128_cbc_hmac_sha1: String { get }
public var LN_aes_128_cbc_hmac_sha1: String { get }
public var NID_aes_128_cbc_hmac_sha1: Int32 { get }

public var SN_aes_192_cbc_hmac_sha1: String { get }
public var LN_aes_192_cbc_hmac_sha1: String { get }
public var NID_aes_192_cbc_hmac_sha1: Int32 { get }

public var SN_aes_256_cbc_hmac_sha1: String { get }
public var LN_aes_256_cbc_hmac_sha1: String { get }
public var NID_aes_256_cbc_hmac_sha1: Int32 { get }

public var SN_aes_128_cbc_hmac_sha256: String { get }
public var LN_aes_128_cbc_hmac_sha256: String { get }
public var NID_aes_128_cbc_hmac_sha256: Int32 { get }

public var SN_aes_192_cbc_hmac_sha256: String { get }
public var LN_aes_192_cbc_hmac_sha256: String { get }
public var NID_aes_192_cbc_hmac_sha256: Int32 { get }

public var SN_aes_256_cbc_hmac_sha256: String { get }
public var LN_aes_256_cbc_hmac_sha256: String { get }
public var NID_aes_256_cbc_hmac_sha256: Int32 { get }

public var SN_dhpublicnumber: String { get }
public var LN_dhpublicnumber: String { get }
public var NID_dhpublicnumber: Int32 { get }

public var SN_brainpoolP160r1: String { get }
public var NID_brainpoolP160r1: Int32 { get }

public var SN_brainpoolP160t1: String { get }
public var NID_brainpoolP160t1: Int32 { get }

public var SN_brainpoolP192r1: String { get }
public var NID_brainpoolP192r1: Int32 { get }

public var SN_brainpoolP192t1: String { get }
public var NID_brainpoolP192t1: Int32 { get }

public var SN_brainpoolP224r1: String { get }
public var NID_brainpoolP224r1: Int32 { get }

public var SN_brainpoolP224t1: String { get }
public var NID_brainpoolP224t1: Int32 { get }

public var SN_brainpoolP256r1: String { get }
public var NID_brainpoolP256r1: Int32 { get }

public var SN_brainpoolP256t1: String { get }
public var NID_brainpoolP256t1: Int32 { get }

public var SN_brainpoolP320r1: String { get }
public var NID_brainpoolP320r1: Int32 { get }

public var SN_brainpoolP320t1: String { get }
public var NID_brainpoolP320t1: Int32 { get }

public var SN_brainpoolP384r1: String { get }
public var NID_brainpoolP384r1: Int32 { get }

public var SN_brainpoolP384t1: String { get }
public var NID_brainpoolP384t1: Int32 { get }

public var SN_brainpoolP512r1: String { get }
public var NID_brainpoolP512r1: Int32 { get }

public var SN_brainpoolP512t1: String { get }
public var NID_brainpoolP512t1: Int32 { get }

public var SN_dhSinglePass_stdDH_sha1kdf_scheme: String { get }
public var NID_dhSinglePass_stdDH_sha1kdf_scheme: Int32 { get }

public var SN_dhSinglePass_stdDH_sha224kdf_scheme: String { get }
public var NID_dhSinglePass_stdDH_sha224kdf_scheme: Int32 { get }

public var SN_dhSinglePass_stdDH_sha256kdf_scheme: String { get }
public var NID_dhSinglePass_stdDH_sha256kdf_scheme: Int32 { get }

public var SN_dhSinglePass_stdDH_sha384kdf_scheme: String { get }
public var NID_dhSinglePass_stdDH_sha384kdf_scheme: Int32 { get }

public var SN_dhSinglePass_stdDH_sha512kdf_scheme: String { get }
public var NID_dhSinglePass_stdDH_sha512kdf_scheme: Int32 { get }

public var SN_dhSinglePass_cofactorDH_sha1kdf_scheme: String { get }
public var NID_dhSinglePass_cofactorDH_sha1kdf_scheme: Int32 { get }

public var SN_dhSinglePass_cofactorDH_sha224kdf_scheme: String { get }
public var NID_dhSinglePass_cofactorDH_sha224kdf_scheme: Int32 { get }

public var SN_dhSinglePass_cofactorDH_sha256kdf_scheme: String { get }
public var NID_dhSinglePass_cofactorDH_sha256kdf_scheme: Int32 { get }

public var SN_dhSinglePass_cofactorDH_sha384kdf_scheme: String { get }
public var NID_dhSinglePass_cofactorDH_sha384kdf_scheme: Int32 { get }

public var SN_dhSinglePass_cofactorDH_sha512kdf_scheme: String { get }
public var NID_dhSinglePass_cofactorDH_sha512kdf_scheme: Int32 { get }

public var SN_dh_std_kdf: String { get }
public var NID_dh_std_kdf: Int32 { get }

public var SN_dh_cofactor_kdf: String { get }
public var NID_dh_cofactor_kdf: Int32 { get }

public var SN_ct_precert_scts: String { get }
public var LN_ct_precert_scts: String { get }
public var NID_ct_precert_scts: Int32 { get }

public var SN_ct_precert_poison: String { get }
public var LN_ct_precert_poison: String { get }
public var NID_ct_precert_poison: Int32 { get }

public var SN_ct_precert_signer: String { get }
public var LN_ct_precert_signer: String { get }
public var NID_ct_precert_signer: Int32 { get }

public var SN_ct_cert_scts: String { get }
public var LN_ct_cert_scts: String { get }
public var NID_ct_cert_scts: Int32 { get }

public var SN_jurisdictionLocalityName: String { get }
public var LN_jurisdictionLocalityName: String { get }
public var NID_jurisdictionLocalityName: Int32 { get }

public var SN_jurisdictionStateOrProvinceName: String { get }
public var LN_jurisdictionStateOrProvinceName: String { get }
public var NID_jurisdictionStateOrProvinceName: Int32 { get }

public var SN_jurisdictionCountryName: String { get }
public var LN_jurisdictionCountryName: String { get }
public var NID_jurisdictionCountryName: Int32 { get }
/* crypto/bn/bn.h */
/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 *
 * Portions of the attached software ("Contribution") are developed by
 * SUN MICROSYSTEMS, INC., and are contributed to the OpenSSL project.
 *
 * The Contribution is licensed pursuant to the Eric Young open source
 * license provided above.
 *
 * The binary polynomial arithmetic software is originally written by
 * Sheueling Chang Shantz and Douglas Stebila of Sun Microsystems Laboratories.
 *
 */

/* FILE */

/*
 * These preprocessor symbols control various aspects of the bignum headers
 * and library code. They're not defined by any "normal" configuration, as
 * they are intended for development and testing purposes. NB: defining all
 * three can be useful for debugging application code as well as openssl
 * itself. BN_DEBUG - turn on various debugging alterations to the bignum
 * code BN_DEBUG_RAND - uses random poisoning of unused words to trip up
 * mismanagement of bignum internals. You must also define BN_DEBUG.
 */
/* #define BN_DEBUG */
/* #define BN_DEBUG_RAND */

/*
 * This next option uses the C libraries (2 word)/(1 word) function. If it is
 * not defined, I use my C version (which is slower). The reason for this
 * flag is that when the particular C compiler library routine is used, and
 * the library is linked with a different compiler, the library is missing.
 * This mostly happens when the library is built with gcc and then linked
 * using normal cc.  This would be a common occurrence because gcc normally
 * produces code that is 2 times faster than system compilers for the big
 * number stuff. For machines with only one compiler (or shared libraries),
 * this should be on.  Again this in only really a problem on machines using
 * "long long's", are 32bit, and are not using my assembler code.
 */

/*
 * assuming long is 64bit - this is the DEC Alpha unsigned long long is only
 * 64 bits :-(, don't define BN_LLONG for the DEC Alpha
 */

public var BN_BITS: Int32 { get }
public var BN_BYTES: Int32 { get }
public var BN_BITS2: Int32 { get }
public var BN_BITS4: Int32 { get }
public var BN_MASK: UInt64 { get }
public var BN_MASK2: UInt { get }
public var BN_MASK2l: Int { get }
public var BN_MASK2h: UInt { get }
public var BN_MASK2h1: UInt { get }
public var BN_TBIT: UInt { get }
public var BN_DEC_CONV: UInt { get }
public var BN_DEC_FMT1: String { get }
public var BN_DEC_FMT2: String { get }
public var BN_DEC_NUM: Int32 { get }
public var BN_HEX_FMT1: String { get }
public var BN_HEX_FMT2: String { get }

/*
 * This is where the long long data type is 64 bits, but long is 32. For
 * machines where there are 64bit registers, this is the mode to use. IRIX,
 * on R4000 and above should use this mode, along with the relevant assembler
 * code :-).  Do NOT define BN_LLONG.
 */

public var BN_DEFAULT_BITS: Int32 { get }

public var BN_FLG_MALLOCED: Int32 { get }
public var BN_FLG_STATIC_DATA: Int32 { get }

/*
 * avoid leaking exponent information through timing,
 * BN_mod_exp_mont() will call BN_mod_exp_mont_consttime,
 * BN_div() will call BN_div_no_branch,
 * BN_mod_inverse() will call BN_mod_inverse_no_branch.
 */
public var BN_FLG_CONSTTIME: Int32 { get }

/* deprecated name for the flag */

/*
 * avoid leaking exponent information through timings
 * (BN_mod_exp_mont() will call BN_mod_exp_mont_consttime)
 */

public var BN_FLG_FREE: Int32 { get }
/* used for debuging */

/*
 * get a clone of a BIGNUM with changed flags, for *temporary* use only (the
 * two BIGNUMs cannot not be used in parallel!)
 */

/* Already declared in ossl_typ.h */

/* Used for temp variables (declaration hidden in bn_lcl.h) */

public struct bignum_st {

    public var d: UnsafeMutablePointer<UInt>! /* Pointer to an array of 'BN_BITS2' bit
                                 * chunks. */

    
    public var top: Int32 /* Index of last used d +1. */

    /* The next are internal book keeping for bn_expand. */
    public var dmax: Int32 /* Size of the d array. */

    public var neg: Int32 /* one if the number is negative */

    public var flags: Int32

    public init()

    public init(d: UnsafeMutablePointer<UInt>!, top: Int32, dmax: Int32, neg: Int32, flags: Int32)
}

/* Used for montgomery multiplication */
public struct bn_mont_ctx_st {

    public var ri: Int32 /* number of bits in R */

    public var RR: BIGNUM /* used to convert to montgomery form */

    public var N: BIGNUM /* The modulus */

    public var Ni: BIGNUM /* R*(1/R mod N) - N*Ni = 1 (Ni is only
                                 * stored for bignum algorithm) */

    
    public var n0: (UInt, UInt) /* least significant word(s) of Ni; (type
                                 * changed with 0.9.9, was "BN_ULONG n0;"
                                 * before) */

    
    public var flags: Int32

    public init()

    public init(ri: Int32, RR: BIGNUM, N: BIGNUM, Ni: BIGNUM, n0: (UInt, UInt), flags: Int32)
}

/*
 * Used for reciprocal division/mod functions It cannot be shared between
 * threads
 */
public struct bn_recp_ctx_st {

    public var N: BIGNUM /* the divisor */

    public var Nr: BIGNUM /* the reciprocal */

    public var num_bits: Int32

    public var shift: Int32

    public var flags: Int32

    public init()

    public init(N: BIGNUM, Nr: BIGNUM, num_bits: Int32, shift: Int32, flags: Int32)
}

/* Used for slow "generation" functions. */
public struct bn_gencb_st {

    /* To handle binary (in)compatibility */
    /* callback-specific data */
    public struct __Unnamed_union_cb {

        /* if(ver==1) - handles old style callbacks */
        public var cb_1: (@convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!

        /* if(ver==2) - new callback style */
        public var cb_2: (@convention(c) (Int32, Int32, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!

        public init(cb_1: (@escaping @convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!)

        public init(cb_2: (@escaping @convention(c) (Int32, Int32, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!)

        public init()
    }

    public var ver: UInt32

    public var arg: UnsafeMutableRawPointer!

    public var cb: bn_gencb_st.__Unnamed_union_cb

    public init()

    public init(ver: UInt32, arg: UnsafeMutableRawPointer!, cb: bn_gencb_st.__Unnamed_union_cb)
}
/* Wrapper function to make using BN_GENCB easier,  */
public func BN_GENCB_call(_ cb: UnsafeMutablePointer<BN_GENCB>!, _ a: Int32, _ b: Int32) -> Int32
/* Macro to populate a BN_GENCB structure with an "old"-style callback */

/* Macro to populate a BN_GENCB structure with a "new"-style callback */

public var BN_prime_checks: Int32 { get } /* default: select number of iterations based
                                 * on the size of the number */

/*
 * number of Miller-Rabin iterations for an error rate of less than 2^-80 for
 * random 'b'-bit input, b >= 100 (taken from table 4.4 in the Handbook of
 * Applied Cryptography [Menezes, van Oorschot, Vanstone; CRC Press 1996];
 * original paper: Damgaard, Landrock, Pomerance: Average case error
 * estimates for the strong probable prime test. -- Math. Comp. 61 (1993)
 * 177-194)
 */

/* b >= 100 */

/* Note that BN_abs_is_word didn't work reliably for w == 0 until 0.9.8 */

public func BN_value_one() -> UnsafePointer<BIGNUM>!
public func BN_options() -> UnsafeMutablePointer<Int8>!
public func BN_CTX_new() -> OpaquePointer!

public func BN_CTX_init(_ c: OpaquePointer!)

public func BN_CTX_free(_ c: OpaquePointer!)
public func BN_CTX_start(_ ctx: OpaquePointer!)
public func BN_CTX_get(_ ctx: OpaquePointer!) -> UnsafeMutablePointer<BIGNUM>!
public func BN_CTX_end(_ ctx: OpaquePointer!)
public func BN_rand(_ rnd: UnsafeMutablePointer<BIGNUM>!, _ bits: Int32, _ top: Int32, _ bottom: Int32) -> Int32
public func BN_pseudo_rand(_ rnd: UnsafeMutablePointer<BIGNUM>!, _ bits: Int32, _ top: Int32, _ bottom: Int32) -> Int32
public func BN_rand_range(_ rnd: UnsafeMutablePointer<BIGNUM>!, _ range: UnsafePointer<BIGNUM>!) -> Int32
public func BN_pseudo_rand_range(_ rnd: UnsafeMutablePointer<BIGNUM>!, _ range: UnsafePointer<BIGNUM>!) -> Int32
public func BN_num_bits(_ a: UnsafePointer<BIGNUM>!) -> Int32
public func BN_num_bits_word(_: UInt) -> Int32
public func BN_new() -> UnsafeMutablePointer<BIGNUM>!
public func BN_init(_: UnsafeMutablePointer<BIGNUM>!)
public func BN_clear_free(_ a: UnsafeMutablePointer<BIGNUM>!)
public func BN_copy(_ a: UnsafeMutablePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func BN_swap(_ a: UnsafeMutablePointer<BIGNUM>!, _ b: UnsafeMutablePointer<BIGNUM>!)
public func BN_bin2bn(_ s: UnsafePointer<UInt8>!, _ len: Int32, _ ret: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func BN_bn2bin(_ a: UnsafePointer<BIGNUM>!, _ to: UnsafeMutablePointer<UInt8>!) -> Int32
public func BN_mpi2bn(_ s: UnsafePointer<UInt8>!, _ len: Int32, _ ret: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func BN_bn2mpi(_ a: UnsafePointer<BIGNUM>!, _ to: UnsafeMutablePointer<UInt8>!) -> Int32
public func BN_sub(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> Int32
public func BN_usub(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> Int32
public func BN_uadd(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> Int32
public func BN_add(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> Int32
public func BN_mul(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_sqr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
/** BN_set_negative sets sign of a BIGNUM
 * \param  b  pointer to the BIGNUM object
 * \param  n  0 if the BIGNUM b should be positive and a value != 0 otherwise
 */
public func BN_set_negative(_ b: UnsafeMutablePointer<BIGNUM>!, _ n: Int32)
/** BN_is_negative returns 1 if the BIGNUM is negative
 * \param  a  pointer to the BIGNUM object
 * \return 1 if a < 0 and 0 otherwise
 */

public func BN_div(_ dv: UnsafeMutablePointer<BIGNUM>!, _ rem: UnsafeMutablePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ d: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

public func BN_nnmod(_ r: UnsafeMutablePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ d: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_add(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_add_quick(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!) -> Int32
public func BN_mod_sub(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_sub_quick(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!) -> Int32
public func BN_mod_mul(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_sqr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_lshift1(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_lshift1_quick(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!) -> Int32
public func BN_mod_lshift(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ n: Int32, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_lshift_quick(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ n: Int32, _ m: UnsafePointer<BIGNUM>!) -> Int32

public func BN_mod_word(_ a: UnsafePointer<BIGNUM>!, _ w: UInt) -> UInt
public func BN_div_word(_ a: UnsafeMutablePointer<BIGNUM>!, _ w: UInt) -> UInt
public func BN_mul_word(_ a: UnsafeMutablePointer<BIGNUM>!, _ w: UInt) -> Int32
public func BN_add_word(_ a: UnsafeMutablePointer<BIGNUM>!, _ w: UInt) -> Int32
public func BN_sub_word(_ a: UnsafeMutablePointer<BIGNUM>!, _ w: UInt) -> Int32
public func BN_set_word(_ a: UnsafeMutablePointer<BIGNUM>!, _ w: UInt) -> Int32
public func BN_get_word(_ a: UnsafePointer<BIGNUM>!) -> UInt

public func BN_cmp(_ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> Int32
public func BN_free(_ a: UnsafeMutablePointer<BIGNUM>!)
public func BN_is_bit_set(_ a: UnsafePointer<BIGNUM>!, _ n: Int32) -> Int32
public func BN_lshift(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ n: Int32) -> Int32
public func BN_lshift1(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!) -> Int32
public func BN_exp(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

public func BN_mod_exp(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_exp_mont(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!, _ m_ctx: UnsafeMutablePointer<BN_MONT_CTX>!) -> Int32
public func BN_mod_exp_mont_consttime(_ rr: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!, _ in_mont: UnsafeMutablePointer<BN_MONT_CTX>!) -> Int32
public func BN_mod_exp_mont_word(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UInt, _ p: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!, _ m_ctx: UnsafeMutablePointer<BN_MONT_CTX>!) -> Int32
public func BN_mod_exp2_mont(_ r: UnsafeMutablePointer<BIGNUM>!, _ a1: UnsafePointer<BIGNUM>!, _ p1: UnsafePointer<BIGNUM>!, _ a2: UnsafePointer<BIGNUM>!, _ p2: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!, _ m_ctx: UnsafeMutablePointer<BN_MONT_CTX>!) -> Int32
public func BN_mod_exp_simple(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

public func BN_mask_bits(_ a: UnsafeMutablePointer<BIGNUM>!, _ n: Int32) -> Int32

public func BN_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ a: UnsafePointer<BIGNUM>!) -> Int32

public func BN_print(_ fp: UnsafeMutablePointer<BIO>!, _ a: UnsafePointer<BIGNUM>!) -> Int32

public func BN_reciprocal(_ r: UnsafeMutablePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ len: Int32, _ ctx: OpaquePointer!) -> Int32
public func BN_rshift(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ n: Int32) -> Int32
public func BN_rshift1(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!) -> Int32
public func BN_clear(_ a: UnsafeMutablePointer<BIGNUM>!)
public func BN_dup(_ a: UnsafePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func BN_ucmp(_ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> Int32
public func BN_set_bit(_ a: UnsafeMutablePointer<BIGNUM>!, _ n: Int32) -> Int32
public func BN_clear_bit(_ a: UnsafeMutablePointer<BIGNUM>!, _ n: Int32) -> Int32
public func BN_bn2hex(_ a: UnsafePointer<BIGNUM>!) -> UnsafeMutablePointer<Int8>!
public func BN_bn2dec(_ a: UnsafePointer<BIGNUM>!) -> UnsafeMutablePointer<Int8>!
public func BN_hex2bn(_ a: UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>!, _ str: UnsafePointer<Int8>!) -> Int32
public func BN_dec2bn(_ a: UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>!, _ str: UnsafePointer<Int8>!) -> Int32
public func BN_asc2bn(_ a: UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>!, _ str: UnsafePointer<Int8>!) -> Int32
public func BN_gcd(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_kronecker(_ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32 /* returns
                                                                  * -2 for
                                                                  * error */

public func BN_mod_inverse(_ ret: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ n: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> UnsafeMutablePointer<BIGNUM>!
public func BN_mod_sqrt(_ ret: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ n: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> UnsafeMutablePointer<BIGNUM>!

public func BN_consttime_swap(_ swap: UInt, _ a: UnsafeMutablePointer<BIGNUM>!, _ b: UnsafeMutablePointer<BIGNUM>!, _ nwords: Int32)

/* Deprecated versions */

public func BN_generate_prime(_ ret: UnsafeMutablePointer<BIGNUM>!, _ bits: Int32, _ safe: Int32, _ add: UnsafePointer<BIGNUM>!, _ rem: UnsafePointer<BIGNUM>!, _ callback: (@escaping @convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!, _ cb_arg: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<BIGNUM>!
public func BN_is_prime(_ p: UnsafePointer<BIGNUM>!, _ nchecks: Int32, _ callback: (@escaping @convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!, _ ctx: OpaquePointer!, _ cb_arg: UnsafeMutableRawPointer!) -> Int32
public func BN_is_prime_fasttest(_ p: UnsafePointer<BIGNUM>!, _ nchecks: Int32, _ callback: (@escaping @convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!, _ ctx: OpaquePointer!, _ cb_arg: UnsafeMutableRawPointer!, _ do_trial_division: Int32) -> Int32
/* !defined(OPENSSL_NO_DEPRECATED) */

/* Newer versions */
public func BN_generate_prime_ex(_ ret: UnsafeMutablePointer<BIGNUM>!, _ bits: Int32, _ safe: Int32, _ add: UnsafePointer<BIGNUM>!, _ rem: UnsafePointer<BIGNUM>!, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32
public func BN_is_prime_ex(_ p: UnsafePointer<BIGNUM>!, _ nchecks: Int32, _ ctx: OpaquePointer!, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32
public func BN_is_prime_fasttest_ex(_ p: UnsafePointer<BIGNUM>!, _ nchecks: Int32, _ ctx: OpaquePointer!, _ do_trial_division: Int32, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32

public func BN_X931_generate_Xpq(_ Xp: UnsafeMutablePointer<BIGNUM>!, _ Xq: UnsafeMutablePointer<BIGNUM>!, _ nbits: Int32, _ ctx: OpaquePointer!) -> Int32

public func BN_X931_derive_prime_ex(_ p: UnsafeMutablePointer<BIGNUM>!, _ p1: UnsafeMutablePointer<BIGNUM>!, _ p2: UnsafeMutablePointer<BIGNUM>!, _ Xp: UnsafePointer<BIGNUM>!, _ Xp1: UnsafePointer<BIGNUM>!, _ Xp2: UnsafePointer<BIGNUM>!, _ e: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32
public func BN_X931_generate_prime_ex(_ p: UnsafeMutablePointer<BIGNUM>!, _ p1: UnsafeMutablePointer<BIGNUM>!, _ p2: UnsafeMutablePointer<BIGNUM>!, _ Xp1: UnsafeMutablePointer<BIGNUM>!, _ Xp2: UnsafeMutablePointer<BIGNUM>!, _ Xp: UnsafePointer<BIGNUM>!, _ e: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32

public func BN_MONT_CTX_new() -> UnsafeMutablePointer<BN_MONT_CTX>!
public func BN_MONT_CTX_init(_ ctx: UnsafeMutablePointer<BN_MONT_CTX>!)
public func BN_mod_mul_montgomery(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ mont: UnsafeMutablePointer<BN_MONT_CTX>!, _ ctx: OpaquePointer!) -> Int32

public func BN_from_montgomery(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ mont: UnsafeMutablePointer<BN_MONT_CTX>!, _ ctx: OpaquePointer!) -> Int32
public func BN_MONT_CTX_free(_ mont: UnsafeMutablePointer<BN_MONT_CTX>!)
public func BN_MONT_CTX_set(_ mont: UnsafeMutablePointer<BN_MONT_CTX>!, _ mod: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_MONT_CTX_copy(_ to: UnsafeMutablePointer<BN_MONT_CTX>!, _ from: UnsafeMutablePointer<BN_MONT_CTX>!) -> UnsafeMutablePointer<BN_MONT_CTX>!
public func BN_MONT_CTX_set_locked(_ pmont: UnsafeMutablePointer<UnsafeMutablePointer<BN_MONT_CTX>?>!, _ lock: Int32, _ mod: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> UnsafeMutablePointer<BN_MONT_CTX>!

/* BN_BLINDING flags */
public var BN_BLINDING_NO_UPDATE: Int32 { get }
public var BN_BLINDING_NO_RECREATE: Int32 { get }

public func BN_BLINDING_new(_ A: UnsafePointer<BIGNUM>!, _ Ai: UnsafePointer<BIGNUM>!, _ mod: UnsafeMutablePointer<BIGNUM>!) -> OpaquePointer!
public func BN_BLINDING_free(_ b: OpaquePointer!)
public func BN_BLINDING_update(_ b: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32
public func BN_BLINDING_convert(_ n: UnsafeMutablePointer<BIGNUM>!, _ b: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32
public func BN_BLINDING_invert(_ n: UnsafeMutablePointer<BIGNUM>!, _ b: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32
public func BN_BLINDING_convert_ex(_ n: UnsafeMutablePointer<BIGNUM>!, _ r: UnsafeMutablePointer<BIGNUM>!, _ b: OpaquePointer!, _: OpaquePointer!) -> Int32
public func BN_BLINDING_invert_ex(_ n: UnsafeMutablePointer<BIGNUM>!, _ r: UnsafePointer<BIGNUM>!, _ b: OpaquePointer!, _: OpaquePointer!) -> Int32

public func BN_BLINDING_get_thread_id(_: OpaquePointer!) -> UInt
public func BN_BLINDING_set_thread_id(_: OpaquePointer!, _: UInt)

public func BN_BLINDING_thread_id(_: OpaquePointer!) -> UnsafeMutablePointer<CRYPTO_THREADID>!
public func BN_BLINDING_get_flags(_: OpaquePointer!) -> UInt
public func BN_BLINDING_set_flags(_: OpaquePointer!, _: UInt)
public func BN_BLINDING_create_param(_ b: OpaquePointer!, _ e: UnsafePointer<BIGNUM>!, _ m: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!, _ bn_mod_exp: (@escaping @convention(c) (UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!, _ m_ctx: UnsafeMutablePointer<BN_MONT_CTX>!) -> OpaquePointer!

public func BN_set_params(_ mul: Int32, _ high: Int32, _ low: Int32, _ mont: Int32)
public func BN_get_params(_ which: Int32) -> Int32 /* 0, mul, 1 high, 2 low, 3 mont */

public func BN_RECP_CTX_init(_ recp: UnsafeMutablePointer<BN_RECP_CTX>!)
public func BN_RECP_CTX_new() -> UnsafeMutablePointer<BN_RECP_CTX>!
public func BN_RECP_CTX_free(_ recp: UnsafeMutablePointer<BN_RECP_CTX>!)
public func BN_RECP_CTX_set(_ recp: UnsafeMutablePointer<BN_RECP_CTX>!, _ rdiv: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_mul_reciprocal(_ r: UnsafeMutablePointer<BIGNUM>!, _ x: UnsafePointer<BIGNUM>!, _ y: UnsafePointer<BIGNUM>!, _ recp: UnsafeMutablePointer<BN_RECP_CTX>!, _ ctx: OpaquePointer!) -> Int32
public func BN_mod_exp_recp(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_div_recp(_ dv: UnsafeMutablePointer<BIGNUM>!, _ rem: UnsafeMutablePointer<BIGNUM>!, _ m: UnsafePointer<BIGNUM>!, _ recp: UnsafeMutablePointer<BN_RECP_CTX>!, _ ctx: OpaquePointer!) -> Int32

/*
 * Functions for arithmetic over binary polynomials represented by BIGNUMs.
 * The BIGNUM::neg property of BIGNUMs representing binary polynomials is
 * ignored. Note that input arguments are not const so that their bit arrays
 * can be expanded to the appropriate size if needed.
 */

/*
 * r = a + b
 */
public func BN_GF2m_add(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!) -> Int32

/*
 * r=a mod p
 */
public func BN_GF2m_mod(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!) -> Int32
/* r = (a * b) mod p */
public func BN_GF2m_mod_mul(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
/* r = (a * a) mod p */
public func BN_GF2m_mod_sqr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
/* r = (1 / b) mod p */
public func BN_GF2m_mod_inv(_ r: UnsafeMutablePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
/* r = (a / b) mod p */
public func BN_GF2m_mod_div(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
/* r = (a ^ b) mod p */
public func BN_GF2m_mod_exp(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
/* r = sqrt(a) mod p */
public func BN_GF2m_mod_sqrt(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
/* r^2 + r = a mod p */
public func BN_GF2m_mod_solve_quad(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/*-
 * Some functions allow for representation of the irreducible polynomials
 * as an unsigned int[], say p.  The irreducible f(t) is then of the form:
 *     t^p[0] + t^p[1] + ... + t^p[k]
 * where m = p[0] > p[1] > ... > p[k] = 0.
 */
/* r = a mod p */
public func BN_GF2m_mod_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!) -> Int32
/* r = (a * b) mod p */
public func BN_GF2m_mod_mul_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!, _ ctx: OpaquePointer!) -> Int32
/* r = (a * a) mod p */
public func BN_GF2m_mod_sqr_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!, _ ctx: OpaquePointer!) -> Int32
/* r = (1 / b) mod p */
public func BN_GF2m_mod_inv_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!, _ ctx: OpaquePointer!) -> Int32
/* r = (a / b) mod p */
public func BN_GF2m_mod_div_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!, _ ctx: OpaquePointer!) -> Int32
/* r = (a ^ b) mod p */
public func BN_GF2m_mod_exp_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!, _ ctx: OpaquePointer!) -> Int32
/* r = sqrt(a) mod p */
public func BN_GF2m_mod_sqrt_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!, _ ctx: OpaquePointer!) -> Int32
/* r^2 + r = a mod p */
public func BN_GF2m_mod_solve_quad_arr(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<Int32>!, _ ctx: OpaquePointer!) -> Int32
public func BN_GF2m_poly2arr(_ a: UnsafePointer<BIGNUM>!, _ p: UnsafeMutablePointer<Int32>!, _ max: Int32) -> Int32
public func BN_GF2m_arr2poly(_ p: UnsafePointer<Int32>!, _ a: UnsafeMutablePointer<BIGNUM>!) -> Int32

/*
 * faster mod functions for the 'NIST primes' 0 <= a < p^2
 */
public func BN_nist_mod_192(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_nist_mod_224(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_nist_mod_256(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_nist_mod_384(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32
public func BN_nist_mod_521(_ r: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ p: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

public func BN_get0_nist_prime_192() -> UnsafePointer<BIGNUM>!
public func BN_get0_nist_prime_224() -> UnsafePointer<BIGNUM>!
public func BN_get0_nist_prime_256() -> UnsafePointer<BIGNUM>!
public func BN_get0_nist_prime_384() -> UnsafePointer<BIGNUM>!
public func BN_get0_nist_prime_521() -> UnsafePointer<BIGNUM>!

/* library internal functions */

public func bn_expand2(_ a: UnsafeMutablePointer<BIGNUM>!, _ words: Int32) -> UnsafeMutablePointer<BIGNUM>!

public func bn_dup_expand(_ a: UnsafePointer<BIGNUM>!, _ words: Int32) -> UnsafeMutablePointer<BIGNUM>! /* unused */

/*-
 * Bignum consistency macros
 * There is one "API" macro, bn_fix_top(), for stripping leading zeroes from
 * bignum data after direct manipulations on the data. There is also an
 * "internal" macro, bn_check_top(), for verifying that there are no leading
 * zeroes. Unfortunately, some auditing is required due to the fact that
 * bn_fix_top() has become an overabused duct-tape because bignum data is
 * occasionally passed around in an inconsistent state. So the following
 * changes have been made to sort this out;
 * - bn_fix_top()s implementation has been moved to bn_correct_top()
 * - if BN_DEBUG isn't defined, bn_fix_top() maps to bn_correct_top(), and
 *   bn_check_top() is as before.
 * - if BN_DEBUG *is* defined;
 *   - bn_check_top() tries to pollute unused words even if the bignum 'top' is
 *     consistent. (ed: only if BN_DEBUG_RAND is defined)
 *   - bn_fix_top() maps to bn_check_top() rather than "fixing" anything.
 * The idea is to have debug builds flag up inconsistent bignums when they
 * occur. If that occurs in a bn_fix_top(), we examine the code in question; if
 * the use of bn_fix_top() was appropriate (ie. it follows directly after code
 * that manipulates the bignum) it is converted to bn_correct_top(), and if it
 * was not appropriate, we convert it permanently to bn_check_top() and track
 * down the cause of the bug. Eventually, no internal code should be using the
 * bn_fix_top() macro. External applications and libraries should try this with
 * their own code too, both in terms of building against the openssl headers
 * with BN_DEBUG defined *and* linking with a version of OpenSSL built with it
 * defined. This not only improves external code, it provides more test
 * coverage for openssl's own code.
 */

/* We only need assert() when debugging */

/* To avoid "make update" cvs wars due to BN_DEBUG, use some tricks */

/* We cast away const without the compiler knowing, any \
 * *genuinely* constant variables that aren't mutable \
 * wouldn't be constructed with top!=dmax. */

/* Debug only - safe to ignore error return */

/* avoid unused variable warning with NDEBUG */

/* !BN_DEBUG */

public func bn_mul_add_words(_ rp: UnsafeMutablePointer<UInt>!, _ ap: UnsafePointer<UInt>!, _ num: Int32, _ w: UInt) -> UInt
public func bn_mul_words(_ rp: UnsafeMutablePointer<UInt>!, _ ap: UnsafePointer<UInt>!, _ num: Int32, _ w: UInt) -> UInt
public func bn_sqr_words(_ rp: UnsafeMutablePointer<UInt>!, _ ap: UnsafePointer<UInt>!, _ num: Int32)
public func bn_div_words(_ h: UInt, _ l: UInt, _ d: UInt) -> UInt
public func bn_add_words(_ rp: UnsafeMutablePointer<UInt>!, _ ap: UnsafePointer<UInt>!, _ bp: UnsafePointer<UInt>!, _ num: Int32) -> UInt
public func bn_sub_words(_ rp: UnsafeMutablePointer<UInt>!, _ ap: UnsafePointer<UInt>!, _ bp: UnsafePointer<UInt>!, _ num: Int32) -> UInt

/* Primes from RFC 2409 */
public func get_rfc2409_prime_768(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func get_rfc2409_prime_1024(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!

/* Primes from RFC 3526 */
public func get_rfc3526_prime_1536(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func get_rfc3526_prime_2048(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func get_rfc3526_prime_3072(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func get_rfc3526_prime_4096(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func get_rfc3526_prime_6144(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!
public func get_rfc3526_prime_8192(_ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!

public func BN_bntest_rand(_ rnd: UnsafeMutablePointer<BIGNUM>!, _ bits: Int32, _ top: Int32, _ bottom: Int32) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_BN_strings()

/* Error codes for the BN functions. */

/* Function codes. */
public var BN_F_BNRAND: Int32 { get }
public var BN_F_BN_BLINDING_CONVERT_EX: Int32 { get }
public var BN_F_BN_BLINDING_CREATE_PARAM: Int32 { get }
public var BN_F_BN_BLINDING_INVERT_EX: Int32 { get }
public var BN_F_BN_BLINDING_NEW: Int32 { get }
public var BN_F_BN_BLINDING_UPDATE: Int32 { get }
public var BN_F_BN_BN2DEC: Int32 { get }
public var BN_F_BN_BN2HEX: Int32 { get }
public var BN_F_BN_CTX_GET: Int32 { get }
public var BN_F_BN_CTX_NEW: Int32 { get }
public var BN_F_BN_CTX_START: Int32 { get }
public var BN_F_BN_DIV: Int32 { get }
public var BN_F_BN_DIV_NO_BRANCH: Int32 { get }
public var BN_F_BN_DIV_RECP: Int32 { get }
public var BN_F_BN_EXP: Int32 { get }
public var BN_F_BN_EXPAND2: Int32 { get }
public var BN_F_BN_EXPAND_INTERNAL: Int32 { get }
public var BN_F_BN_GF2M_MOD: Int32 { get }
public var BN_F_BN_GF2M_MOD_EXP: Int32 { get }
public var BN_F_BN_GF2M_MOD_MUL: Int32 { get }
public var BN_F_BN_GF2M_MOD_SOLVE_QUAD: Int32 { get }
public var BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR: Int32 { get }
public var BN_F_BN_GF2M_MOD_SQR: Int32 { get }
public var BN_F_BN_GF2M_MOD_SQRT: Int32 { get }
public var BN_F_BN_LSHIFT: Int32 { get }
public var BN_F_BN_MOD_EXP2_MONT: Int32 { get }
public var BN_F_BN_MOD_EXP_MONT: Int32 { get }
public var BN_F_BN_MOD_EXP_MONT_CONSTTIME: Int32 { get }
public var BN_F_BN_MOD_EXP_MONT_WORD: Int32 { get }
public var BN_F_BN_MOD_EXP_RECP: Int32 { get }
public var BN_F_BN_MOD_EXP_SIMPLE: Int32 { get }
public var BN_F_BN_MOD_INVERSE: Int32 { get }
public var BN_F_BN_MOD_INVERSE_NO_BRANCH: Int32 { get }
public var BN_F_BN_MOD_LSHIFT_QUICK: Int32 { get }
public var BN_F_BN_MOD_MUL_RECIPROCAL: Int32 { get }
public var BN_F_BN_MOD_SQRT: Int32 { get }
public var BN_F_BN_MPI2BN: Int32 { get }
public var BN_F_BN_NEW: Int32 { get }
public var BN_F_BN_RAND: Int32 { get }
public var BN_F_BN_RAND_RANGE: Int32 { get }
public var BN_F_BN_RSHIFT: Int32 { get }
public var BN_F_BN_USUB: Int32 { get }

/* Reason codes. */
public var BN_R_ARG2_LT_ARG3: Int32 { get }
public var BN_R_BAD_RECIPROCAL: Int32 { get }
public var BN_R_BIGNUM_TOO_LONG: Int32 { get }
public var BN_R_BITS_TOO_SMALL: Int32 { get }
public var BN_R_CALLED_WITH_EVEN_MODULUS: Int32 { get }
public var BN_R_DIV_BY_ZERO: Int32 { get }
public var BN_R_ENCODING_ERROR: Int32 { get }
public var BN_R_EXPAND_ON_STATIC_BIGNUM_DATA: Int32 { get }
public var BN_R_INPUT_NOT_REDUCED: Int32 { get }
public var BN_R_INVALID_LENGTH: Int32 { get }
public var BN_R_INVALID_RANGE: Int32 { get }
public var BN_R_INVALID_SHIFT: Int32 { get }
public var BN_R_NOT_A_SQUARE: Int32 { get }
public var BN_R_NOT_INITIALIZED: Int32 { get }
public var BN_R_NO_INVERSE: Int32 { get }
public var BN_R_NO_SOLUTION: Int32 { get }
public var BN_R_P_IS_NOT_PRIME: Int32 { get }
public var BN_R_TOO_MANY_ITERATIONS: Int32 { get }
public var BN_R_TOO_MANY_TEMPORARY_VARIABLES: Int32 { get }
/* crypto/asn1/asn1.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

public var V_ASN1_UNIVERSAL: Int32 { get }
public var V_ASN1_APPLICATION: Int32 { get }
public var V_ASN1_CONTEXT_SPECIFIC: Int32 { get }
public var V_ASN1_PRIVATE: Int32 { get }

public var V_ASN1_CONSTRUCTED: Int32 { get }
public var V_ASN1_PRIMITIVE_TAG: Int32 { get }
public var V_ASN1_PRIMATIVE_TAG: Int32 { get }

public var V_ASN1_APP_CHOOSE: Int32 { get } /* let the recipient choose */
public var V_ASN1_OTHER: Int32 { get } /* used in ASN1_TYPE */
public var V_ASN1_ANY: Int32 { get } /* used in ASN1 template code */

public var V_ASN1_NEG: Int32 { get } /* negative flag */

public var V_ASN1_UNDEF: Int32 { get }
public var V_ASN1_EOC: Int32 { get }
public var V_ASN1_BOOLEAN: Int32 { get } /**/
public var V_ASN1_INTEGER: Int32 { get }

public var V_ASN1_BIT_STRING: Int32 { get }
public var V_ASN1_OCTET_STRING: Int32 { get }
public var V_ASN1_NULL: Int32 { get }
public var V_ASN1_OBJECT: Int32 { get }
public var V_ASN1_OBJECT_DESCRIPTOR: Int32 { get }
public var V_ASN1_EXTERNAL: Int32 { get }
public var V_ASN1_REAL: Int32 { get }
public var V_ASN1_ENUMERATED: Int32 { get }

public var V_ASN1_UTF8STRING: Int32 { get }
public var V_ASN1_SEQUENCE: Int32 { get }
public var V_ASN1_SET: Int32 { get }
public var V_ASN1_NUMERICSTRING: Int32 { get } /**/
public var V_ASN1_PRINTABLESTRING: Int32 { get }
public var V_ASN1_T61STRING: Int32 { get }
public var V_ASN1_TELETEXSTRING: Int32 { get } /* alias */
public var V_ASN1_VIDEOTEXSTRING: Int32 { get } /**/
public var V_ASN1_IA5STRING: Int32 { get }
public var V_ASN1_UTCTIME: Int32 { get }
public var V_ASN1_GENERALIZEDTIME: Int32 { get } /**/
public var V_ASN1_GRAPHICSTRING: Int32 { get } /**/
public var V_ASN1_ISO64STRING: Int32 { get } /**/
public var V_ASN1_VISIBLESTRING: Int32 { get } /* alias */
public var V_ASN1_GENERALSTRING: Int32 { get } /**/
public var V_ASN1_UNIVERSALSTRING: Int32 { get } /**/
public var V_ASN1_BMPSTRING: Int32 { get }
/* For use with d2i_ASN1_type_bytes() */
public var B_ASN1_NUMERICSTRING: Int32 { get }
public var B_ASN1_PRINTABLESTRING: Int32 { get }
public var B_ASN1_T61STRING: Int32 { get }
public var B_ASN1_TELETEXSTRING: Int32 { get }
public var B_ASN1_VIDEOTEXSTRING: Int32 { get }
public var B_ASN1_IA5STRING: Int32 { get }
public var B_ASN1_GRAPHICSTRING: Int32 { get }
public var B_ASN1_ISO64STRING: Int32 { get }
public var B_ASN1_VISIBLESTRING: Int32 { get }
public var B_ASN1_GENERALSTRING: Int32 { get }
public var B_ASN1_UNIVERSALSTRING: Int32 { get }
public var B_ASN1_OCTET_STRING: Int32 { get }
public var B_ASN1_BIT_STRING: Int32 { get }
public var B_ASN1_BMPSTRING: Int32 { get }
public var B_ASN1_UNKNOWN: Int32 { get }
public var B_ASN1_UTF8STRING: Int32 { get }
public var B_ASN1_UTCTIME: Int32 { get }
public var B_ASN1_GENERALIZEDTIME: Int32 { get }
public var B_ASN1_SEQUENCE: Int32 { get }
/* For use with ASN1_mbstring_copy() */
public var MBSTRING_FLAG: Int32 { get }
public var MBSTRING_UTF8: Int32 { get }

public var SMIME_OLDMIME: Int32 { get }
public var SMIME_CRLFEOL: Int32 { get }
public var SMIME_STREAM: Int32 { get }

public struct stack_st_X509_ALGOR {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* filled in by mkstack.pl */
/* nothing, no longer needed */

/*
 * We MUST make sure that, except for constness, asn1_ctx_st and
 * asn1_const_ctx are exactly the same.  Fortunately, as soon as the old ASN1
 * parsing macros are gone, we can throw this away as well...
 */
public struct asn1_ctx_st {

    public var p: UnsafeMutablePointer<UInt8>! /* work char pointer */

    public var eos: Int32 /* end of sequence read for indefinite
                                 * encoding */

    
    public var error: Int32 /* error code to use when returning an error */

    public var inf: Int32 /* constructed if 0x20, indefinite is 0x21 */

    public var tag: Int32 /* tag from last 'get object' */

    public var xclass: Int32 /* class from last 'get object' */

    public var slen: Int /* length of last 'get object' */

    public var max: UnsafeMutablePointer<UInt8>! /* largest value of p allowed */

    public var q: UnsafeMutablePointer<UInt8>! /* temporary variable */

    public var pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>! /* variable */

    public var line: Int32 /* used in error processing */

    public init()

    public init(p: UnsafeMutablePointer<UInt8>!, eos: Int32, error: Int32, inf: Int32, tag: Int32, xclass: Int32, slen: Int, max: UnsafeMutablePointer<UInt8>!, q: UnsafeMutablePointer<UInt8>!, pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, line: Int32)
}
public typealias ASN1_CTX = asn1_ctx_st

public struct asn1_const_ctx_st {

    public var p: UnsafePointer<UInt8>! /* work char pointer */

    public var eos: Int32 /* end of sequence read for indefinite
                                 * encoding */

    
    public var error: Int32 /* error code to use when returning an error */

    public var inf: Int32 /* constructed if 0x20, indefinite is 0x21 */

    public var tag: Int32 /* tag from last 'get object' */

    public var xclass: Int32 /* class from last 'get object' */

    public var slen: Int /* length of last 'get object' */

    public var max: UnsafePointer<UInt8>! /* largest value of p allowed */

    public var q: UnsafePointer<UInt8>! /* temporary variable */

    public var pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>! /* variable */

    public var line: Int32 /* used in error processing */

    public init()

    public init(p: UnsafePointer<UInt8>!, eos: Int32, error: Int32, inf: Int32, tag: Int32, xclass: Int32, slen: Int, max: UnsafePointer<UInt8>!, q: UnsafePointer<UInt8>!, pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, line: Int32)
}
public typealias ASN1_const_CTX = asn1_const_ctx_st

/*
 * These are used internally in the ASN1_OBJECT to keep track of whether the
 * names and data need to be free()ed
 */
public var ASN1_OBJECT_FLAG_DYNAMIC: Int32 { get } /* internal use */
public var ASN1_OBJECT_FLAG_CRITICAL: Int32 { get } /* critical x509v3 object id */
public var ASN1_OBJECT_FLAG_DYNAMIC_STRINGS: Int32 { get } /* internal use */
public var ASN1_OBJECT_FLAG_DYNAMIC_DATA: Int32 { get } /* internal use */
public struct asn1_object_st {

    public var sn: UnsafePointer<Int8>!

    public var ln: UnsafePointer<Int8>!

    public var nid: Int32

    public var length: Int32

    public var data: UnsafePointer<UInt8>! /* data remains const after init */

    public var flags: Int32 /* Should we free this one */

    public init()

    public init(sn: UnsafePointer<Int8>!, ln: UnsafePointer<Int8>!, nid: Int32, length: Int32, data: UnsafePointer<UInt8>!, flags: Int32)
}

public var ASN1_STRING_FLAG_BITS_LEFT: Int32 { get } /* Set if 0x07 has bits left value */
/*
 * This indicates that the ASN1_STRING is not a real value but just a place
 * holder for the location where indefinite length constructed data should be
 * inserted in the memory buffer
 */
public var ASN1_STRING_FLAG_NDEF: Int32 { get }

/*
 * This flag is used by the CMS code to indicate that a string is not
 * complete and is a place holder for content when it had all been accessed.
 * The flag will be reset when content has been written to it.
 */

public var ASN1_STRING_FLAG_CONT: Int32 { get }
/*
 * This flag is used by ASN1 code to indicate an ASN1_STRING is an MSTRING
 * type.
 */
public var ASN1_STRING_FLAG_MSTRING: Int32 { get }
/* This is the base type that holds just about everything :-) */
public struct asn1_string_st {

    public var length: Int32

    public var type: Int32

    public var data: UnsafeMutablePointer<UInt8>!

    /*
     * The value of the following field depends on the type being held.  It
     * is mostly being used for BIT_STRING so if the input data has a
     * non-zero 'unused bits' value, it will be handled correctly
     */
    public var flags: Int

    public init()

    public init(length: Int32, type: Int32, data: UnsafeMutablePointer<UInt8>!, flags: Int)
}

/*
 * ASN1_ENCODING structure: this is used to save the received encoding of an
 * ASN1 type. This is useful to get round problems with invalid encodings
 * which can break signatures.
 */

public struct ASN1_ENCODING_st {

    public var enc: UnsafeMutablePointer<UInt8>! /* DER encoding */

    public var len: Int /* Length of encoding */

    public var modified: Int32 /* set to 1 if 'enc' is invalid */

    public init()

    public init(enc: UnsafeMutablePointer<UInt8>!, len: Int, modified: Int32)
}
public typealias ASN1_ENCODING = ASN1_ENCODING_st

/* Used with ASN1 LONG type: if a long is set to this it is omitted */
public var ASN1_LONG_UNDEF: Int { get }

public var STABLE_FLAGS_MALLOC: Int32 { get }
public var STABLE_NO_MASK: Int32 { get }

public struct asn1_string_table_st {

    public var nid: Int32

    public var minsize: Int

    public var maxsize: Int

    public var mask: UInt

    public var flags: UInt

    public init()

    public init(nid: Int32, minsize: Int, maxsize: Int, mask: UInt, flags: UInt)
}
public typealias ASN1_STRING_TABLE = asn1_string_table_st

public struct stack_st_ASN1_STRING_TABLE {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* size limits: this stuff is taken straight from RFC2459 */

public var ub_name: Int32 { get }
public var ub_common_name: Int32 { get }
public var ub_locality_name: Int32 { get }
public var ub_state_name: Int32 { get }
public var ub_organization_name: Int32 { get }
public var ub_organization_unit_name: Int32 { get }
public var ub_title: Int32 { get }
public var ub_email_address: Int32 { get }

/*
 * Declarations for template structures: for full definitions see asn1t.h
 */

/* This is just an opaque pointer */

/* Declare ASN1 functions: the implement macro in in asn1t.h */

public typealias d2i_of_void = (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?

public typealias i2d_of_void = (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32

/*-
 * The following macros and typedefs allow an ASN1_ITEM
 * to be embedded in a structure and referenced. Since
 * the ASN1_ITEM pointers need to be globally accessible
 * (possibly from shared libraries) they may exist in
 * different forms. On platforms that support it the
 * ASN1_ITEM structure itself will be globally exported.
 * Other platforms will export a function that returns
 * an ASN1_ITEM pointer.
 *
 * To handle both cases transparently the macros below
 * should be used instead of hard coding an ASN1_ITEM
 * pointer in a structure.
 *
 * The structure will look like this:
 *
 * typedef struct SOMETHING_st {
 *      ...
 *      ASN1_ITEM_EXP *iptr;
 *      ...
 * } SOMETHING;
 *
 * It would be initialised as e.g.:
 *
 * SOMETHING somevar = {...,ASN1_ITEM_ref(X509),...};
 *
 * and the actual pointer extracted with:
 *
 * const ASN1_ITEM *it = ASN1_ITEM_ptr(somevar.iptr);
 *
 * Finally an ASN1_ITEM pointer can be extracted from an
 * appropriate reference with: ASN1_ITEM_rptr(X509). This
 * would be used when a function takes an ASN1_ITEM * argument.
 *
 */

/* ASN1_ITEM pointer exported type */

/* Macro to obtain ASN1_ITEM pointer from exported type */

/* Macro to include ASN1_ITEM pointer from base type */

/*
 * Platforms that can't easily handle shared global variables are declared as
 * functions returning ASN1_ITEM pointers.
 */

/* ASN1_ITEM pointer exported type */

/* Macro to obtain ASN1_ITEM pointer from exported type */

/* Macro to include ASN1_ITEM pointer from base type */

/* Parameters used by ASN1_STRING_print_ex() */

/*
 * These determine which characters to escape: RFC2253 special characters,
 * control characters and MSB set characters
 */

public var ASN1_STRFLGS_ESC_2253: Int32 { get }
public var ASN1_STRFLGS_ESC_CTRL: Int32 { get }
public var ASN1_STRFLGS_ESC_MSB: Int32 { get }

/*
 * This flag determines how we do escaping: normally RC2253 backslash only,
 * set this to use backslash and quote.
 */

public var ASN1_STRFLGS_ESC_QUOTE: Int32 { get }

/* These three flags are internal use only. */

/* Character is a valid PrintableString character */
public var CHARTYPE_PRINTABLESTRING: Int32 { get }
/* Character needs escaping if it is the first character */
public var CHARTYPE_FIRST_ESC_2253: Int32 { get }
/* Character needs escaping if it is the last character */
public var CHARTYPE_LAST_ESC_2253: Int32 { get }

/*
 * NB the internal flags are safely reused below by flags handled at the top
 * level.
 */

/*
 * If this is set we convert all character strings to UTF8 first
 */

public var ASN1_STRFLGS_UTF8_CONVERT: Int32 { get }

/*
 * If this is set we don't attempt to interpret content: just assume all
 * strings are 1 byte per character. This will produce some pretty odd
 * looking output!
 */

public var ASN1_STRFLGS_IGNORE_TYPE: Int32 { get }

/* If this is set we include the string type in the output */
public var ASN1_STRFLGS_SHOW_TYPE: Int32 { get }

/*
 * This determines which strings to display and which to 'dump' (hex dump of
 * content octets or DER encoding). We can only dump non character strings or
 * everything. If we don't dump 'unknown' they are interpreted as character
 * strings with 1 octet per character and are subject to the usual escaping
 * options.
 */

public var ASN1_STRFLGS_DUMP_ALL: Int32 { get }
public var ASN1_STRFLGS_DUMP_UNKNOWN: Int32 { get }

/*
 * These determine what 'dumping' does, we can dump the content octets or the
 * DER encoding: both use the RFC2253 #XXXXX notation.
 */

public var ASN1_STRFLGS_DUMP_DER: Int32 { get }

/*
 * All the string flags consistent with RFC2253, escaping control characters
 * isn't essential in RFC2253 but it is advisable anyway.
 */

public struct stack_st_ASN1_INTEGER {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct stack_st_ASN1_GENERALSTRING {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct asn1_type_st {

    
    public struct __Unnamed_union_value {

        public var ptr: UnsafeMutablePointer<Int8>!

        public var boolean: ASN1_BOOLEAN

        public var asn1_string: UnsafeMutablePointer<ASN1_STRING>!

        public var object: UnsafeMutablePointer<ASN1_OBJECT>!

        public var integer: UnsafeMutablePointer<ASN1_INTEGER>!

        public var enumerated: UnsafeMutablePointer<ASN1_ENUMERATED>!

        public var bit_string: UnsafeMutablePointer<ASN1_BIT_STRING>!

        public var octet_string: UnsafeMutablePointer<ASN1_OCTET_STRING>!

        public var printablestring: UnsafeMutablePointer<ASN1_PRINTABLESTRING>!

        public var t61string: UnsafeMutablePointer<ASN1_T61STRING>!

        public var ia5string: UnsafeMutablePointer<ASN1_IA5STRING>!

        public var generalstring: UnsafeMutablePointer<ASN1_GENERALSTRING>!

        public var bmpstring: UnsafeMutablePointer<ASN1_BMPSTRING>!

        public var universalstring: UnsafeMutablePointer<ASN1_UNIVERSALSTRING>!

        public var utctime: UnsafeMutablePointer<ASN1_UTCTIME>!

        public var generalizedtime: UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!

        public var visiblestring: UnsafeMutablePointer<ASN1_VISIBLESTRING>!

        public var utf8string: UnsafeMutablePointer<ASN1_UTF8STRING>!

        /*
         * set and sequence are left complete and still contain the set or
         * sequence bytes
         */
        public var set: UnsafeMutablePointer<ASN1_STRING>!

        public var sequence: UnsafeMutablePointer<ASN1_STRING>!

        public var asn1_value: OpaquePointer!

        public init(ptr: UnsafeMutablePointer<Int8>!)

        public init(boolean: ASN1_BOOLEAN)

        public init(asn1_string: UnsafeMutablePointer<ASN1_STRING>!)

        public init(object: UnsafeMutablePointer<ASN1_OBJECT>!)

        public init(integer: UnsafeMutablePointer<ASN1_INTEGER>!)

        public init(enumerated: UnsafeMutablePointer<ASN1_ENUMERATED>!)

        public init(bit_string: UnsafeMutablePointer<ASN1_BIT_STRING>!)

        public init(octet_string: UnsafeMutablePointer<ASN1_OCTET_STRING>!)

        public init(printablestring: UnsafeMutablePointer<ASN1_PRINTABLESTRING>!)

        public init(t61string: UnsafeMutablePointer<ASN1_T61STRING>!)

        public init(ia5string: UnsafeMutablePointer<ASN1_IA5STRING>!)

        public init(generalstring: UnsafeMutablePointer<ASN1_GENERALSTRING>!)

        public init(bmpstring: UnsafeMutablePointer<ASN1_BMPSTRING>!)

        public init(universalstring: UnsafeMutablePointer<ASN1_UNIVERSALSTRING>!)

        public init(utctime: UnsafeMutablePointer<ASN1_UTCTIME>!)

        public init(generalizedtime: UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!)

        public init(visiblestring: UnsafeMutablePointer<ASN1_VISIBLESTRING>!)

        public init(utf8string: UnsafeMutablePointer<ASN1_UTF8STRING>!)

        public init(set: UnsafeMutablePointer<ASN1_STRING>!)

        public init(sequence: UnsafeMutablePointer<ASN1_STRING>!)

        public init(asn1_value: OpaquePointer!)

        public init()
    }

    public var type: Int32

    public var value: asn1_type_st.__Unnamed_union_value

    public init()

    public init(type: Int32, value: asn1_type_st.__Unnamed_union_value)
}
public typealias ASN1_TYPE = asn1_type_st

public struct stack_st_ASN1_TYPE {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public typealias ASN1_SEQUENCE_ANY = stack_st_ASN1_TYPE

public func d2i_ASN1_SEQUENCE_ANY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_SEQUENCE_ANY>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_SEQUENCE_ANY>!

public func i2d_ASN1_SEQUENCE_ANY(_ a: UnsafePointer<ASN1_SEQUENCE_ANY>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func d2i_ASN1_SET_ANY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_SEQUENCE_ANY>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_SEQUENCE_ANY>!

public func i2d_ASN1_SET_ANY(_ a: UnsafePointer<ASN1_SEQUENCE_ANY>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public struct NETSCAPE_X509_st {

    public var header: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public var cert: UnsafeMutablePointer<X509>!

    public init()

    public init(header: UnsafeMutablePointer<ASN1_OCTET_STRING>!, cert: UnsafeMutablePointer<X509>!)
}
public typealias NETSCAPE_X509 = NETSCAPE_X509_st

/* This is used to contain a list of bit names */
public struct BIT_STRING_BITNAME_st {

    public var bitnum: Int32

    public var lname: UnsafePointer<Int8>!

    public var sname: UnsafePointer<Int8>!

    public init()

    public init(bitnum: Int32, lname: UnsafePointer<Int8>!, sname: UnsafePointer<Int8>!)
}
public typealias BIT_STRING_BITNAME = BIT_STRING_BITNAME_st

/* Macros for string operations */

/* for the is_set parameter to i2d_ASN1_SET */
public var IS_SEQUENCE: Int32 { get }
public var IS_SET: Int32 { get }

public func ASN1_TYPE_new() -> UnsafeMutablePointer<ASN1_TYPE>!

public func ASN1_TYPE_free(_ a: UnsafeMutablePointer<ASN1_TYPE>!)

public func d2i_ASN1_TYPE(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_TYPE>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_TYPE>!

public func i2d_ASN1_TYPE(_ a: UnsafeMutablePointer<ASN1_TYPE>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_TYPE_get(_ a: UnsafeMutablePointer<ASN1_TYPE>!) -> Int32
public func ASN1_TYPE_set(_ a: UnsafeMutablePointer<ASN1_TYPE>!, _ type: Int32, _ value: UnsafeMutableRawPointer!)
public func ASN1_TYPE_set1(_ a: UnsafeMutablePointer<ASN1_TYPE>!, _ type: Int32, _ value: UnsafeRawPointer!) -> Int32
public func ASN1_TYPE_cmp(_ a: UnsafePointer<ASN1_TYPE>!, _ b: UnsafePointer<ASN1_TYPE>!) -> Int32

public func ASN1_OBJECT_new() -> UnsafeMutablePointer<ASN1_OBJECT>!
public func ASN1_OBJECT_free(_ a: UnsafeMutablePointer<ASN1_OBJECT>!)
public func i2d_ASN1_OBJECT(_ a: UnsafeMutablePointer<ASN1_OBJECT>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func c2i_ASN1_OBJECT(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OBJECT>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<ASN1_OBJECT>!
public func d2i_ASN1_OBJECT(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OBJECT>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<ASN1_OBJECT>!

public struct stack_st_ASN1_OBJECT {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public func ASN1_STRING_new() -> UnsafeMutablePointer<ASN1_STRING>!
public func ASN1_STRING_free(_ a: UnsafeMutablePointer<ASN1_STRING>!)
public func ASN1_STRING_clear_free(_ a: UnsafeMutablePointer<ASN1_STRING>!)
public func ASN1_STRING_copy(_ dst: UnsafeMutablePointer<ASN1_STRING>!, _ str: UnsafePointer<ASN1_STRING>!) -> Int32
public func ASN1_STRING_dup(_ a: UnsafePointer<ASN1_STRING>!) -> UnsafeMutablePointer<ASN1_STRING>!
public func ASN1_STRING_type_new(_ type: Int32) -> UnsafeMutablePointer<ASN1_STRING>!
public func ASN1_STRING_cmp(_ a: UnsafePointer<ASN1_STRING>!, _ b: UnsafePointer<ASN1_STRING>!) -> Int32
/*
 * Since this is used to store all sorts of things, via macros, for now,
 * make its data void *
 */
public func ASN1_STRING_set(_ str: UnsafeMutablePointer<ASN1_STRING>!, _ data: UnsafeRawPointer!, _ len: Int32) -> Int32
public func ASN1_STRING_set0(_ str: UnsafeMutablePointer<ASN1_STRING>!, _ data: UnsafeMutableRawPointer!, _ len: Int32)
public func ASN1_STRING_length(_ x: UnsafePointer<ASN1_STRING>!) -> Int32
public func ASN1_STRING_length_set(_ x: UnsafeMutablePointer<ASN1_STRING>!, _ n: Int32)
public func ASN1_STRING_type(_ x: UnsafeMutablePointer<ASN1_STRING>!) -> Int32
public func ASN1_STRING_data(_ x: UnsafeMutablePointer<ASN1_STRING>!) -> UnsafeMutablePointer<UInt8>!

public func ASN1_BIT_STRING_new() -> UnsafeMutablePointer<ASN1_BIT_STRING>!

public func ASN1_BIT_STRING_free(_ a: UnsafeMutablePointer<ASN1_BIT_STRING>!)

public func d2i_ASN1_BIT_STRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_BIT_STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_BIT_STRING>!

public func i2d_ASN1_BIT_STRING(_ a: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func i2c_ASN1_BIT_STRING(_ a: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func c2i_ASN1_BIT_STRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_BIT_STRING>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<ASN1_BIT_STRING>!
public func ASN1_BIT_STRING_set(_ a: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ d: UnsafeMutablePointer<UInt8>!, _ length: Int32) -> Int32
public func ASN1_BIT_STRING_set_bit(_ a: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ n: Int32, _ value: Int32) -> Int32
public func ASN1_BIT_STRING_get_bit(_ a: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ n: Int32) -> Int32
public func ASN1_BIT_STRING_check(_ a: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ flags: UnsafeMutablePointer<UInt8>!, _ flags_len: Int32) -> Int32

public func ASN1_BIT_STRING_name_print(_ out: UnsafeMutablePointer<BIO>!, _ bs: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ tbl: UnsafeMutablePointer<BIT_STRING_BITNAME>!, _ indent: Int32) -> Int32

public func ASN1_BIT_STRING_num_asc(_ name: UnsafeMutablePointer<Int8>!, _ tbl: UnsafeMutablePointer<BIT_STRING_BITNAME>!) -> Int32
public func ASN1_BIT_STRING_set_asc(_ bs: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ name: UnsafeMutablePointer<Int8>!, _ value: Int32, _ tbl: UnsafeMutablePointer<BIT_STRING_BITNAME>!) -> Int32

public func i2d_ASN1_BOOLEAN(_ a: Int32, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_ASN1_BOOLEAN(_ a: UnsafeMutablePointer<Int32>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> Int32

public func ASN1_INTEGER_new() -> UnsafeMutablePointer<ASN1_INTEGER>!

public func ASN1_INTEGER_free(_ a: UnsafeMutablePointer<ASN1_INTEGER>!)

public func d2i_ASN1_INTEGER(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_INTEGER>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_INTEGER>!

public func i2d_ASN1_INTEGER(_ a: UnsafeMutablePointer<ASN1_INTEGER>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func i2c_ASN1_INTEGER(_ a: UnsafeMutablePointer<ASN1_INTEGER>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func c2i_ASN1_INTEGER(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_INTEGER>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<ASN1_INTEGER>!
public func d2i_ASN1_UINTEGER(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_INTEGER>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<ASN1_INTEGER>!
public func ASN1_INTEGER_dup(_ x: UnsafePointer<ASN1_INTEGER>!) -> UnsafeMutablePointer<ASN1_INTEGER>!
public func ASN1_INTEGER_cmp(_ x: UnsafePointer<ASN1_INTEGER>!, _ y: UnsafePointer<ASN1_INTEGER>!) -> Int32

public func ASN1_ENUMERATED_new() -> UnsafeMutablePointer<ASN1_ENUMERATED>!

public func ASN1_ENUMERATED_free(_ a: UnsafeMutablePointer<ASN1_ENUMERATED>!)

public func d2i_ASN1_ENUMERATED(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_ENUMERATED>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_ENUMERATED>!

public func i2d_ASN1_ENUMERATED(_ a: UnsafeMutablePointer<ASN1_ENUMERATED>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_UTCTIME_check(_ a: UnsafePointer<ASN1_UTCTIME>!) -> Int32
public func ASN1_UTCTIME_set(_ s: UnsafeMutablePointer<ASN1_UTCTIME>!, _ t: time_t) -> UnsafeMutablePointer<ASN1_UTCTIME>!
public func ASN1_UTCTIME_adj(_ s: UnsafeMutablePointer<ASN1_UTCTIME>!, _ t: time_t, _ offset_day: Int32, _ offset_sec: Int) -> UnsafeMutablePointer<ASN1_UTCTIME>!
public func ASN1_UTCTIME_set_string(_ s: UnsafeMutablePointer<ASN1_UTCTIME>!, _ str: UnsafePointer<Int8>!) -> Int32
public func ASN1_UTCTIME_cmp_time_t(_ s: UnsafePointer<ASN1_UTCTIME>!, _ t: time_t) -> Int32

public func ASN1_GENERALIZEDTIME_check(_ a: UnsafePointer<ASN1_GENERALIZEDTIME>!) -> Int32
public func ASN1_GENERALIZEDTIME_set(_ s: UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!, _ t: time_t) -> UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!
public func ASN1_GENERALIZEDTIME_adj(_ s: UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!, _ t: time_t, _ offset_day: Int32, _ offset_sec: Int) -> UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!
public func ASN1_GENERALIZEDTIME_set_string(_ s: UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!, _ str: UnsafePointer<Int8>!) -> Int32
public func ASN1_TIME_diff(_ pday: UnsafeMutablePointer<Int32>!, _ psec: UnsafeMutablePointer<Int32>!, _ from: UnsafePointer<ASN1_TIME>!, _ to: UnsafePointer<ASN1_TIME>!) -> Int32

public func ASN1_OCTET_STRING_new() -> UnsafeMutablePointer<ASN1_OCTET_STRING>!

public func ASN1_OCTET_STRING_free(_ a: UnsafeMutablePointer<ASN1_OCTET_STRING>!)

public func d2i_ASN1_OCTET_STRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OCTET_STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_OCTET_STRING>!

public func i2d_ASN1_OCTET_STRING(_ a: UnsafeMutablePointer<ASN1_OCTET_STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_OCTET_STRING_dup(_ a: UnsafePointer<ASN1_OCTET_STRING>!) -> UnsafeMutablePointer<ASN1_OCTET_STRING>!
public func ASN1_OCTET_STRING_cmp(_ a: UnsafePointer<ASN1_OCTET_STRING>!, _ b: UnsafePointer<ASN1_OCTET_STRING>!) -> Int32
public func ASN1_OCTET_STRING_set(_ str: UnsafeMutablePointer<ASN1_OCTET_STRING>!, _ data: UnsafePointer<UInt8>!, _ len: Int32) -> Int32

public func ASN1_VISIBLESTRING_new() -> UnsafeMutablePointer<ASN1_VISIBLESTRING>!

public func ASN1_VISIBLESTRING_free(_ a: UnsafeMutablePointer<ASN1_VISIBLESTRING>!)

public func d2i_ASN1_VISIBLESTRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_VISIBLESTRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_VISIBLESTRING>!

public func i2d_ASN1_VISIBLESTRING(_ a: UnsafeMutablePointer<ASN1_VISIBLESTRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_UNIVERSALSTRING_new() -> UnsafeMutablePointer<ASN1_UNIVERSALSTRING>!

public func ASN1_UNIVERSALSTRING_free(_ a: UnsafeMutablePointer<ASN1_UNIVERSALSTRING>!)

public func d2i_ASN1_UNIVERSALSTRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_UNIVERSALSTRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_UNIVERSALSTRING>!

public func i2d_ASN1_UNIVERSALSTRING(_ a: UnsafeMutablePointer<ASN1_UNIVERSALSTRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_UTF8STRING_new() -> UnsafeMutablePointer<ASN1_UTF8STRING>!

public func ASN1_UTF8STRING_free(_ a: UnsafeMutablePointer<ASN1_UTF8STRING>!)

public func d2i_ASN1_UTF8STRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_UTF8STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_UTF8STRING>!

public func i2d_ASN1_UTF8STRING(_ a: UnsafeMutablePointer<ASN1_UTF8STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_NULL_new() -> UnsafeMutablePointer<ASN1_NULL>!

public func ASN1_NULL_free(_ a: UnsafeMutablePointer<ASN1_NULL>!)

public func d2i_ASN1_NULL(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_NULL>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_NULL>!

public func i2d_ASN1_NULL(_ a: UnsafeMutablePointer<ASN1_NULL>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_BMPSTRING_new() -> UnsafeMutablePointer<ASN1_BMPSTRING>!

public func ASN1_BMPSTRING_free(_ a: UnsafeMutablePointer<ASN1_BMPSTRING>!)

public func d2i_ASN1_BMPSTRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_BMPSTRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_BMPSTRING>!

public func i2d_ASN1_BMPSTRING(_ a: UnsafeMutablePointer<ASN1_BMPSTRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func UTF8_getc(_ str: UnsafePointer<UInt8>!, _ len: Int32, _ val: UnsafeMutablePointer<UInt>!) -> Int32
public func UTF8_putc(_ str: UnsafeMutablePointer<UInt8>!, _ len: Int32, _ value: UInt) -> Int32

public func ASN1_PRINTABLE_new() -> UnsafeMutablePointer<ASN1_STRING>!

public func ASN1_PRINTABLE_free(_ a: UnsafeMutablePointer<ASN1_STRING>!)

public func d2i_ASN1_PRINTABLE(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_STRING>!

public func i2d_ASN1_PRINTABLE(_ a: UnsafeMutablePointer<ASN1_STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func DIRECTORYSTRING_new() -> UnsafeMutablePointer<ASN1_STRING>!

public func DIRECTORYSTRING_free(_ a: UnsafeMutablePointer<ASN1_STRING>!)

public func d2i_DIRECTORYSTRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_STRING>!

public func i2d_DIRECTORYSTRING(_ a: UnsafeMutablePointer<ASN1_STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func DISPLAYTEXT_new() -> UnsafeMutablePointer<ASN1_STRING>!

public func DISPLAYTEXT_free(_ a: UnsafeMutablePointer<ASN1_STRING>!)

public func d2i_DISPLAYTEXT(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_STRING>!

public func i2d_DISPLAYTEXT(_ a: UnsafeMutablePointer<ASN1_STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_PRINTABLESTRING_new() -> UnsafeMutablePointer<ASN1_PRINTABLESTRING>!

public func ASN1_PRINTABLESTRING_free(_ a: UnsafeMutablePointer<ASN1_PRINTABLESTRING>!)

public func d2i_ASN1_PRINTABLESTRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_PRINTABLESTRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_PRINTABLESTRING>!

public func i2d_ASN1_PRINTABLESTRING(_ a: UnsafeMutablePointer<ASN1_PRINTABLESTRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_T61STRING_new() -> UnsafeMutablePointer<ASN1_T61STRING>!

public func ASN1_T61STRING_free(_ a: UnsafeMutablePointer<ASN1_T61STRING>!)

public func d2i_ASN1_T61STRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_T61STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_T61STRING>!

public func i2d_ASN1_T61STRING(_ a: UnsafeMutablePointer<ASN1_T61STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_IA5STRING_new() -> UnsafeMutablePointer<ASN1_IA5STRING>!

public func ASN1_IA5STRING_free(_ a: UnsafeMutablePointer<ASN1_IA5STRING>!)

public func d2i_ASN1_IA5STRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_IA5STRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_IA5STRING>!

public func i2d_ASN1_IA5STRING(_ a: UnsafeMutablePointer<ASN1_IA5STRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_GENERALSTRING_new() -> UnsafeMutablePointer<ASN1_GENERALSTRING>!

public func ASN1_GENERALSTRING_free(_ a: UnsafeMutablePointer<ASN1_GENERALSTRING>!)

public func d2i_ASN1_GENERALSTRING(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_GENERALSTRING>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_GENERALSTRING>!

public func i2d_ASN1_GENERALSTRING(_ a: UnsafeMutablePointer<ASN1_GENERALSTRING>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_UTCTIME_new() -> UnsafeMutablePointer<ASN1_UTCTIME>!

public func ASN1_UTCTIME_free(_ a: UnsafeMutablePointer<ASN1_UTCTIME>!)

public func d2i_ASN1_UTCTIME(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_UTCTIME>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_UTCTIME>!

public func i2d_ASN1_UTCTIME(_ a: UnsafeMutablePointer<ASN1_UTCTIME>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_GENERALIZEDTIME_new() -> UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!

public func ASN1_GENERALIZEDTIME_free(_ a: UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!)

public func d2i_ASN1_GENERALIZEDTIME(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_GENERALIZEDTIME>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!

public func i2d_ASN1_GENERALIZEDTIME(_ a: UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_TIME_new() -> UnsafeMutablePointer<ASN1_TIME>!

public func ASN1_TIME_free(_ a: UnsafeMutablePointer<ASN1_TIME>!)

public func d2i_ASN1_TIME(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_TIME>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ASN1_TIME>!

public func i2d_ASN1_TIME(_ a: UnsafeMutablePointer<ASN1_TIME>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_TIME_set(_ s: UnsafeMutablePointer<ASN1_TIME>!, _ t: time_t) -> UnsafeMutablePointer<ASN1_TIME>!
public func ASN1_TIME_adj(_ s: UnsafeMutablePointer<ASN1_TIME>!, _ t: time_t, _ offset_day: Int32, _ offset_sec: Int) -> UnsafeMutablePointer<ASN1_TIME>!
public func ASN1_TIME_check(_ t: UnsafeMutablePointer<ASN1_TIME>!) -> Int32
public func ASN1_TIME_to_generalizedtime(_ t: UnsafeMutablePointer<ASN1_TIME>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_GENERALIZEDTIME>?>!) -> UnsafeMutablePointer<ASN1_GENERALIZEDTIME>!
public func ASN1_TIME_set_string(_ s: UnsafeMutablePointer<ASN1_TIME>!, _ str: UnsafePointer<Int8>!) -> Int32

public func i2d_ASN1_SET(_ a: UnsafeMutablePointer<stack_st_OPENSSL_BLOCK>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ ex_tag: Int32, _ ex_class: Int32, _ is_set: Int32) -> Int32
public func d2i_ASN1_SET(_ a: UnsafeMutablePointer<UnsafeMutablePointer<stack_st_OPENSSL_BLOCK>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int, _ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!, _ free_func: (@escaping @convention(c) (OPENSSL_BLOCK?) -> Swift.Void)!, _ ex_tag: Int32, _ ex_class: Int32) -> UnsafeMutablePointer<stack_st_OPENSSL_BLOCK>!

public func i2a_ASN1_INTEGER(_ bp: UnsafeMutablePointer<BIO>!, _ a: UnsafeMutablePointer<ASN1_INTEGER>!) -> Int32
public func a2i_ASN1_INTEGER(_ bp: UnsafeMutablePointer<BIO>!, _ bs: UnsafeMutablePointer<ASN1_INTEGER>!, _ buf: UnsafeMutablePointer<Int8>!, _ size: Int32) -> Int32
public func i2a_ASN1_ENUMERATED(_ bp: UnsafeMutablePointer<BIO>!, _ a: UnsafeMutablePointer<ASN1_ENUMERATED>!) -> Int32
public func a2i_ASN1_ENUMERATED(_ bp: UnsafeMutablePointer<BIO>!, _ bs: UnsafeMutablePointer<ASN1_ENUMERATED>!, _ buf: UnsafeMutablePointer<Int8>!, _ size: Int32) -> Int32
public func i2a_ASN1_OBJECT(_ bp: UnsafeMutablePointer<BIO>!, _ a: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32
public func a2i_ASN1_STRING(_ bp: UnsafeMutablePointer<BIO>!, _ bs: UnsafeMutablePointer<ASN1_STRING>!, _ buf: UnsafeMutablePointer<Int8>!, _ size: Int32) -> Int32
public func i2a_ASN1_STRING(_ bp: UnsafeMutablePointer<BIO>!, _ a: UnsafeMutablePointer<ASN1_STRING>!, _ type: Int32) -> Int32

public func i2t_ASN1_OBJECT(_ buf: UnsafeMutablePointer<Int8>!, _ buf_len: Int32, _ a: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32

public func a2d_ASN1_OBJECT(_ out: UnsafeMutablePointer<UInt8>!, _ olen: Int32, _ buf: UnsafePointer<Int8>!, _ num: Int32) -> Int32
public func ASN1_OBJECT_create(_ nid: Int32, _ data: UnsafeMutablePointer<UInt8>!, _ len: Int32, _ sn: UnsafePointer<Int8>!, _ ln: UnsafePointer<Int8>!) -> UnsafeMutablePointer<ASN1_OBJECT>!

public func ASN1_INTEGER_set(_ a: UnsafeMutablePointer<ASN1_INTEGER>!, _ v: Int) -> Int32
public func ASN1_INTEGER_get(_ a: UnsafePointer<ASN1_INTEGER>!) -> Int
public func BN_to_ASN1_INTEGER(_ bn: UnsafePointer<BIGNUM>!, _ ai: UnsafeMutablePointer<ASN1_INTEGER>!) -> UnsafeMutablePointer<ASN1_INTEGER>!
public func ASN1_INTEGER_to_BN(_ ai: UnsafePointer<ASN1_INTEGER>!, _ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!

public func ASN1_ENUMERATED_set(_ a: UnsafeMutablePointer<ASN1_ENUMERATED>!, _ v: Int) -> Int32
public func ASN1_ENUMERATED_get(_ a: UnsafeMutablePointer<ASN1_ENUMERATED>!) -> Int
public func BN_to_ASN1_ENUMERATED(_ bn: UnsafeMutablePointer<BIGNUM>!, _ ai: UnsafeMutablePointer<ASN1_ENUMERATED>!) -> UnsafeMutablePointer<ASN1_ENUMERATED>!
public func ASN1_ENUMERATED_to_BN(_ ai: UnsafeMutablePointer<ASN1_ENUMERATED>!, _ bn: UnsafeMutablePointer<BIGNUM>!) -> UnsafeMutablePointer<BIGNUM>!

/* General */
/* given a string, return the correct type, max is the maximum length */
public func ASN1_PRINTABLE_type(_ s: UnsafePointer<UInt8>!, _ max: Int32) -> Int32

public func i2d_ASN1_bytes(_ a: UnsafeMutablePointer<ASN1_STRING>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ tag: Int32, _ xclass: Int32) -> Int32
public func d2i_ASN1_bytes(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int, _ Ptag: Int32, _ Pclass: Int32) -> UnsafeMutablePointer<ASN1_STRING>!
public func ASN1_tag2bit(_ tag: Int32) -> UInt
/* type is one or more of the B_ASN1_ values. */
public func d2i_ASN1_type_bytes(_ a: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int, _ type: Int32) -> UnsafeMutablePointer<ASN1_STRING>!

/* PARSING */
public func asn1_Finish(_ c: UnsafeMutablePointer<ASN1_CTX>!) -> Int32
public func asn1_const_Finish(_ c: UnsafeMutablePointer<ASN1_const_CTX>!) -> Int32

/* SPECIALS */
public func ASN1_get_object(_ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ plength: UnsafeMutablePointer<Int>!, _ ptag: UnsafeMutablePointer<Int32>!, _ pclass: UnsafeMutablePointer<Int32>!, _ omax: Int) -> Int32
public func ASN1_check_infinite_end(_ p: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ len: Int) -> Int32
public func ASN1_const_check_infinite_end(_ p: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> Int32
public func ASN1_put_object(_ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ constructed: Int32, _ length: Int32, _ tag: Int32, _ xclass: Int32)
public func ASN1_put_eoc(_ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func ASN1_object_size(_ constructed: Int32, _ length: Int32, _ tag: Int32) -> Int32

/* Used to implement other functions */
public func ASN1_dup(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!, _ x: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!

public func ASN1_item_dup(_ it: OpaquePointer!, _ x: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!

/* ASN1 alloc/free macros for when a type is only used internally */

public func ASN1_d2i_fp(_ xnew: (@escaping @convention(c) () -> UnsafeMutableRawPointer?)!, _ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!, _ in: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutableRawPointer?>!) -> UnsafeMutableRawPointer!

public func ASN1_item_d2i_fp(_ it: OpaquePointer!, _ in: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func ASN1_i2d_fp(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ out: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutableRawPointer!) -> Int32

public func ASN1_item_i2d_fp(_ it: OpaquePointer!, _ out: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutableRawPointer!) -> Int32
public func ASN1_STRING_print_ex_fp(_ fp: UnsafeMutablePointer<FILE>!, _ str: UnsafeMutablePointer<ASN1_STRING>!, _ flags: UInt) -> Int32

public func ASN1_STRING_to_UTF8(_ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ in: UnsafeMutablePointer<ASN1_STRING>!) -> Int32

public func ASN1_d2i_bio(_ xnew: (@escaping @convention(c) () -> UnsafeMutableRawPointer?)!, _ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!, _ in: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutableRawPointer?>!) -> UnsafeMutableRawPointer!

public func ASN1_item_d2i_bio(_ it: OpaquePointer!, _ in: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func ASN1_i2d_bio(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ out: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UInt8>!) -> Int32

public func ASN1_item_i2d_bio(_ it: OpaquePointer!, _ out: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutableRawPointer!) -> Int32
public func ASN1_UTCTIME_print(_ fp: UnsafeMutablePointer<BIO>!, _ a: UnsafePointer<ASN1_UTCTIME>!) -> Int32
public func ASN1_GENERALIZEDTIME_print(_ fp: UnsafeMutablePointer<BIO>!, _ a: UnsafePointer<ASN1_GENERALIZEDTIME>!) -> Int32
public func ASN1_TIME_print(_ fp: UnsafeMutablePointer<BIO>!, _ a: UnsafePointer<ASN1_TIME>!) -> Int32
public func ASN1_STRING_print(_ bp: UnsafeMutablePointer<BIO>!, _ v: UnsafePointer<ASN1_STRING>!) -> Int32
public func ASN1_STRING_print_ex(_ out: UnsafeMutablePointer<BIO>!, _ str: UnsafeMutablePointer<ASN1_STRING>!, _ flags: UInt) -> Int32
public func ASN1_bn_print(_ bp: UnsafeMutablePointer<BIO>!, _ number: UnsafePointer<Int8>!, _ num: UnsafePointer<BIGNUM>!, _ buf: UnsafeMutablePointer<UInt8>!, _ off: Int32) -> Int32
public func ASN1_parse(_ bp: UnsafeMutablePointer<BIO>!, _ pp: UnsafePointer<UInt8>!, _ len: Int, _ indent: Int32) -> Int32
public func ASN1_parse_dump(_ bp: UnsafeMutablePointer<BIO>!, _ pp: UnsafePointer<UInt8>!, _ len: Int, _ indent: Int32, _ dump: Int32) -> Int32

public func ASN1_tag2str(_ tag: Int32) -> UnsafePointer<Int8>!

/* Used to load and write netscape format cert */

public func NETSCAPE_X509_new() -> UnsafeMutablePointer<NETSCAPE_X509>!

public func NETSCAPE_X509_free(_ a: UnsafeMutablePointer<NETSCAPE_X509>!)

public func d2i_NETSCAPE_X509(_ a: UnsafeMutablePointer<UnsafeMutablePointer<NETSCAPE_X509>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<NETSCAPE_X509>!

public func i2d_NETSCAPE_X509(_ a: UnsafeMutablePointer<NETSCAPE_X509>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ASN1_UNIVERSALSTRING_to_string(_ s: UnsafeMutablePointer<ASN1_UNIVERSALSTRING>!) -> Int32

public func ASN1_TYPE_set_octetstring(_ a: UnsafeMutablePointer<ASN1_TYPE>!, _ data: UnsafeMutablePointer<UInt8>!, _ len: Int32) -> Int32
public func ASN1_TYPE_get_octetstring(_ a: UnsafeMutablePointer<ASN1_TYPE>!, _ data: UnsafeMutablePointer<UInt8>!, _ max_len: Int32) -> Int32
public func ASN1_TYPE_set_int_octetstring(_ a: UnsafeMutablePointer<ASN1_TYPE>!, _ num: Int, _ data: UnsafeMutablePointer<UInt8>!, _ len: Int32) -> Int32
public func ASN1_TYPE_get_int_octetstring(_ a: UnsafeMutablePointer<ASN1_TYPE>!, _ num: UnsafeMutablePointer<Int>!, _ data: UnsafeMutablePointer<UInt8>!, _ max_len: Int32) -> Int32

public func ASN1_seq_unpack(_ buf: UnsafePointer<UInt8>!, _ len: Int32, _ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!, _ free_func: (@escaping @convention(c) (OPENSSL_BLOCK?) -> Swift.Void)!) -> UnsafeMutablePointer<stack_st_OPENSSL_BLOCK>!
public func ASN1_seq_pack(_ safes: UnsafeMutablePointer<stack_st_OPENSSL_BLOCK>!, _ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ buf: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ len: UnsafeMutablePointer<Int32>!) -> UnsafeMutablePointer<UInt8>!
public func ASN1_unpack_string(_ oct: UnsafeMutablePointer<ASN1_STRING>!, _ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!) -> UnsafeMutableRawPointer!
public func ASN1_item_unpack(_ oct: UnsafeMutablePointer<ASN1_STRING>!, _ it: OpaquePointer!) -> UnsafeMutableRawPointer!
public func ASN1_pack_string(_ obj: UnsafeMutableRawPointer!, _ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ oct: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OCTET_STRING>?>!) -> UnsafeMutablePointer<ASN1_STRING>!

public func ASN1_item_pack(_ obj: UnsafeMutableRawPointer!, _ it: OpaquePointer!, _ oct: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OCTET_STRING>?>!) -> UnsafeMutablePointer<ASN1_STRING>!

public func ASN1_STRING_set_default_mask(_ mask: UInt)
public func ASN1_STRING_set_default_mask_asc(_ p: UnsafePointer<Int8>!) -> Int32
public func ASN1_STRING_get_default_mask() -> UInt
public func ASN1_mbstring_copy(_ out: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ in: UnsafePointer<UInt8>!, _ len: Int32, _ inform: Int32, _ mask: UInt) -> Int32
public func ASN1_mbstring_ncopy(_ out: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ in: UnsafePointer<UInt8>!, _ len: Int32, _ inform: Int32, _ mask: UInt, _ minsize: Int, _ maxsize: Int) -> Int32

public func ASN1_STRING_set_by_NID(_ out: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_STRING>?>!, _ in: UnsafePointer<UInt8>!, _ inlen: Int32, _ inform: Int32, _ nid: Int32) -> UnsafeMutablePointer<ASN1_STRING>!
public func ASN1_STRING_TABLE_get(_ nid: Int32) -> UnsafeMutablePointer<ASN1_STRING_TABLE>!
public func ASN1_STRING_TABLE_add(_: Int32, _: Int, _: Int, _: UInt, _: UInt) -> Int32
public func ASN1_STRING_TABLE_cleanup()

/* ASN1 template functions */

/* Old API compatible functions */
public func ASN1_item_new(_ it: OpaquePointer!) -> OpaquePointer!
public func ASN1_item_free(_ val: OpaquePointer!, _ it: OpaquePointer!)
public func ASN1_item_d2i(_ val: UnsafeMutablePointer<OpaquePointer?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int, _ it: OpaquePointer!) -> OpaquePointer!
public func ASN1_item_i2d(_ val: OpaquePointer!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ it: OpaquePointer!) -> Int32
public func ASN1_item_ndef_i2d(_ val: OpaquePointer!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ it: OpaquePointer!) -> Int32

public func ASN1_add_oid_module()

public func ASN1_generate_nconf(_ str: UnsafeMutablePointer<Int8>!, _ nconf: UnsafeMutablePointer<CONF>!) -> UnsafeMutablePointer<ASN1_TYPE>!
public func ASN1_generate_v3(_ str: UnsafeMutablePointer<Int8>!, _ cnf: OpaquePointer!) -> UnsafeMutablePointer<ASN1_TYPE>!

/* ASN1 Print flags */

/* Indicate missing OPTIONAL fields */
public var ASN1_PCTX_FLAGS_SHOW_ABSENT: Int32 { get }
/* Mark start and end of SEQUENCE */
public var ASN1_PCTX_FLAGS_SHOW_SEQUENCE: Int32 { get }
/* Mark start and end of SEQUENCE/SET OF */
public var ASN1_PCTX_FLAGS_SHOW_SSOF: Int32 { get }
/* Show the ASN1 type of primitives */
public var ASN1_PCTX_FLAGS_SHOW_TYPE: Int32 { get }
/* Don't show ASN1 type of ANY */
public var ASN1_PCTX_FLAGS_NO_ANY_TYPE: Int32 { get }
/* Don't show ASN1 type of MSTRINGs */
public var ASN1_PCTX_FLAGS_NO_MSTRING_TYPE: Int32 { get }
/* Don't show field names in SEQUENCE */
public var ASN1_PCTX_FLAGS_NO_FIELD_NAME: Int32 { get }
/* Show structure names of each SEQUENCE field */
public var ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME: Int32 { get }
/* Don't show structure name even at top level */
public var ASN1_PCTX_FLAGS_NO_STRUCT_NAME: Int32 { get }

public func ASN1_item_print(_ out: UnsafeMutablePointer<BIO>!, _ ifld: OpaquePointer!, _ indent: Int32, _ it: OpaquePointer!, _ pctx: OpaquePointer!) -> Int32
public func ASN1_PCTX_new() -> OpaquePointer!
public func ASN1_PCTX_free(_ p: OpaquePointer!)
public func ASN1_PCTX_get_flags(_ p: OpaquePointer!) -> UInt
public func ASN1_PCTX_set_flags(_ p: OpaquePointer!, _ flags: UInt)
public func ASN1_PCTX_get_nm_flags(_ p: OpaquePointer!) -> UInt
public func ASN1_PCTX_set_nm_flags(_ p: OpaquePointer!, _ flags: UInt)
public func ASN1_PCTX_get_cert_flags(_ p: OpaquePointer!) -> UInt
public func ASN1_PCTX_set_cert_flags(_ p: OpaquePointer!, _ flags: UInt)
public func ASN1_PCTX_get_oid_flags(_ p: OpaquePointer!) -> UInt
public func ASN1_PCTX_set_oid_flags(_ p: OpaquePointer!, _ flags: UInt)
public func ASN1_PCTX_get_str_flags(_ p: OpaquePointer!) -> UInt
public func ASN1_PCTX_set_str_flags(_ p: OpaquePointer!, _ flags: UInt)

public func BIO_f_asn1() -> UnsafeMutablePointer<BIO_METHOD>!

public func BIO_new_NDEF(_ out: UnsafeMutablePointer<BIO>!, _ val: OpaquePointer!, _ it: OpaquePointer!) -> UnsafeMutablePointer<BIO>!

public func i2d_ASN1_bio_stream(_ out: UnsafeMutablePointer<BIO>!, _ val: OpaquePointer!, _ in: UnsafeMutablePointer<BIO>!, _ flags: Int32, _ it: OpaquePointer!) -> Int32
public func PEM_write_bio_ASN1_stream(_ out: UnsafeMutablePointer<BIO>!, _ val: OpaquePointer!, _ in: UnsafeMutablePointer<BIO>!, _ flags: Int32, _ hdr: UnsafePointer<Int8>!, _ it: OpaquePointer!) -> Int32
public func SMIME_write_ASN1(_ bio: UnsafeMutablePointer<BIO>!, _ val: OpaquePointer!, _ data: UnsafeMutablePointer<BIO>!, _ flags: Int32, _ ctype_nid: Int32, _ econt_nid: Int32, _ mdalgs: UnsafeMutablePointer<stack_st_X509_ALGOR>!, _ it: OpaquePointer!) -> Int32
public func SMIME_read_ASN1(_ bio: UnsafeMutablePointer<BIO>!, _ bcont: UnsafeMutablePointer<UnsafeMutablePointer<BIO>?>!, _ it: OpaquePointer!) -> OpaquePointer!
public func SMIME_crlf_copy(_ in: UnsafeMutablePointer<BIO>!, _ out: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> Int32
public func SMIME_text(_ in: UnsafeMutablePointer<BIO>!, _ out: UnsafeMutablePointer<BIO>!) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_ASN1_strings()

/* Error codes for the ASN1 functions. */

/* Function codes. */
public var ASN1_F_A2D_ASN1_OBJECT: Int32 { get }
public var ASN1_F_A2I_ASN1_ENUMERATED: Int32 { get }
public var ASN1_F_A2I_ASN1_INTEGER: Int32 { get }
public var ASN1_F_A2I_ASN1_STRING: Int32 { get }
public var ASN1_F_APPEND_EXP: Int32 { get }
public var ASN1_F_ASN1_BIT_STRING_SET_BIT: Int32 { get }
public var ASN1_F_ASN1_CB: Int32 { get }
public var ASN1_F_ASN1_CHECK_TLEN: Int32 { get }
public var ASN1_F_ASN1_COLLATE_PRIMITIVE: Int32 { get }
public var ASN1_F_ASN1_COLLECT: Int32 { get }
public var ASN1_F_ASN1_D2I_EX_PRIMITIVE: Int32 { get }
public var ASN1_F_ASN1_D2I_FP: Int32 { get }
public var ASN1_F_ASN1_D2I_READ_BIO: Int32 { get }
public var ASN1_F_ASN1_DIGEST: Int32 { get }
public var ASN1_F_ASN1_DO_ADB: Int32 { get }
public var ASN1_F_ASN1_DUP: Int32 { get }
public var ASN1_F_ASN1_ENUMERATED_SET: Int32 { get }
public var ASN1_F_ASN1_ENUMERATED_TO_BN: Int32 { get }
public var ASN1_F_ASN1_EX_C2I: Int32 { get }
public var ASN1_F_ASN1_FIND_END: Int32 { get }
public var ASN1_F_ASN1_GENERALIZEDTIME_ADJ: Int32 { get }
public var ASN1_F_ASN1_GENERALIZEDTIME_SET: Int32 { get }
public var ASN1_F_ASN1_GENERATE_V3: Int32 { get }
public var ASN1_F_ASN1_GET_OBJECT: Int32 { get }
public var ASN1_F_ASN1_HEADER_NEW: Int32 { get }
public var ASN1_F_ASN1_I2D_BIO: Int32 { get }
public var ASN1_F_ASN1_I2D_FP: Int32 { get }
public var ASN1_F_ASN1_INTEGER_SET: Int32 { get }
public var ASN1_F_ASN1_INTEGER_TO_BN: Int32 { get }
public var ASN1_F_ASN1_ITEM_D2I_FP: Int32 { get }
public var ASN1_F_ASN1_ITEM_DUP: Int32 { get }
public var ASN1_F_ASN1_ITEM_EX_COMBINE_NEW: Int32 { get }
public var ASN1_F_ASN1_ITEM_EX_D2I: Int32 { get }
public var ASN1_F_ASN1_ITEM_I2D_BIO: Int32 { get }
public var ASN1_F_ASN1_ITEM_I2D_FP: Int32 { get }
public var ASN1_F_ASN1_ITEM_PACK: Int32 { get }
public var ASN1_F_ASN1_ITEM_SIGN: Int32 { get }
public var ASN1_F_ASN1_ITEM_SIGN_CTX: Int32 { get }
public var ASN1_F_ASN1_ITEM_UNPACK: Int32 { get }
public var ASN1_F_ASN1_ITEM_VERIFY: Int32 { get }
public var ASN1_F_ASN1_MBSTRING_NCOPY: Int32 { get }
public var ASN1_F_ASN1_OBJECT_NEW: Int32 { get }
public var ASN1_F_ASN1_OUTPUT_DATA: Int32 { get }
public var ASN1_F_ASN1_PACK_STRING: Int32 { get }
public var ASN1_F_ASN1_PCTX_NEW: Int32 { get }
public var ASN1_F_ASN1_PKCS5_PBE_SET: Int32 { get }
public var ASN1_F_ASN1_SEQ_PACK: Int32 { get }
public var ASN1_F_ASN1_SEQ_UNPACK: Int32 { get }
public var ASN1_F_ASN1_SIGN: Int32 { get }
public var ASN1_F_ASN1_STR2TYPE: Int32 { get }
public var ASN1_F_ASN1_STRING_SET: Int32 { get }
public var ASN1_F_ASN1_STRING_TABLE_ADD: Int32 { get }
public var ASN1_F_ASN1_STRING_TYPE_NEW: Int32 { get }
public var ASN1_F_ASN1_TEMPLATE_EX_D2I: Int32 { get }
public var ASN1_F_ASN1_TEMPLATE_NEW: Int32 { get }
public var ASN1_F_ASN1_TEMPLATE_NOEXP_D2I: Int32 { get }
public var ASN1_F_ASN1_TIME_ADJ: Int32 { get }
public var ASN1_F_ASN1_TIME_SET: Int32 { get }
public var ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING: Int32 { get }
public var ASN1_F_ASN1_TYPE_GET_OCTETSTRING: Int32 { get }
public var ASN1_F_ASN1_UNPACK_STRING: Int32 { get }
public var ASN1_F_ASN1_UTCTIME_ADJ: Int32 { get }
public var ASN1_F_ASN1_UTCTIME_SET: Int32 { get }
public var ASN1_F_ASN1_VERIFY: Int32 { get }
public var ASN1_F_B64_READ_ASN1: Int32 { get }
public var ASN1_F_B64_WRITE_ASN1: Int32 { get }
public var ASN1_F_BIO_NEW_NDEF: Int32 { get }
public var ASN1_F_BITSTR_CB: Int32 { get }
public var ASN1_F_BN_TO_ASN1_ENUMERATED: Int32 { get }
public var ASN1_F_BN_TO_ASN1_INTEGER: Int32 { get }
public var ASN1_F_C2I_ASN1_BIT_STRING: Int32 { get }
public var ASN1_F_C2I_ASN1_INTEGER: Int32 { get }
public var ASN1_F_C2I_ASN1_OBJECT: Int32 { get }
public var ASN1_F_COLLECT_DATA: Int32 { get }
public var ASN1_F_D2I_ASN1_BIT_STRING: Int32 { get }
public var ASN1_F_D2I_ASN1_BOOLEAN: Int32 { get }
public var ASN1_F_D2I_ASN1_BYTES: Int32 { get }
public var ASN1_F_D2I_ASN1_GENERALIZEDTIME: Int32 { get }
public var ASN1_F_D2I_ASN1_HEADER: Int32 { get }
public var ASN1_F_D2I_ASN1_INTEGER: Int32 { get }
public var ASN1_F_D2I_ASN1_OBJECT: Int32 { get }
public var ASN1_F_D2I_ASN1_SET: Int32 { get }
public var ASN1_F_D2I_ASN1_TYPE_BYTES: Int32 { get }
public var ASN1_F_D2I_ASN1_UINTEGER: Int32 { get }
public var ASN1_F_D2I_ASN1_UTCTIME: Int32 { get }
public var ASN1_F_D2I_AUTOPRIVATEKEY: Int32 { get }
public var ASN1_F_D2I_NETSCAPE_RSA: Int32 { get }
public var ASN1_F_D2I_NETSCAPE_RSA_2: Int32 { get }
public var ASN1_F_D2I_PRIVATEKEY: Int32 { get }
public var ASN1_F_D2I_PUBLICKEY: Int32 { get }
public var ASN1_F_D2I_RSA_NET: Int32 { get }
public var ASN1_F_D2I_RSA_NET_2: Int32 { get }
public var ASN1_F_D2I_X509: Int32 { get }
public var ASN1_F_D2I_X509_CINF: Int32 { get }
public var ASN1_F_D2I_X509_PKEY: Int32 { get }
public var ASN1_F_I2D_ASN1_BIO_STREAM: Int32 { get }
public var ASN1_F_I2D_ASN1_SET: Int32 { get }
public var ASN1_F_I2D_ASN1_TIME: Int32 { get }
public var ASN1_F_I2D_DSA_PUBKEY: Int32 { get }
public var ASN1_F_I2D_EC_PUBKEY: Int32 { get }
public var ASN1_F_I2D_PRIVATEKEY: Int32 { get }
public var ASN1_F_I2D_PUBLICKEY: Int32 { get }
public var ASN1_F_I2D_RSA_NET: Int32 { get }
public var ASN1_F_I2D_RSA_PUBKEY: Int32 { get }
public var ASN1_F_LONG_C2I: Int32 { get }
public var ASN1_F_OID_MODULE_INIT: Int32 { get }
public var ASN1_F_PARSE_TAGGING: Int32 { get }
public var ASN1_F_PKCS5_PBE2_SET_IV: Int32 { get }
public var ASN1_F_PKCS5_PBE_SET: Int32 { get }
public var ASN1_F_PKCS5_PBE_SET0_ALGOR: Int32 { get }
public var ASN1_F_PKCS5_PBKDF2_SET: Int32 { get }
public var ASN1_F_SMIME_READ_ASN1: Int32 { get }
public var ASN1_F_SMIME_TEXT: Int32 { get }
public var ASN1_F_X509_CINF_NEW: Int32 { get }
public var ASN1_F_X509_CRL_ADD0_REVOKED: Int32 { get }
public var ASN1_F_X509_INFO_NEW: Int32 { get }
public var ASN1_F_X509_NAME_ENCODE: Int32 { get }
public var ASN1_F_X509_NAME_EX_D2I: Int32 { get }
public var ASN1_F_X509_NAME_EX_NEW: Int32 { get }
public var ASN1_F_X509_NEW: Int32 { get }
public var ASN1_F_X509_PKEY_NEW: Int32 { get }

/* Reason codes. */
public var ASN1_R_ADDING_OBJECT: Int32 { get }
public var ASN1_R_ASN1_PARSE_ERROR: Int32 { get }
public var ASN1_R_ASN1_SIG_PARSE_ERROR: Int32 { get }
public var ASN1_R_AUX_ERROR: Int32 { get }
public var ASN1_R_BAD_CLASS: Int32 { get }
public var ASN1_R_BAD_OBJECT_HEADER: Int32 { get }
public var ASN1_R_BAD_PASSWORD_READ: Int32 { get }
public var ASN1_R_BAD_TAG: Int32 { get }
public var ASN1_R_BMPSTRING_IS_WRONG_LENGTH: Int32 { get }
public var ASN1_R_BN_LIB: Int32 { get }
public var ASN1_R_BOOLEAN_IS_WRONG_LENGTH: Int32 { get }
public var ASN1_R_BUFFER_TOO_SMALL: Int32 { get }
public var ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER: Int32 { get }
public var ASN1_R_CONTEXT_NOT_INITIALISED: Int32 { get }
public var ASN1_R_DATA_IS_WRONG: Int32 { get }
public var ASN1_R_DECODE_ERROR: Int32 { get }
public var ASN1_R_DECODING_ERROR: Int32 { get }
public var ASN1_R_DEPTH_EXCEEDED: Int32 { get }
public var ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED: Int32 { get }
public var ASN1_R_ENCODE_ERROR: Int32 { get }
public var ASN1_R_ERROR_GETTING_TIME: Int32 { get }
public var ASN1_R_ERROR_LOADING_SECTION: Int32 { get }
public var ASN1_R_ERROR_PARSING_SET_ELEMENT: Int32 { get }
public var ASN1_R_ERROR_SETTING_CIPHER_PARAMS: Int32 { get }
public var ASN1_R_EXPECTING_AN_INTEGER: Int32 { get }
public var ASN1_R_EXPECTING_AN_OBJECT: Int32 { get }
public var ASN1_R_EXPECTING_A_BOOLEAN: Int32 { get }
public var ASN1_R_EXPECTING_A_TIME: Int32 { get }
public var ASN1_R_EXPLICIT_LENGTH_MISMATCH: Int32 { get }
public var ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED: Int32 { get }
public var ASN1_R_FIELD_MISSING: Int32 { get }
public var ASN1_R_FIRST_NUM_TOO_LARGE: Int32 { get }
public var ASN1_R_HEADER_TOO_LONG: Int32 { get }
public var ASN1_R_ILLEGAL_BITSTRING_FORMAT: Int32 { get }
public var ASN1_R_ILLEGAL_BOOLEAN: Int32 { get }
public var ASN1_R_ILLEGAL_CHARACTERS: Int32 { get }
public var ASN1_R_ILLEGAL_FORMAT: Int32 { get }
public var ASN1_R_ILLEGAL_HEX: Int32 { get }
public var ASN1_R_ILLEGAL_IMPLICIT_TAG: Int32 { get }
public var ASN1_R_ILLEGAL_INTEGER: Int32 { get }
public var ASN1_R_ILLEGAL_NESTED_TAGGING: Int32 { get }
public var ASN1_R_ILLEGAL_NULL: Int32 { get }
public var ASN1_R_ILLEGAL_NULL_VALUE: Int32 { get }
public var ASN1_R_ILLEGAL_OBJECT: Int32 { get }
public var ASN1_R_ILLEGAL_OPTIONAL_ANY: Int32 { get }
public var ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE: Int32 { get }
public var ASN1_R_ILLEGAL_TAGGED_ANY: Int32 { get }
public var ASN1_R_ILLEGAL_TIME_VALUE: Int32 { get }
public var ASN1_R_INTEGER_NOT_ASCII_FORMAT: Int32 { get }
public var ASN1_R_INTEGER_TOO_LARGE_FOR_LONG: Int32 { get }
public var ASN1_R_INVALID_BIT_STRING_BITS_LEFT: Int32 { get }
public var ASN1_R_INVALID_BMPSTRING_LENGTH: Int32 { get }
public var ASN1_R_INVALID_DIGIT: Int32 { get }
public var ASN1_R_INVALID_MIME_TYPE: Int32 { get }
public var ASN1_R_INVALID_MODIFIER: Int32 { get }
public var ASN1_R_INVALID_NUMBER: Int32 { get }
public var ASN1_R_INVALID_OBJECT_ENCODING: Int32 { get }
public var ASN1_R_INVALID_SEPARATOR: Int32 { get }
public var ASN1_R_INVALID_TIME_FORMAT: Int32 { get }
public var ASN1_R_INVALID_UNIVERSALSTRING_LENGTH: Int32 { get }
public var ASN1_R_INVALID_UTF8STRING: Int32 { get }
public var ASN1_R_IV_TOO_LARGE: Int32 { get }
public var ASN1_R_LENGTH_ERROR: Int32 { get }
public var ASN1_R_LIST_ERROR: Int32 { get }
public var ASN1_R_MIME_NO_CONTENT_TYPE: Int32 { get }
public var ASN1_R_MIME_PARSE_ERROR: Int32 { get }
public var ASN1_R_MIME_SIG_PARSE_ERROR: Int32 { get }
public var ASN1_R_MISSING_EOC: Int32 { get }
public var ASN1_R_MISSING_SECOND_NUMBER: Int32 { get }
public var ASN1_R_MISSING_VALUE: Int32 { get }
public var ASN1_R_MSTRING_NOT_UNIVERSAL: Int32 { get }
public var ASN1_R_MSTRING_WRONG_TAG: Int32 { get }
public var ASN1_R_NESTED_ASN1_STRING: Int32 { get }
public var ASN1_R_NON_HEX_CHARACTERS: Int32 { get }
public var ASN1_R_NOT_ASCII_FORMAT: Int32 { get }
public var ASN1_R_NOT_ENOUGH_DATA: Int32 { get }
public var ASN1_R_NO_CONTENT_TYPE: Int32 { get }
public var ASN1_R_NO_DEFAULT_DIGEST: Int32 { get }
public var ASN1_R_NO_MATCHING_CHOICE_TYPE: Int32 { get }
public var ASN1_R_NO_MULTIPART_BODY_FAILURE: Int32 { get }
public var ASN1_R_NO_MULTIPART_BOUNDARY: Int32 { get }
public var ASN1_R_NO_SIG_CONTENT_TYPE: Int32 { get }
public var ASN1_R_NULL_IS_WRONG_LENGTH: Int32 { get }
public var ASN1_R_OBJECT_NOT_ASCII_FORMAT: Int32 { get }
public var ASN1_R_ODD_NUMBER_OF_CHARS: Int32 { get }
public var ASN1_R_PRIVATE_KEY_HEADER_MISSING: Int32 { get }
public var ASN1_R_SECOND_NUMBER_TOO_LARGE: Int32 { get }
public var ASN1_R_SEQUENCE_LENGTH_MISMATCH: Int32 { get }
public var ASN1_R_SEQUENCE_NOT_CONSTRUCTED: Int32 { get }
public var ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG: Int32 { get }
public var ASN1_R_SHORT_LINE: Int32 { get }
public var ASN1_R_SIG_INVALID_MIME_TYPE: Int32 { get }
public var ASN1_R_STREAMING_NOT_SUPPORTED: Int32 { get }
public var ASN1_R_STRING_TOO_LONG: Int32 { get }
public var ASN1_R_STRING_TOO_SHORT: Int32 { get }
public var ASN1_R_TAG_VALUE_TOO_HIGH: Int32 { get }
public var ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD: Int32 { get }
public var ASN1_R_TIME_NOT_ASCII_FORMAT: Int32 { get }
public var ASN1_R_TOO_LONG: Int32 { get }
public var ASN1_R_TYPE_NOT_CONSTRUCTED: Int32 { get }
public var ASN1_R_TYPE_NOT_PRIMITIVE: Int32 { get }
public var ASN1_R_UNABLE_TO_DECODE_RSA_KEY: Int32 { get }
public var ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY: Int32 { get }
public var ASN1_R_UNEXPECTED_EOC: Int32 { get }
public var ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH: Int32 { get }
public var ASN1_R_UNKNOWN_FORMAT: Int32 { get }
public var ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM: Int32 { get }
public var ASN1_R_UNKNOWN_OBJECT_TYPE: Int32 { get }
public var ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE: Int32 { get }
public var ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM: Int32 { get }
public var ASN1_R_UNKNOWN_TAG: Int32 { get }
public var ASN1_R_UNKOWN_FORMAT: Int32 { get }
public var ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE: Int32 { get }
public var ASN1_R_UNSUPPORTED_CIPHER: Int32 { get }
public var ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM: Int32 { get }
public var ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE: Int32 { get }
public var ASN1_R_UNSUPPORTED_TYPE: Int32 { get }
public var ASN1_R_WRONG_PUBLIC_KEY_TYPE: Int32 { get }
public var ASN1_R_WRONG_TAG: Int32 { get }
public var ASN1_R_WRONG_TYPE: Int32 { get }
/* crypto/objects/objects.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Postal Address? PA */

/* should be "ST" (rfc1327) but MS uses 'S' */

/* IV + num */

/* IV */

/* ?? */

/* I'm not sure about the object ID */

/* 28 Jun 1996 - eay */
/* #define OBJ_sha1                     1L,3L,14L,2L,26L,05L <- wrong */

/* proposed by microsoft to RSA */

/*
 * proposed by microsoft to RSA as pbeWithSHA1AndRC4: it is now defined
 * explicitly in PKCS#5 v2.0 as id-PBKDF2 which is something completely
 * different.
 */

/* Got this one from 'sdn706r20.pdf' which is actually an NSA document :-) */

/* An alternative?                      1L,3L,14L,3L,2L,19L */

/* CAST5 is CAST-128, I'm just sticking with the documentation */

/*-
 * This is one sun will soon be using :-(
 * id-dsa-with-sha1 ID  ::= {
 *   iso(1) member-body(2) us(840) x9-57 (10040) x9cm(4) 3 }
 */

/*
 * The name should actually be rsaSignatureWithripemd160, but I'm going to
 * continue using the convention I'm using with the other ciphers
 */

/*-
 * Taken from rfc2040
 *  RC5_CBC_Parameters ::= SEQUENCE {
 *      version           INTEGER (v1_0(16)),
 *      rounds            INTEGER (8..127),
 *      blockSizeInBits   INTEGER (64, 128),
 *      iv                OCTET STRING OPTIONAL
 *      }
 */

/* PKIX extended key usage OIDs */

/* Additional extended key usage OIDs: Microsoft */

/* Additional usage: Netscape */

/* PKCS12 and related OBJECT IDENTIFIERS */

/* PKCS#5 v2 OIDs */

/* Policy Qualifier Ids */

/* Extension request OIDs */

/* USE_OBJ_MAC */

public var OBJ_NAME_TYPE_UNDEF: Int32 { get }
public var OBJ_NAME_TYPE_MD_METH: Int32 { get }
public var OBJ_NAME_TYPE_CIPHER_METH: Int32 { get }
public var OBJ_NAME_TYPE_PKEY_METH: Int32 { get }
public var OBJ_NAME_TYPE_COMP_METH: Int32 { get }
public var OBJ_NAME_TYPE_NUM: Int32 { get }

public var OBJ_NAME_ALIAS: Int32 { get }

public var OBJ_BSEARCH_VALUE_ON_NOMATCH: Int32 { get }
public var OBJ_BSEARCH_FIRST_VALUE_ON_MATCH: Int32 { get }

public struct obj_name_st {

    public var type: Int32

    public var alias: Int32

    public var name: UnsafePointer<Int8>!

    public var data: UnsafePointer<Int8>!

    public init()

    public init(type: Int32, alias: Int32, name: UnsafePointer<Int8>!, data: UnsafePointer<Int8>!)
}
public typealias OBJ_NAME = obj_name_st

public func OBJ_NAME_init() -> Int32
public func OBJ_NAME_new_index(_ hash_func: (@escaping @convention(c) (UnsafePointer<Int8>?) -> UInt)!, _ cmp_func: (@escaping @convention(c) (UnsafePointer<Int8>?, UnsafePointer<Int8>?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafePointer<Int8>?, Int32, UnsafePointer<Int8>?) -> Swift.Void)!) -> Int32
public func OBJ_NAME_get(_ name: UnsafePointer<Int8>!, _ type: Int32) -> UnsafePointer<Int8>!
public func OBJ_NAME_add(_ name: UnsafePointer<Int8>!, _ type: Int32, _ data: UnsafePointer<Int8>!) -> Int32
public func OBJ_NAME_remove(_ name: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func OBJ_NAME_cleanup(_ type: Int32) /* -1 for everything */
public func OBJ_NAME_do_all(_ type: Int32, _ fn: (@escaping @convention(c) (UnsafePointer<OBJ_NAME>?, UnsafeMutableRawPointer?) -> Swift.Void)!, _ arg: UnsafeMutableRawPointer!)
public func OBJ_NAME_do_all_sorted(_ type: Int32, _ fn: (@escaping @convention(c) (UnsafePointer<OBJ_NAME>?, UnsafeMutableRawPointer?) -> Swift.Void)!, _ arg: UnsafeMutableRawPointer!)

public func OBJ_dup(_ o: UnsafePointer<ASN1_OBJECT>!) -> UnsafeMutablePointer<ASN1_OBJECT>!
public func OBJ_nid2obj(_ n: Int32) -> UnsafeMutablePointer<ASN1_OBJECT>!
public func OBJ_nid2ln(_ n: Int32) -> UnsafePointer<Int8>!
public func OBJ_nid2sn(_ n: Int32) -> UnsafePointer<Int8>!
public func OBJ_obj2nid(_ o: UnsafePointer<ASN1_OBJECT>!) -> Int32
public func OBJ_txt2obj(_ s: UnsafePointer<Int8>!, _ no_name: Int32) -> UnsafeMutablePointer<ASN1_OBJECT>!
public func OBJ_obj2txt(_ buf: UnsafeMutablePointer<Int8>!, _ buf_len: Int32, _ a: UnsafePointer<ASN1_OBJECT>!, _ no_name: Int32) -> Int32
public func OBJ_txt2nid(_ s: UnsafePointer<Int8>!) -> Int32
public func OBJ_ln2nid(_ s: UnsafePointer<Int8>!) -> Int32
public func OBJ_sn2nid(_ s: UnsafePointer<Int8>!) -> Int32
public func OBJ_cmp(_ a: UnsafePointer<ASN1_OBJECT>!, _ b: UnsafePointer<ASN1_OBJECT>!) -> Int32
public func OBJ_bsearch_(_ key: UnsafeRawPointer!, _ base: UnsafeRawPointer!, _ num: Int32, _ size: Int32, _ cmp: (@escaping @convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32)!) -> UnsafeRawPointer!
public func OBJ_bsearch_ex_(_ key: UnsafeRawPointer!, _ base: UnsafeRawPointer!, _ num: Int32, _ size: Int32, _ cmp: (@escaping @convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> Int32)!, _ flags: Int32) -> UnsafeRawPointer!

/*-
 * Unsolved problem: if a type is actually a pointer type, like
 * nid_triple is, then its impossible to get a const where you need
 * it. Consider:
 *
 * typedef int nid_triple[3];
 * const void *a_;
 * const nid_triple const *a = a_;
 *
 * The assignement discards a const because what you really want is:
 *
 * const int const * const *a = a_;
 *
 * But if you do that, you lose the fact that a is an array of 3 ints,
 * which breaks comparison functions.
 *
 * Thus we end up having to cast, sadly, or unpack the
 * declarations. Or, as I finally did in this case, delcare nid_triple
 * to be a struct, which it should have been in the first place.
 *
 * Ben, August 2008.
 *
 * Also, strictly speaking not all types need be const, but handling
 * the non-constness means a lot of complication, and in practice
 * comparison routines do always not touch their arguments.
 */

public func OBJ_new_nid(_ num: Int32) -> Int32
public func OBJ_add_object(_ obj: UnsafePointer<ASN1_OBJECT>!) -> Int32
public func OBJ_create(_ oid: UnsafePointer<Int8>!, _ sn: UnsafePointer<Int8>!, _ ln: UnsafePointer<Int8>!) -> Int32
public func OBJ_cleanup()
public func OBJ_create_objects(_ in: UnsafeMutablePointer<BIO>!) -> Int32

public func OBJ_find_sigid_algs(_ signid: Int32, _ pdig_nid: UnsafeMutablePointer<Int32>!, _ ppkey_nid: UnsafeMutablePointer<Int32>!) -> Int32
public func OBJ_find_sigid_by_algs(_ psignid: UnsafeMutablePointer<Int32>!, _ dig_nid: Int32, _ pkey_nid: Int32) -> Int32
public func OBJ_add_sigid(_ signid: Int32, _ dig_id: Int32, _ pkey_id: Int32) -> Int32
public func OBJ_sigid_free()

public var obj_cleanup_defer: Int32
public func check_defer(_ nid: Int32)

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_OBJ_strings()

/* Error codes for the OBJ functions. */

/* Function codes. */
public var OBJ_F_OBJ_ADD_OBJECT: Int32 { get }
public var OBJ_F_OBJ_CREATE: Int32 { get }
public var OBJ_F_OBJ_DUP: Int32 { get }
public var OBJ_F_OBJ_NAME_NEW_INDEX: Int32 { get }
public var OBJ_F_OBJ_NID2LN: Int32 { get }
public var OBJ_F_OBJ_NID2OBJ: Int32 { get }
public var OBJ_F_OBJ_NID2SN: Int32 { get }

/* Reason codes. */
public var OBJ_R_MALLOC_FAILURE: Int32 { get }
public var OBJ_R_UNKNOWN_NID: Int32 { get }

public var EVP_PK_RSA: Int32 { get }
public var EVP_PK_DSA: Int32 { get }
public var EVP_PK_DH: Int32 { get }
public var EVP_PK_EC: Int32 { get }
public var EVP_PKT_SIGN: Int32 { get }
public var EVP_PKT_ENC: Int32 { get }
public var EVP_PKT_EXCH: Int32 { get }
public var EVP_PKS_RSA: Int32 { get }
public var EVP_PKS_DSA: Int32 { get }
public var EVP_PKS_EC: Int32 { get }

public var EVP_PKEY_NONE: Int32 { get }
public var EVP_PKEY_RSA: Int32 { get }
public var EVP_PKEY_RSA2: Int32 { get }
public var EVP_PKEY_DSA: Int32 { get }
public var EVP_PKEY_DSA1: Int32 { get }
public var EVP_PKEY_DSA2: Int32 { get }
public var EVP_PKEY_DSA3: Int32 { get }
public var EVP_PKEY_DSA4: Int32 { get }
public var EVP_PKEY_DH: Int32 { get }
public var EVP_PKEY_DHX: Int32 { get }
public var EVP_PKEY_EC: Int32 { get }
public var EVP_PKEY_HMAC: Int32 { get }
public var EVP_PKEY_CMAC: Int32 { get }

/*
 * Type needs to be a bit field Sub-type needs to be for variations on the
 * method, as in, can it do arbitrary encryption....
 */
public struct evp_pkey_st {

    
    public struct __Unnamed_union_pkey {

        public var ptr: UnsafeMutablePointer<Int8>!

        
        public var rsa: UnsafeMutablePointer<rsa_st>! /* RSA */

        
        public var dsa: UnsafeMutablePointer<dsa_st>! /* DSA */

        
        public var dh: UnsafeMutablePointer<dh_st>! /* DH */

        
        public var ec: OpaquePointer! /* ECC */

        public init(ptr: UnsafeMutablePointer<Int8>!)

        public init(rsa: UnsafeMutablePointer<rsa_st>!)

        public init(dsa: UnsafeMutablePointer<dsa_st>!)

        public init(dh: UnsafeMutablePointer<dh_st>!)

        public init(ec: OpaquePointer!)

        public init()
    }

    public var type: Int32

    public var save_type: Int32

    public var references: Int32

    public var ameth: OpaquePointer!

    public var engine: OpaquePointer!

    public var pkey: evp_pkey_st.__Unnamed_union_pkey

    public var save_parameters: Int32

    public var attributes: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>! /* [ 0 ] */

    public init()

    public init(type: Int32, save_type: Int32, references: Int32, ameth: OpaquePointer!, engine: OpaquePointer!, pkey: evp_pkey_st.__Unnamed_union_pkey, save_parameters: Int32, attributes: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!)
}
/* EVP_PKEY */

public var EVP_PKEY_MO_SIGN: Int32 { get }
public var EVP_PKEY_MO_VERIFY: Int32 { get }
public var EVP_PKEY_MO_ENCRYPT: Int32 { get }
public var EVP_PKEY_MO_DECRYPT: Int32 { get }

public struct env_md_st {

    public var type: Int32

    public var pkey_type: Int32

    public var md_size: Int32

    public var flags: UInt

    public var `init`: (@convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!

    public var update: (@convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafeRawPointer?, Int) -> Int32)!

    public var final: (@convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafeMutablePointer<UInt8>?) -> Int32)!

    public var copy: (@convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafePointer<EVP_MD_CTX>?) -> Int32)!

    public var cleanup: (@convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!

    /* FIXME: prototype these some day */
    public var sign: (@convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?, UnsafeMutableRawPointer?) -> Int32)!

    public var verify: (@convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafePointer<UInt8>?, UInt32, UnsafeMutableRawPointer?) -> Int32)!

    public var required_pkey_type: (Int32, Int32, Int32, Int32, Int32) /* EVP_PKEY_xxx */

    public var block_size: Int32

    public var ctx_size: Int32 /* how big does the ctx->md_data need to be */

    /* control function */
    public var md_ctrl: (@convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!

    public init()

    public init(type: Int32, pkey_type: Int32, md_size: Int32, flags: UInt, init: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!, update: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafeRawPointer?, Int) -> Int32)!, final: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafeMutablePointer<UInt8>?) -> Int32)!, copy: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafePointer<EVP_MD_CTX>?) -> Int32)!, cleanup: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!, sign: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?, UnsafeMutableRawPointer?) -> Int32)!, verify: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafePointer<UInt8>?, UInt32, UnsafeMutableRawPointer?) -> Int32)!, required_pkey_type: (Int32, Int32, Int32, Int32, Int32), block_size: Int32, ctx_size: Int32, md_ctrl: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!)
}
/* EVP_MD */

public typealias evp_sign_method = (Int32, UnsafePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?, UnsafeMutableRawPointer?) -> Int32
public typealias evp_verify_method = (Int32, UnsafePointer<UInt8>?, UInt32, UnsafePointer<UInt8>?, UInt32, UnsafeMutableRawPointer?) -> Int32

/* digest can only handle a single block */
public var EVP_MD_FLAG_ONESHOT: Int32 { get }

/*
 * digest is a "clone" digest used
 * which is a copy of an existing
 * one for a specific public key type.
 * EVP_dss1() etc
 */
public var EVP_MD_FLAG_PKEY_DIGEST: Int32 { get }

/* Digest uses EVP_PKEY_METHOD for signing instead of MD specific signing */

public var EVP_MD_FLAG_PKEY_METHOD_SIGNATURE: Int32 { get }

/* DigestAlgorithmIdentifier flags... */

public var EVP_MD_FLAG_DIGALGID_MASK: Int32 { get }

/* NULL or absent parameter accepted. Use NULL */

public var EVP_MD_FLAG_DIGALGID_NULL: Int32 { get }

/* NULL or absent parameter accepted. Use NULL for PKCS#1 otherwise absent */

public var EVP_MD_FLAG_DIGALGID_ABSENT: Int32 { get }

/* Custom handling via ctrl */

public var EVP_MD_FLAG_DIGALGID_CUSTOM: Int32 { get }

/* Note if suitable for use in FIPS mode */
public var EVP_MD_FLAG_FIPS: Int32 { get }

/* Digest ctrls */

public var EVP_MD_CTRL_DIGALGID: Int32 { get }
public var EVP_MD_CTRL_MICALG: Int32 { get }

/* Minimum Algorithm specific ctrl value */

public var EVP_MD_CTRL_ALG_CTRL: Int32 { get }

/* !EVP_MD */

public struct env_md_ctx_st {

    public var digest: UnsafePointer<EVP_MD>!

    public var engine: OpaquePointer! /* functional reference if 'digest' is
                                 * ENGINE-provided */

    
    public var flags: UInt

    public var md_data: UnsafeMutableRawPointer!

    /* Public key context for sign/verify */
    public var pctx: OpaquePointer!

    /* Update function: usually copied from EVP_MD */
    public var update: (@convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafeRawPointer?, Int) -> Int32)!

    public init()

    public init(digest: UnsafePointer<EVP_MD>!, engine: OpaquePointer!, flags: UInt, md_data: UnsafeMutableRawPointer!, pctx: OpaquePointer!, update: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, UnsafeRawPointer?, Int) -> Int32)!)
}
/* EVP_MD_CTX */

/* values for EVP_MD_CTX flags */

public var EVP_MD_CTX_FLAG_ONESHOT: Int32 { get } /* digest update will be
                                                * called once only */

public var EVP_MD_CTX_FLAG_CLEANED: Int32 { get } /* context has already been
                                                * cleaned */

public var EVP_MD_CTX_FLAG_REUSE: Int32 { get } /* Don't free up ctx->md_data
                                                * in EVP_MD_CTX_cleanup */

/*
 * FIPS and pad options are ignored in 1.0.0, definitions are here so we
 * don't accidentally reuse the values for other purposes.
 */

public var EVP_MD_CTX_FLAG_NON_FIPS_ALLOW: Int32 { get } /* Allow use of non FIPS
                                                * digest in FIPS mode */

/*
 * The following PAD options are also currently ignored in 1.0.0, digest
 * parameters are handled through EVP_DigestSign*() and EVP_DigestVerify*()
 * instead.
 */
public var EVP_MD_CTX_FLAG_PAD_MASK: Int32 { get } /* RSA mode to use */
public var EVP_MD_CTX_FLAG_PAD_PKCS1: Int32 { get } /* PKCS#1 v1.5 mode */
public var EVP_MD_CTX_FLAG_PAD_X931: Int32 { get } /* X9.31 mode */
public var EVP_MD_CTX_FLAG_PAD_PSS: Int32 { get } /* PSS mode */

public var EVP_MD_CTX_FLAG_NO_INIT: Int32 { get } /* Don't initialize md_data */

public struct evp_cipher_st {

    public var nid: Int32

    public var block_size: Int32

    /* Default value for variable length ciphers */
    public var key_len: Int32

    public var iv_len: Int32

    /* Various flags */
    public var flags: UInt

    /* init key */
    public var `init`: (@convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafePointer<UInt8>?, UnsafePointer<UInt8>?, Int32) -> Int32)!

    /* encrypt/decrypt data */
    public var do_cipher: (@convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafeMutablePointer<UInt8>?, UnsafePointer<UInt8>?, Int) -> Int32)!

    /* cleanup ctx */
    public var cleanup: (@convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?) -> Int32)!

    /* how big ctx->cipher_data needs to be */
    public var ctx_size: Int32

    /* Populate a ASN1_TYPE with parameters */
    public var set_asn1_parameters: (@convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafeMutablePointer<ASN1_TYPE>?) -> Int32)!

    /* Get parameters from a ASN1_TYPE */
    public var get_asn1_parameters: (@convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafeMutablePointer<ASN1_TYPE>?) -> Int32)!

    /* Miscellaneous operations */
    public var ctrl: (@convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!

    /* Application data */
    public var app_data: UnsafeMutableRawPointer!

    public init()

    public init(nid: Int32, block_size: Int32, key_len: Int32, iv_len: Int32, flags: UInt, init: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafePointer<UInt8>?, UnsafePointer<UInt8>?, Int32) -> Int32)!, do_cipher: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafeMutablePointer<UInt8>?, UnsafePointer<UInt8>?, Int) -> Int32)!, cleanup: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?) -> Int32)!, ctx_size: Int32, set_asn1_parameters: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafeMutablePointer<ASN1_TYPE>?) -> Int32)!, get_asn1_parameters: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafeMutablePointer<ASN1_TYPE>?) -> Int32)!, ctrl: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, app_data: UnsafeMutableRawPointer!)
}
/* EVP_CIPHER */

/* Values for cipher flags */

/* Modes for ciphers */

public var EVP_CIPH_STREAM_CIPHER: Int32 { get }
public var EVP_CIPH_ECB_MODE: Int32 { get }
public var EVP_CIPH_CBC_MODE: Int32 { get }
public var EVP_CIPH_CFB_MODE: Int32 { get }
public var EVP_CIPH_OFB_MODE: Int32 { get }
public var EVP_CIPH_CTR_MODE: Int32 { get }
public var EVP_CIPH_GCM_MODE: Int32 { get }
public var EVP_CIPH_CCM_MODE: Int32 { get }
public var EVP_CIPH_XTS_MODE: Int32 { get }
public var EVP_CIPH_WRAP_MODE: Int32 { get }
public var EVP_CIPH_MODE: Int32 { get }
/* Set if variable length cipher */
public var EVP_CIPH_VARIABLE_LENGTH: Int32 { get }
/* Set if the iv handling should be done by the cipher itself */
public var EVP_CIPH_CUSTOM_IV: Int32 { get }
/* Set if the cipher's init() function should be called if key is NULL */
public var EVP_CIPH_ALWAYS_CALL_INIT: Int32 { get }
/* Call ctrl() to init cipher parameters */
public var EVP_CIPH_CTRL_INIT: Int32 { get }
/* Don't use standard key length function */
public var EVP_CIPH_CUSTOM_KEY_LENGTH: Int32 { get }
/* Don't use standard block padding */
public var EVP_CIPH_NO_PADDING: Int32 { get }
/* cipher handles random key generation */
public var EVP_CIPH_RAND_KEY: Int32 { get }
/* cipher has its own additional copying logic */
public var EVP_CIPH_CUSTOM_COPY: Int32 { get }
/* Allow use default ASN1 get/set iv */
public var EVP_CIPH_FLAG_DEFAULT_ASN1: Int32 { get }
/* Buffer length in bits not bytes: CFB1 mode only */
public var EVP_CIPH_FLAG_LENGTH_BITS: Int32 { get }
/* Note if suitable for use in FIPS mode */
public var EVP_CIPH_FLAG_FIPS: Int32 { get }
/* Allow non FIPS cipher in FIPS mode */
public var EVP_CIPH_FLAG_NON_FIPS_ALLOW: Int32 { get }
/*
 * Cipher handles any and all padding logic as well as finalisation.
 */
public var EVP_CIPH_FLAG_CUSTOM_CIPHER: Int32 { get }
public var EVP_CIPH_FLAG_AEAD_CIPHER: Int32 { get }
public var EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK: Int32 { get }

/*
 * Cipher context flag to indicate we can handle wrap mode: if allowed in
 * older applications it could overflow buffers.
 */

public var EVP_CIPHER_CTX_FLAG_WRAP_ALLOW: Int32 { get }

/* ctrl() values */

public var EVP_CTRL_INIT: Int32 { get }
public var EVP_CTRL_SET_KEY_LENGTH: Int32 { get }
public var EVP_CTRL_GET_RC2_KEY_BITS: Int32 { get }
public var EVP_CTRL_SET_RC2_KEY_BITS: Int32 { get }
public var EVP_CTRL_GET_RC5_ROUNDS: Int32 { get }
public var EVP_CTRL_SET_RC5_ROUNDS: Int32 { get }
public var EVP_CTRL_RAND_KEY: Int32 { get }
public var EVP_CTRL_PBE_PRF_NID: Int32 { get }
public var EVP_CTRL_COPY: Int32 { get }
public var EVP_CTRL_GCM_SET_IVLEN: Int32 { get }
public var EVP_CTRL_GCM_GET_TAG: Int32 { get }
public var EVP_CTRL_GCM_SET_TAG: Int32 { get }
public var EVP_CTRL_GCM_SET_IV_FIXED: Int32 { get }
public var EVP_CTRL_GCM_IV_GEN: Int32 { get }
public var EVP_CTRL_CCM_SET_IVLEN: Int32 { get }
public var EVP_CTRL_CCM_GET_TAG: Int32 { get }
public var EVP_CTRL_CCM_SET_TAG: Int32 { get }
public var EVP_CTRL_CCM_SET_L: Int32 { get }
public var EVP_CTRL_CCM_SET_MSGLEN: Int32 { get }
/*
 * AEAD cipher deduces payload length and returns number of bytes required to
 * store MAC and eventual padding. Subsequent call to EVP_Cipher even
 * appends/verifies MAC.
 */
public var EVP_CTRL_AEAD_TLS1_AAD: Int32 { get }
/* Used by composite AEAD ciphers, no-op in GCM, CCM... */
public var EVP_CTRL_AEAD_SET_MAC_KEY: Int32 { get }
/* Set the GCM invocation field, decrypt only */
public var EVP_CTRL_GCM_SET_IV_INV: Int32 { get }

public var EVP_CTRL_TLS1_1_MULTIBLOCK_AAD: Int32 { get }
public var EVP_CTRL_TLS1_1_MULTIBLOCK_ENCRYPT: Int32 { get }
public var EVP_CTRL_TLS1_1_MULTIBLOCK_DECRYPT: Int32 { get }
public var EVP_CTRL_TLS1_1_MULTIBLOCK_MAX_BUFSIZE: Int32 { get }

/* RFC 5246 defines additional data to be 13 bytes in length */
public var EVP_AEAD_TLS1_AAD_LEN: Int32 { get }

public struct EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM {

    public var out: UnsafeMutablePointer<UInt8>!

    public var inp: UnsafePointer<UInt8>!

    public var len: Int

    public var interleave: UInt32

    public init()

    public init(out: UnsafeMutablePointer<UInt8>!, inp: UnsafePointer<UInt8>!, len: Int, interleave: UInt32)
}

/* GCM TLS constants */
/* Length of fixed part of IV derived from PRF */
public var EVP_GCM_TLS_FIXED_IV_LEN: Int32 { get }
/* Length of explicit part of IV part of TLS records */
public var EVP_GCM_TLS_EXPLICIT_IV_LEN: Int32 { get }
/* Length of tag for TLS */
public var EVP_GCM_TLS_TAG_LEN: Int32 { get }

public struct evp_cipher_info_st {

    public var cipher: UnsafePointer<EVP_CIPHER>!

    public var iv: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public init()

    public init(cipher: UnsafePointer<EVP_CIPHER>!, iv: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
public typealias EVP_CIPHER_INFO = evp_cipher_info_st

public struct evp_cipher_ctx_st {

    public var cipher: UnsafePointer<EVP_CIPHER>!

    public var engine: OpaquePointer! /* functional reference if 'cipher' is
                                 * ENGINE-provided */

    
    public var encrypt: Int32 /* encrypt or decrypt */

    public var buf_len: Int32 /* number we have left */

    public var oiv: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8) /* original iv */

    public var iv: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8) /* working iv */

    public var buf: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8) /* saved partial block */

    public var num: Int32 /* used by cfb/ofb/ctr mode */

    public var app_data: UnsafeMutableRawPointer! /* application stuff */

    public var key_len: Int32 /* May change for variable length cipher */

    public var flags: UInt /* Various flags */

    public var cipher_data: UnsafeMutableRawPointer! /* per EVP data */

    public var final_used: Int32

    public var block_mask: Int32

    public var final: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8) /* possible final block */

    public init()

    public init(cipher: UnsafePointer<EVP_CIPHER>!, engine: OpaquePointer!, encrypt: Int32, buf_len: Int32, oiv: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), iv: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), buf: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), num: Int32, app_data: UnsafeMutableRawPointer!, key_len: Int32, flags: UInt, cipher_data: UnsafeMutableRawPointer!, final_used: Int32, block_mask: Int32, final: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
/* EVP_CIPHER_CTX */

public struct evp_Encode_Ctx_st {

    /* number saved in a partial encode/decode */
    public var num: Int32

    /*
     * The length is either the output line length (in input bytes) or the
     * shortest input line length that is ok.  Once decoding begins, the
     * length is adjusted up each time a longer line is decoded
     */
    public var length: Int32

    /* data to encode */
    public var enc_data: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    /* number read on current line */
    public var line_num: Int32

    public var expect_nl: Int32

    public init()

    public init(num: Int32, length: Int32, enc_data: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), line_num: Int32, expect_nl: Int32)
}
public typealias EVP_ENCODE_CTX = evp_Encode_Ctx_st

/* Password based encryption function */
public typealias EVP_PBE_KEYGEN = ((UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafePointer<Int8>?, Int32, UnsafeMutablePointer<ASN1_TYPE>?, UnsafePointer<EVP_CIPHER>?, UnsafePointer<EVP_MD>?, Int32) -> Int32)

/* Add some extra combinations */

public func EVP_MD_type(_ md: UnsafePointer<EVP_MD>!) -> Int32

public func EVP_MD_pkey_type(_ md: UnsafePointer<EVP_MD>!) -> Int32
public func EVP_MD_size(_ md: UnsafePointer<EVP_MD>!) -> Int32
public func EVP_MD_block_size(_ md: UnsafePointer<EVP_MD>!) -> Int32
public func EVP_MD_flags(_ md: UnsafePointer<EVP_MD>!) -> UInt

public func EVP_MD_CTX_md(_ ctx: UnsafePointer<EVP_MD_CTX>!) -> UnsafePointer<EVP_MD>!

public func EVP_CIPHER_nid(_ cipher: UnsafePointer<EVP_CIPHER>!) -> Int32

public func EVP_CIPHER_block_size(_ cipher: UnsafePointer<EVP_CIPHER>!) -> Int32
public func EVP_CIPHER_key_length(_ cipher: UnsafePointer<EVP_CIPHER>!) -> Int32
public func EVP_CIPHER_iv_length(_ cipher: UnsafePointer<EVP_CIPHER>!) -> Int32
public func EVP_CIPHER_flags(_ cipher: UnsafePointer<EVP_CIPHER>!) -> UInt

public func EVP_CIPHER_CTX_cipher(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!) -> UnsafePointer<EVP_CIPHER>!
public func EVP_CIPHER_CTX_nid(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!) -> Int32
public func EVP_CIPHER_CTX_block_size(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!) -> Int32
public func EVP_CIPHER_CTX_key_length(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!) -> Int32
public func EVP_CIPHER_CTX_iv_length(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!) -> Int32
public func EVP_CIPHER_CTX_copy(_ out: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ in: UnsafePointer<EVP_CIPHER_CTX>!) -> Int32
public func EVP_CIPHER_CTX_get_app_data(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!) -> UnsafeMutableRawPointer!
public func EVP_CIPHER_CTX_set_app_data(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ data: UnsafeMutableRawPointer!)

public func EVP_CIPHER_CTX_flags(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!) -> UInt

public func EVP_Cipher(_ c: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ in: UnsafePointer<UInt8>!, _ inl: UInt32) -> Int32

public func EVP_MD_CTX_init(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!)
public func EVP_MD_CTX_cleanup(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!) -> Int32
public func EVP_MD_CTX_create() -> UnsafeMutablePointer<EVP_MD_CTX>!
public func EVP_MD_CTX_destroy(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!)
public func EVP_MD_CTX_copy_ex(_ out: UnsafeMutablePointer<EVP_MD_CTX>!, _ in: UnsafePointer<EVP_MD_CTX>!) -> Int32
public func EVP_MD_CTX_set_flags(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ flags: Int32)
public func EVP_MD_CTX_clear_flags(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ flags: Int32)
public func EVP_MD_CTX_test_flags(_ ctx: UnsafePointer<EVP_MD_CTX>!, _ flags: Int32) -> Int32
public func EVP_DigestInit_ex(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ type: UnsafePointer<EVP_MD>!, _ impl: OpaquePointer!) -> Int32
public func EVP_DigestUpdate(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ d: UnsafeRawPointer!, _ cnt: Int) -> Int32
public func EVP_DigestFinal_ex(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ md: UnsafeMutablePointer<UInt8>!, _ s: UnsafeMutablePointer<UInt32>!) -> Int32
public func EVP_Digest(_ data: UnsafeRawPointer!, _ count: Int, _ md: UnsafeMutablePointer<UInt8>!, _ size: UnsafeMutablePointer<UInt32>!, _ type: UnsafePointer<EVP_MD>!, _ impl: OpaquePointer!) -> Int32

public func EVP_MD_CTX_copy(_ out: UnsafeMutablePointer<EVP_MD_CTX>!, _ in: UnsafePointer<EVP_MD_CTX>!) -> Int32
public func EVP_DigestInit(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ type: UnsafePointer<EVP_MD>!) -> Int32
public func EVP_DigestFinal(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ md: UnsafeMutablePointer<UInt8>!, _ s: UnsafeMutablePointer<UInt32>!) -> Int32

public func EVP_read_pw_string(_ buf: UnsafeMutablePointer<Int8>!, _ length: Int32, _ prompt: UnsafePointer<Int8>!, _ verify: Int32) -> Int32
public func EVP_read_pw_string_min(_ buf: UnsafeMutablePointer<Int8>!, _ minlen: Int32, _ maxlen: Int32, _ prompt: UnsafePointer<Int8>!, _ verify: Int32) -> Int32
public func EVP_set_pw_prompt(_ prompt: UnsafePointer<Int8>!)
public func EVP_get_pw_prompt() -> UnsafeMutablePointer<Int8>!

public func EVP_BytesToKey(_ type: UnsafePointer<EVP_CIPHER>!, _ md: UnsafePointer<EVP_MD>!, _ salt: UnsafePointer<UInt8>!, _ data: UnsafePointer<UInt8>!, _ datal: Int32, _ count: Int32, _ key: UnsafeMutablePointer<UInt8>!, _ iv: UnsafeMutablePointer<UInt8>!) -> Int32

public func EVP_CIPHER_CTX_set_flags(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ flags: Int32)
public func EVP_CIPHER_CTX_clear_flags(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ flags: Int32)
public func EVP_CIPHER_CTX_test_flags(_ ctx: UnsafePointer<EVP_CIPHER_CTX>!, _ flags: Int32) -> Int32

public func EVP_EncryptInit(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ key: UnsafePointer<UInt8>!, _ iv: UnsafePointer<UInt8>!) -> Int32
public func EVP_EncryptInit_ex(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ impl: OpaquePointer!, _ key: UnsafePointer<UInt8>!, _ iv: UnsafePointer<UInt8>!) -> Int32
public func EVP_EncryptUpdate(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!, _ in: UnsafePointer<UInt8>!, _ inl: Int32) -> Int32
public func EVP_EncryptFinal_ex(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32
public func EVP_EncryptFinal(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32

public func EVP_DecryptInit(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ key: UnsafePointer<UInt8>!, _ iv: UnsafePointer<UInt8>!) -> Int32
public func EVP_DecryptInit_ex(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ impl: OpaquePointer!, _ key: UnsafePointer<UInt8>!, _ iv: UnsafePointer<UInt8>!) -> Int32
public func EVP_DecryptUpdate(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!, _ in: UnsafePointer<UInt8>!, _ inl: Int32) -> Int32
public func EVP_DecryptFinal(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ outm: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32
public func EVP_DecryptFinal_ex(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ outm: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32

public func EVP_CipherInit(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ key: UnsafePointer<UInt8>!, _ iv: UnsafePointer<UInt8>!, _ enc: Int32) -> Int32
public func EVP_CipherInit_ex(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ impl: OpaquePointer!, _ key: UnsafePointer<UInt8>!, _ iv: UnsafePointer<UInt8>!, _ enc: Int32) -> Int32
public func EVP_CipherUpdate(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!, _ in: UnsafePointer<UInt8>!, _ inl: Int32) -> Int32
public func EVP_CipherFinal(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ outm: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32
public func EVP_CipherFinal_ex(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ outm: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32

public func EVP_SignFinal(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ md: UnsafeMutablePointer<UInt8>!, _ s: UnsafeMutablePointer<UInt32>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func EVP_VerifyFinal(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ sigbuf: UnsafePointer<UInt8>!, _ siglen: UInt32, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func EVP_DigestSignInit(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ pctx: UnsafeMutablePointer<OpaquePointer?>!, _ type: UnsafePointer<EVP_MD>!, _ e: OpaquePointer!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_DigestSignFinal(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ sigret: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<Int>!) -> Int32

public func EVP_DigestVerifyInit(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ pctx: UnsafeMutablePointer<OpaquePointer?>!, _ type: UnsafePointer<EVP_MD>!, _ e: OpaquePointer!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_DigestVerifyFinal(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ sig: UnsafePointer<UInt8>!, _ siglen: Int) -> Int32

public func EVP_OpenInit(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ type: UnsafePointer<EVP_CIPHER>!, _ ek: UnsafePointer<UInt8>!, _ ekl: Int32, _ iv: UnsafePointer<UInt8>!, _ priv: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_OpenFinal(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32

public func EVP_SealInit(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ type: UnsafePointer<EVP_CIPHER>!, _ ek: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ ekl: UnsafeMutablePointer<Int32>!, _ iv: UnsafeMutablePointer<UInt8>!, _ pubk: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ npubk: Int32) -> Int32
public func EVP_SealFinal(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32

public func EVP_EncodeInit(_ ctx: UnsafeMutablePointer<EVP_ENCODE_CTX>!)
public func EVP_EncodeUpdate(_ ctx: UnsafeMutablePointer<EVP_ENCODE_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!, _ in: UnsafePointer<UInt8>!, _ inl: Int32)
public func EVP_EncodeFinal(_ ctx: UnsafeMutablePointer<EVP_ENCODE_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!)
public func EVP_EncodeBlock(_ t: UnsafeMutablePointer<UInt8>!, _ f: UnsafePointer<UInt8>!, _ n: Int32) -> Int32

public func EVP_DecodeInit(_ ctx: UnsafeMutablePointer<EVP_ENCODE_CTX>!)
public func EVP_DecodeUpdate(_ ctx: UnsafeMutablePointer<EVP_ENCODE_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!, _ in: UnsafePointer<UInt8>!, _ inl: Int32) -> Int32
public func EVP_DecodeFinal(_ ctx: UnsafeMutablePointer<EVP_ENCODE_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!) -> Int32
public func EVP_DecodeBlock(_ t: UnsafeMutablePointer<UInt8>!, _ f: UnsafePointer<UInt8>!, _ n: Int32) -> Int32

public func EVP_CIPHER_CTX_init(_ a: UnsafeMutablePointer<EVP_CIPHER_CTX>!)
public func EVP_CIPHER_CTX_cleanup(_ a: UnsafeMutablePointer<EVP_CIPHER_CTX>!) -> Int32
public func EVP_CIPHER_CTX_new() -> UnsafeMutablePointer<EVP_CIPHER_CTX>!
public func EVP_CIPHER_CTX_free(_ a: UnsafeMutablePointer<EVP_CIPHER_CTX>!)
public func EVP_CIPHER_CTX_set_key_length(_ x: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ keylen: Int32) -> Int32
public func EVP_CIPHER_CTX_set_padding(_ c: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ pad: Int32) -> Int32
public func EVP_CIPHER_CTX_ctrl(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ type: Int32, _ arg: Int32, _ ptr: UnsafeMutableRawPointer!) -> Int32
public func EVP_CIPHER_CTX_rand_key(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ key: UnsafeMutablePointer<UInt8>!) -> Int32

public func BIO_f_md() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_f_base64() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_f_cipher() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_f_reliable() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_set_cipher(_ b: UnsafeMutablePointer<BIO>!, _ c: UnsafePointer<EVP_CIPHER>!, _ k: UnsafePointer<UInt8>!, _ i: UnsafePointer<UInt8>!, _ enc: Int32)

public func EVP_md_null() -> UnsafePointer<EVP_MD>!

public func EVP_md4() -> UnsafePointer<EVP_MD>!

public func EVP_md5() -> UnsafePointer<EVP_MD>!

public func EVP_sha() -> UnsafePointer<EVP_MD>!
public func EVP_sha1() -> UnsafePointer<EVP_MD>!
public func EVP_dss() -> UnsafePointer<EVP_MD>!
public func EVP_dss1() -> UnsafePointer<EVP_MD>!
public func EVP_ecdsa() -> UnsafePointer<EVP_MD>!

public func EVP_sha224() -> UnsafePointer<EVP_MD>!
public func EVP_sha256() -> UnsafePointer<EVP_MD>!

public func EVP_sha384() -> UnsafePointer<EVP_MD>!
public func EVP_sha512() -> UnsafePointer<EVP_MD>!

public func EVP_mdc2() -> UnsafePointer<EVP_MD>!

public func EVP_ripemd160() -> UnsafePointer<EVP_MD>!

public func EVP_whirlpool() -> UnsafePointer<EVP_MD>!

public func EVP_enc_null() -> UnsafePointer<EVP_CIPHER>! /* does nothing :-) */

public func EVP_des_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede3() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede3_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_cfb64() -> UnsafePointer<EVP_CIPHER>!

public func EVP_des_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede_cfb64() -> UnsafePointer<EVP_CIPHER>!

public func EVP_des_ede3_cfb64() -> UnsafePointer<EVP_CIPHER>!

public func EVP_des_ede3_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede3_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede3_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede3_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_desx_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_des_ede3_wrap() -> UnsafePointer<EVP_CIPHER>!
/*
 * This should now be supported through the dev_crypto ENGINE. But also, why
 * are rc4 and md5 declarations made here inside a "NO_DES" precompiler
 * branch?
 */

public func EVP_rc4() -> UnsafePointer<EVP_CIPHER>!
public func EVP_rc4_40() -> UnsafePointer<EVP_CIPHER>!

public func EVP_rc4_hmac_md5() -> UnsafePointer<EVP_CIPHER>!

public func EVP_idea_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_idea_cfb64() -> UnsafePointer<EVP_CIPHER>!

public func EVP_idea_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_idea_cbc() -> UnsafePointer<EVP_CIPHER>!

public func EVP_rc2_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_rc2_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_rc2_40_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_rc2_64_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_rc2_cfb64() -> UnsafePointer<EVP_CIPHER>!

public func EVP_rc2_ofb() -> UnsafePointer<EVP_CIPHER>!

public func EVP_bf_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_bf_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_bf_cfb64() -> UnsafePointer<EVP_CIPHER>!

public func EVP_bf_ofb() -> UnsafePointer<EVP_CIPHER>!

public func EVP_cast5_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_cast5_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_cast5_cfb64() -> UnsafePointer<EVP_CIPHER>!

public func EVP_cast5_ofb() -> UnsafePointer<EVP_CIPHER>!

public func EVP_aes_128_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_cfb128() -> UnsafePointer<EVP_CIPHER>!

public func EVP_aes_128_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_ctr() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_ccm() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_gcm() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_xts() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_128_wrap() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_cfb128() -> UnsafePointer<EVP_CIPHER>!

public func EVP_aes_192_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_ctr() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_ccm() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_gcm() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_192_wrap() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_cfb128() -> UnsafePointer<EVP_CIPHER>!

public func EVP_aes_256_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_ctr() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_ccm() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_gcm() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_xts() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_wrap() -> UnsafePointer<EVP_CIPHER>!

public func EVP_aes_128_cbc_hmac_sha1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_cbc_hmac_sha1() -> UnsafePointer<EVP_CIPHER>!

public func EVP_aes_128_cbc_hmac_sha256() -> UnsafePointer<EVP_CIPHER>!
public func EVP_aes_256_cbc_hmac_sha256() -> UnsafePointer<EVP_CIPHER>!

public func EVP_camellia_128_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_128_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_128_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_128_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_128_cfb128() -> UnsafePointer<EVP_CIPHER>!

public func EVP_camellia_128_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_192_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_192_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_192_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_192_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_192_cfb128() -> UnsafePointer<EVP_CIPHER>!

public func EVP_camellia_192_ofb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_256_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_256_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_256_cfb1() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_256_cfb8() -> UnsafePointer<EVP_CIPHER>!
public func EVP_camellia_256_cfb128() -> UnsafePointer<EVP_CIPHER>!

public func EVP_camellia_256_ofb() -> UnsafePointer<EVP_CIPHER>!

public func EVP_seed_ecb() -> UnsafePointer<EVP_CIPHER>!
public func EVP_seed_cbc() -> UnsafePointer<EVP_CIPHER>!
public func EVP_seed_cfb128() -> UnsafePointer<EVP_CIPHER>!

public func EVP_seed_ofb() -> UnsafePointer<EVP_CIPHER>!

public func OPENSSL_add_all_algorithms_noconf()
public func OPENSSL_add_all_algorithms_conf()

public func OpenSSL_add_all_ciphers()
public func OpenSSL_add_all_digests()

public func EVP_add_cipher(_ cipher: UnsafePointer<EVP_CIPHER>!) -> Int32
public func EVP_add_digest(_ digest: UnsafePointer<EVP_MD>!) -> Int32

public func EVP_get_cipherbyname(_ name: UnsafePointer<Int8>!) -> UnsafePointer<EVP_CIPHER>!
public func EVP_get_digestbyname(_ name: UnsafePointer<Int8>!) -> UnsafePointer<EVP_MD>!
public func EVP_cleanup()

public func EVP_CIPHER_do_all(_ fn: (@escaping @convention(c) (UnsafePointer<EVP_CIPHER>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafeMutableRawPointer?) -> Swift.Void)!, _ arg: UnsafeMutableRawPointer!)
public func EVP_CIPHER_do_all_sorted(_ fn: (@escaping @convention(c) (UnsafePointer<EVP_CIPHER>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafeMutableRawPointer?) -> Swift.Void)!, _ arg: UnsafeMutableRawPointer!)

public func EVP_MD_do_all(_ fn: (@escaping @convention(c) (UnsafePointer<EVP_MD>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafeMutableRawPointer?) -> Swift.Void)!, _ arg: UnsafeMutableRawPointer!)
public func EVP_MD_do_all_sorted(_ fn: (@escaping @convention(c) (UnsafePointer<EVP_MD>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafeMutableRawPointer?) -> Swift.Void)!, _ arg: UnsafeMutableRawPointer!)

public func EVP_PKEY_decrypt_old(_ dec_key: UnsafeMutablePointer<UInt8>!, _ enc_key: UnsafePointer<UInt8>!, _ enc_key_len: Int32, _ private_key: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_encrypt_old(_ enc_key: UnsafeMutablePointer<UInt8>!, _ key: UnsafePointer<UInt8>!, _ key_len: Int32, _ pub_key: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_type(_ type: Int32) -> Int32
public func EVP_PKEY_id(_ pkey: UnsafePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_base_id(_ pkey: UnsafePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_bits(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_size(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_set_type(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ type: Int32) -> Int32
public func EVP_PKEY_set_type_str(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ str: UnsafePointer<Int8>!, _ len: Int32) -> Int32
public func EVP_PKEY_assign(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ type: Int32, _ key: UnsafeMutableRawPointer!) -> Int32
public func EVP_PKEY_get0(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> UnsafeMutableRawPointer!

public func EVP_PKEY_set1_RSA(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ key: UnsafeMutablePointer<rsa_st>!) -> Int32
public func EVP_PKEY_get1_RSA(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> UnsafeMutablePointer<rsa_st>!

public func EVP_PKEY_set1_DSA(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ key: UnsafeMutablePointer<dsa_st>!) -> Int32
public func EVP_PKEY_get1_DSA(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> UnsafeMutablePointer<dsa_st>!

public func EVP_PKEY_set1_DH(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ key: UnsafeMutablePointer<dh_st>!) -> Int32
public func EVP_PKEY_get1_DH(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> UnsafeMutablePointer<dh_st>!

public func EVP_PKEY_set1_EC_KEY(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ key: OpaquePointer!) -> Int32
public func EVP_PKEY_get1_EC_KEY(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> OpaquePointer!

public func EVP_PKEY_new() -> UnsafeMutablePointer<EVP_PKEY>!
public func EVP_PKEY_free(_ pkey: UnsafeMutablePointer<EVP_PKEY>!)

public func d2i_PublicKey(_ type: Int32, _ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<EVP_PKEY>!
public func i2d_PublicKey(_ a: UnsafeMutablePointer<EVP_PKEY>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func d2i_PrivateKey(_ type: Int32, _ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<EVP_PKEY>!
public func d2i_AutoPrivateKey(_ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<EVP_PKEY>!
public func i2d_PrivateKey(_ a: UnsafeMutablePointer<EVP_PKEY>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func EVP_PKEY_copy_parameters(_ to: UnsafeMutablePointer<EVP_PKEY>!, _ from: UnsafePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_missing_parameters(_ pkey: UnsafePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_save_parameters(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ mode: Int32) -> Int32
public func EVP_PKEY_cmp_parameters(_ a: UnsafePointer<EVP_PKEY>!, _ b: UnsafePointer<EVP_PKEY>!) -> Int32

public func EVP_PKEY_cmp(_ a: UnsafePointer<EVP_PKEY>!, _ b: UnsafePointer<EVP_PKEY>!) -> Int32

public func EVP_PKEY_print_public(_ out: UnsafeMutablePointer<BIO>!, _ pkey: UnsafePointer<EVP_PKEY>!, _ indent: Int32, _ pctx: OpaquePointer!) -> Int32
public func EVP_PKEY_print_private(_ out: UnsafeMutablePointer<BIO>!, _ pkey: UnsafePointer<EVP_PKEY>!, _ indent: Int32, _ pctx: OpaquePointer!) -> Int32
public func EVP_PKEY_print_params(_ out: UnsafeMutablePointer<BIO>!, _ pkey: UnsafePointer<EVP_PKEY>!, _ indent: Int32, _ pctx: OpaquePointer!) -> Int32

public func EVP_PKEY_get_default_digest_nid(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ pnid: UnsafeMutablePointer<Int32>!) -> Int32

public func EVP_CIPHER_type(_ ctx: UnsafePointer<EVP_CIPHER>!) -> Int32

/* calls methods */
public func EVP_CIPHER_param_to_asn1(_ c: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ type: UnsafeMutablePointer<ASN1_TYPE>!) -> Int32
public func EVP_CIPHER_asn1_to_param(_ c: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ type: UnsafeMutablePointer<ASN1_TYPE>!) -> Int32

/* These are used by EVP_CIPHER methods */
public func EVP_CIPHER_set_asn1_iv(_ c: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ type: UnsafeMutablePointer<ASN1_TYPE>!) -> Int32
public func EVP_CIPHER_get_asn1_iv(_ c: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ type: UnsafeMutablePointer<ASN1_TYPE>!) -> Int32

/* PKCS5 password based encryption */
public func PKCS5_PBE_keyivgen(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ pass: UnsafePointer<Int8>!, _ passlen: Int32, _ param: UnsafeMutablePointer<ASN1_TYPE>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ md: UnsafePointer<EVP_MD>!, _ en_de: Int32) -> Int32
public func PKCS5_PBKDF2_HMAC_SHA1(_ pass: UnsafePointer<Int8>!, _ passlen: Int32, _ salt: UnsafePointer<UInt8>!, _ saltlen: Int32, _ iter: Int32, _ keylen: Int32, _ out: UnsafeMutablePointer<UInt8>!) -> Int32
public func PKCS5_PBKDF2_HMAC(_ pass: UnsafePointer<Int8>!, _ passlen: Int32, _ salt: UnsafePointer<UInt8>!, _ saltlen: Int32, _ iter: Int32, _ digest: UnsafePointer<EVP_MD>!, _ keylen: Int32, _ out: UnsafeMutablePointer<UInt8>!) -> Int32
public func PKCS5_v2_PBE_keyivgen(_ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ pass: UnsafePointer<Int8>!, _ passlen: Int32, _ param: UnsafeMutablePointer<ASN1_TYPE>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ md: UnsafePointer<EVP_MD>!, _ en_de: Int32) -> Int32

public func PKCS5_PBE_add()

public func EVP_PBE_CipherInit(_ pbe_obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ pass: UnsafePointer<Int8>!, _ passlen: Int32, _ param: UnsafeMutablePointer<ASN1_TYPE>!, _ ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, _ en_de: Int32) -> Int32

/* PBE type */

/* Can appear as the outermost AlgorithmIdentifier */
public var EVP_PBE_TYPE_OUTER: Int32 { get }
/* Is an PRF type OID */
public var EVP_PBE_TYPE_PRF: Int32 { get }

public func EVP_PBE_alg_add_type(_ pbe_type: Int32, _ pbe_nid: Int32, _ cipher_nid: Int32, _ md_nid: Int32, _ keygen: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafePointer<Int8>?, Int32, UnsafeMutablePointer<ASN1_TYPE>?, UnsafePointer<EVP_CIPHER>?, UnsafePointer<EVP_MD>?, Int32) -> Int32)!) -> Int32
public func EVP_PBE_alg_add(_ nid: Int32, _ cipher: UnsafePointer<EVP_CIPHER>!, _ md: UnsafePointer<EVP_MD>!, _ keygen: (@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafePointer<Int8>?, Int32, UnsafeMutablePointer<ASN1_TYPE>?, UnsafePointer<EVP_CIPHER>?, UnsafePointer<EVP_MD>?, Int32) -> Int32)!) -> Int32
public func EVP_PBE_find(_ type: Int32, _ pbe_nid: Int32, _ pcnid: UnsafeMutablePointer<Int32>!, _ pmnid: UnsafeMutablePointer<Int32>!, _ pkeygen: UnsafeMutablePointer<(@escaping @convention(c) (UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafePointer<Int8>?, Int32, UnsafeMutablePointer<ASN1_TYPE>?, UnsafePointer<EVP_CIPHER>?, UnsafePointer<EVP_MD>?, Int32) -> Int32)?>!) -> Int32
public func EVP_PBE_cleanup()

public var ASN1_PKEY_ALIAS: Int32 { get }
public var ASN1_PKEY_DYNAMIC: Int32 { get }
public var ASN1_PKEY_SIGPARAM_NULL: Int32 { get }

public var ASN1_PKEY_CTRL_PKCS7_SIGN: Int32 { get }
public var ASN1_PKEY_CTRL_PKCS7_ENCRYPT: Int32 { get }
public var ASN1_PKEY_CTRL_DEFAULT_MD_NID: Int32 { get }
public var ASN1_PKEY_CTRL_CMS_SIGN: Int32 { get }
public var ASN1_PKEY_CTRL_CMS_ENVELOPE: Int32 { get }
public var ASN1_PKEY_CTRL_CMS_RI_TYPE: Int32 { get }

public func EVP_PKEY_asn1_get_count() -> Int32
public func EVP_PKEY_asn1_get0(_ idx: Int32) -> OpaquePointer!
public func EVP_PKEY_asn1_find(_ pe: UnsafeMutablePointer<OpaquePointer?>!, _ type: Int32) -> OpaquePointer!
public func EVP_PKEY_asn1_find_str(_ pe: UnsafeMutablePointer<OpaquePointer?>!, _ str: UnsafePointer<Int8>!, _ len: Int32) -> OpaquePointer!
public func EVP_PKEY_asn1_add0(_ ameth: OpaquePointer!) -> Int32
public func EVP_PKEY_asn1_add_alias(_ to: Int32, _ from: Int32) -> Int32
public func EVP_PKEY_asn1_get0_info(_ ppkey_id: UnsafeMutablePointer<Int32>!, _ pkey_base_id: UnsafeMutablePointer<Int32>!, _ ppkey_flags: UnsafeMutablePointer<Int32>!, _ pinfo: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ ppem_str: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ ameth: OpaquePointer!) -> Int32

public func EVP_PKEY_get0_asn1(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> OpaquePointer!
public func EVP_PKEY_asn1_new(_ id: Int32, _ flags: Int32, _ pem_str: UnsafePointer<Int8>!, _ info: UnsafePointer<Int8>!) -> OpaquePointer!
public func EVP_PKEY_asn1_copy(_ dst: OpaquePointer!, _ src: OpaquePointer!)
public func EVP_PKEY_asn1_free(_ ameth: OpaquePointer!)
public func EVP_PKEY_asn1_set_public(_ ameth: OpaquePointer!, _ pub_decode: (@escaping @convention(c) (UnsafeMutablePointer<EVP_PKEY>?, UnsafeMutablePointer<X509_PUBKEY>?) -> Int32)!, _ pub_encode: (@escaping @convention(c) (UnsafeMutablePointer<X509_PUBKEY>?, UnsafePointer<EVP_PKEY>?) -> Int32)!, _ pub_cmp: (@escaping @convention(c) (UnsafePointer<EVP_PKEY>?, UnsafePointer<EVP_PKEY>?) -> Int32)!, _ pub_print: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafePointer<EVP_PKEY>?, Int32, OpaquePointer?) -> Int32)!, _ pkey_size: (@escaping @convention(c) (UnsafePointer<EVP_PKEY>?) -> Int32)!, _ pkey_bits: (@escaping @convention(c) (UnsafePointer<EVP_PKEY>?) -> Int32)!)
public func EVP_PKEY_asn1_set_private(_ ameth: OpaquePointer!, _ priv_decode: (@escaping @convention(c) (UnsafeMutablePointer<EVP_PKEY>?, UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>?) -> Int32)!, _ priv_encode: (@escaping @convention(c) (UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>?, UnsafePointer<EVP_PKEY>?) -> Int32)!, _ priv_print: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafePointer<EVP_PKEY>?, Int32, OpaquePointer?) -> Int32)!)
public func EVP_PKEY_asn1_set_param(_ ameth: OpaquePointer!, _ param_decode: (@escaping @convention(c) (UnsafeMutablePointer<EVP_PKEY>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int32) -> Int32)!, _ param_encode: (@escaping @convention(c) (UnsafePointer<EVP_PKEY>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ param_missing: (@escaping @convention(c) (UnsafePointer<EVP_PKEY>?) -> Int32)!, _ param_copy: (@escaping @convention(c) (UnsafeMutablePointer<EVP_PKEY>?, UnsafePointer<EVP_PKEY>?) -> Int32)!, _ param_cmp: (@escaping @convention(c) (UnsafePointer<EVP_PKEY>?, UnsafePointer<EVP_PKEY>?) -> Int32)!, _ param_print: (@escaping @convention(c) (UnsafeMutablePointer<BIO>?, UnsafePointer<EVP_PKEY>?, Int32, OpaquePointer?) -> Int32)!)

public func EVP_PKEY_asn1_set_free(_ ameth: OpaquePointer!, _ pkey_free: (@escaping @convention(c) (UnsafeMutablePointer<EVP_PKEY>?) -> Swift.Void)!)
public func EVP_PKEY_asn1_set_ctrl(_ ameth: OpaquePointer!, _ pkey_ctrl: (@escaping @convention(c) (UnsafeMutablePointer<EVP_PKEY>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!)
public func EVP_PKEY_asn1_set_item(_ ameth: OpaquePointer!, _ item_verify: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, OpaquePointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<X509_ALGOR>?, UnsafeMutablePointer<ASN1_BIT_STRING>?, UnsafeMutablePointer<EVP_PKEY>?) -> Int32)!, _ item_sign: (@escaping @convention(c) (UnsafeMutablePointer<EVP_MD_CTX>?, OpaquePointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<X509_ALGOR>?, UnsafeMutablePointer<X509_ALGOR>?, UnsafeMutablePointer<ASN1_BIT_STRING>?) -> Int32)!)

public var EVP_PKEY_OP_UNDEFINED: Int32 { get }
public var EVP_PKEY_OP_PARAMGEN: Int32 { get }
public var EVP_PKEY_OP_KEYGEN: Int32 { get }
public var EVP_PKEY_OP_SIGN: Int32 { get }
public var EVP_PKEY_OP_VERIFY: Int32 { get }
public var EVP_PKEY_OP_VERIFYRECOVER: Int32 { get }
public var EVP_PKEY_OP_SIGNCTX: Int32 { get }
public var EVP_PKEY_OP_VERIFYCTX: Int32 { get }
public var EVP_PKEY_OP_ENCRYPT: Int32 { get }
public var EVP_PKEY_OP_DECRYPT: Int32 { get }
public var EVP_PKEY_OP_DERIVE: Int32 { get }

public var EVP_PKEY_CTRL_MD: Int32 { get }
public var EVP_PKEY_CTRL_PEER_KEY: Int32 { get }

public var EVP_PKEY_CTRL_PKCS7_ENCRYPT: Int32 { get }
public var EVP_PKEY_CTRL_PKCS7_DECRYPT: Int32 { get }

public var EVP_PKEY_CTRL_PKCS7_SIGN: Int32 { get }

public var EVP_PKEY_CTRL_SET_MAC_KEY: Int32 { get }

public var EVP_PKEY_CTRL_DIGESTINIT: Int32 { get }

/* Used by GOST key encryption in TLS */
public var EVP_PKEY_CTRL_SET_IV: Int32 { get }

public var EVP_PKEY_CTRL_CMS_ENCRYPT: Int32 { get }
public var EVP_PKEY_CTRL_CMS_DECRYPT: Int32 { get }
public var EVP_PKEY_CTRL_CMS_SIGN: Int32 { get }

public var EVP_PKEY_CTRL_CIPHER: Int32 { get }

public var EVP_PKEY_CTRL_GET_MD: Int32 { get }

public var EVP_PKEY_ALG_CTRL: Int32 { get }

public var EVP_PKEY_FLAG_AUTOARGLEN: Int32 { get }
/*
 * Method handles all operations: don't assume any digest related defaults.
 */
public var EVP_PKEY_FLAG_SIGCTX_CUSTOM: Int32 { get }

public func EVP_PKEY_meth_find(_ type: Int32) -> OpaquePointer!
public func EVP_PKEY_meth_new(_ id: Int32, _ flags: Int32) -> OpaquePointer!
public func EVP_PKEY_meth_get0_info(_ ppkey_id: UnsafeMutablePointer<Int32>!, _ pflags: UnsafeMutablePointer<Int32>!, _ meth: OpaquePointer!)
public func EVP_PKEY_meth_copy(_ dst: OpaquePointer!, _ src: OpaquePointer!)
public func EVP_PKEY_meth_free(_ pmeth: OpaquePointer!)
public func EVP_PKEY_meth_add0(_ pmeth: OpaquePointer!) -> Int32

public func EVP_PKEY_CTX_new(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ e: OpaquePointer!) -> OpaquePointer!
public func EVP_PKEY_CTX_new_id(_ id: Int32, _ e: OpaquePointer!) -> OpaquePointer!
public func EVP_PKEY_CTX_dup(_ ctx: OpaquePointer!) -> OpaquePointer!
public func EVP_PKEY_CTX_free(_ ctx: OpaquePointer!)

public func EVP_PKEY_CTX_ctrl(_ ctx: OpaquePointer!, _ keytype: Int32, _ optype: Int32, _ cmd: Int32, _ p1: Int32, _ p2: UnsafeMutableRawPointer!) -> Int32
public func EVP_PKEY_CTX_ctrl_str(_ ctx: OpaquePointer!, _ type: UnsafePointer<Int8>!, _ value: UnsafePointer<Int8>!) -> Int32

public func EVP_PKEY_CTX_get_operation(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_CTX_set0_keygen_info(_ ctx: OpaquePointer!, _ dat: UnsafeMutablePointer<Int32>!, _ datlen: Int32)

public func EVP_PKEY_new_mac_key(_ type: Int32, _ e: OpaquePointer!, _ key: UnsafePointer<UInt8>!, _ keylen: Int32) -> UnsafeMutablePointer<EVP_PKEY>!

public func EVP_PKEY_CTX_set_data(_ ctx: OpaquePointer!, _ data: UnsafeMutableRawPointer!)
public func EVP_PKEY_CTX_get_data(_ ctx: OpaquePointer!) -> UnsafeMutableRawPointer!
public func EVP_PKEY_CTX_get0_pkey(_ ctx: OpaquePointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func EVP_PKEY_CTX_get0_peerkey(_ ctx: OpaquePointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func EVP_PKEY_CTX_set_app_data(_ ctx: OpaquePointer!, _ data: UnsafeMutableRawPointer!)
public func EVP_PKEY_CTX_get_app_data(_ ctx: OpaquePointer!) -> UnsafeMutableRawPointer!

public func EVP_PKEY_sign_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_sign(_ ctx: OpaquePointer!, _ sig: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<Int>!, _ tbs: UnsafePointer<UInt8>!, _ tbslen: Int) -> Int32
public func EVP_PKEY_verify_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_verify(_ ctx: OpaquePointer!, _ sig: UnsafePointer<UInt8>!, _ siglen: Int, _ tbs: UnsafePointer<UInt8>!, _ tbslen: Int) -> Int32
public func EVP_PKEY_verify_recover_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_verify_recover(_ ctx: OpaquePointer!, _ rout: UnsafeMutablePointer<UInt8>!, _ routlen: UnsafeMutablePointer<Int>!, _ sig: UnsafePointer<UInt8>!, _ siglen: Int) -> Int32
public func EVP_PKEY_encrypt_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_encrypt(_ ctx: OpaquePointer!, _ out: UnsafeMutablePointer<UInt8>!, _ outlen: UnsafeMutablePointer<Int>!, _ in: UnsafePointer<UInt8>!, _ inlen: Int) -> Int32
public func EVP_PKEY_decrypt_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_decrypt(_ ctx: OpaquePointer!, _ out: UnsafeMutablePointer<UInt8>!, _ outlen: UnsafeMutablePointer<Int>!, _ in: UnsafePointer<UInt8>!, _ inlen: Int) -> Int32

public func EVP_PKEY_derive_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_derive_set_peer(_ ctx: OpaquePointer!, _ peer: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_derive(_ ctx: OpaquePointer!, _ key: UnsafeMutablePointer<UInt8>!, _ keylen: UnsafeMutablePointer<Int>!) -> Int32

public typealias EVP_PKEY_gen_cb = (OpaquePointer?) -> Int32

public func EVP_PKEY_paramgen_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_paramgen(_ ctx: OpaquePointer!, _ ppkey: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!) -> Int32
public func EVP_PKEY_keygen_init(_ ctx: OpaquePointer!) -> Int32
public func EVP_PKEY_keygen(_ ctx: OpaquePointer!, _ ppkey: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!) -> Int32

public func EVP_PKEY_CTX_set_cb(_ ctx: OpaquePointer!, _ cb: (@escaping @convention(c) (OpaquePointer?) -> Int32)!)
public func EVP_PKEY_CTX_get_cb(_ ctx: OpaquePointer!) -> (@convention(c) (OpaquePointer?) -> Int32)!

public func EVP_PKEY_CTX_get_keygen_info(_ ctx: OpaquePointer!, _ idx: Int32) -> Int32

public func EVP_PKEY_meth_set_init(_ pmeth: OpaquePointer!, _ init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!)

public func EVP_PKEY_meth_set_copy(_ pmeth: OpaquePointer!, _ copy: (@escaping @convention(c) (OpaquePointer?, OpaquePointer?) -> Int32)!)

public func EVP_PKEY_meth_set_cleanup(_ pmeth: OpaquePointer!, _ cleanup: (@escaping @convention(c) (OpaquePointer?) -> Swift.Void)!)

public func EVP_PKEY_meth_set_paramgen(_ pmeth: OpaquePointer!, _ paramgen_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ paramgen: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<EVP_PKEY>?) -> Int32)!)

public func EVP_PKEY_meth_set_keygen(_ pmeth: OpaquePointer!, _ keygen_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ keygen: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<EVP_PKEY>?) -> Int32)!)

public func EVP_PKEY_meth_set_sign(_ pmeth: OpaquePointer!, _ sign_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ sign: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<Int>?, UnsafePointer<UInt8>?, Int) -> Int32)!)

public func EVP_PKEY_meth_set_verify(_ pmeth: OpaquePointer!, _ verify_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ verify: (@escaping @convention(c) (OpaquePointer?, UnsafePointer<UInt8>?, Int, UnsafePointer<UInt8>?, Int) -> Int32)!)

public func EVP_PKEY_meth_set_verify_recover(_ pmeth: OpaquePointer!, _ verify_recover_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ verify_recover: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<Int>?, UnsafePointer<UInt8>?, Int) -> Int32)!)

public func EVP_PKEY_meth_set_signctx(_ pmeth: OpaquePointer!, _ signctx_init: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!, _ signctx: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!)

public func EVP_PKEY_meth_set_verifyctx(_ pmeth: OpaquePointer!, _ verifyctx_init: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!, _ verifyctx: (@escaping @convention(c) (OpaquePointer?, UnsafePointer<UInt8>?, Int32, UnsafeMutablePointer<EVP_MD_CTX>?) -> Int32)!)

public func EVP_PKEY_meth_set_encrypt(_ pmeth: OpaquePointer!, _ encrypt_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ encryptfn: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<Int>?, UnsafePointer<UInt8>?, Int) -> Int32)!)

public func EVP_PKEY_meth_set_decrypt(_ pmeth: OpaquePointer!, _ decrypt_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ decrypt: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<Int>?, UnsafePointer<UInt8>?, Int) -> Int32)!)

public func EVP_PKEY_meth_set_derive(_ pmeth: OpaquePointer!, _ derive_init: (@escaping @convention(c) (OpaquePointer?) -> Int32)!, _ derive: (@escaping @convention(c) (OpaquePointer?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<Int>?) -> Int32)!)

public func EVP_PKEY_meth_set_ctrl(_ pmeth: OpaquePointer!, _ ctrl: (@escaping @convention(c) (OpaquePointer?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ ctrl_str: (@escaping @convention(c) (OpaquePointer?, UnsafePointer<Int8>?, UnsafePointer<Int8>?) -> Int32)!)

public func EVP_add_alg_module()

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_EVP_strings()

/* Error codes for the EVP functions. */

/* Function codes. */
public var EVP_F_AESNI_INIT_KEY: Int32 { get }
public var EVP_F_AESNI_XTS_CIPHER: Int32 { get }
public var EVP_F_AES_INIT_KEY: Int32 { get }
public var EVP_F_AES_T4_INIT_KEY: Int32 { get }
public var EVP_F_AES_XTS: Int32 { get }
public var EVP_F_AES_XTS_CIPHER: Int32 { get }
public var EVP_F_ALG_MODULE_INIT: Int32 { get }
public var EVP_F_CAMELLIA_INIT_KEY: Int32 { get }
public var EVP_F_CMAC_INIT: Int32 { get }
public var EVP_F_CMLL_T4_INIT_KEY: Int32 { get }
public var EVP_F_D2I_PKEY: Int32 { get }
public var EVP_F_DO_SIGVER_INIT: Int32 { get }
public var EVP_F_DSAPKEY2PKCS8: Int32 { get }
public var EVP_F_DSA_PKEY2PKCS8: Int32 { get }
public var EVP_F_ECDSA_PKEY2PKCS8: Int32 { get }
public var EVP_F_ECKEY_PKEY2PKCS8: Int32 { get }
public var EVP_F_EVP_CIPHERINIT_EX: Int32 { get }
public var EVP_F_EVP_CIPHER_CTX_COPY: Int32 { get }
public var EVP_F_EVP_CIPHER_CTX_CTRL: Int32 { get }
public var EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH: Int32 { get }
public var EVP_F_EVP_DECRYPTFINAL_EX: Int32 { get }
public var EVP_F_EVP_DIGESTINIT_EX: Int32 { get }
public var EVP_F_EVP_ENCRYPTFINAL_EX: Int32 { get }
public var EVP_F_EVP_MD_CTX_COPY_EX: Int32 { get }
public var EVP_F_EVP_MD_SIZE: Int32 { get }
public var EVP_F_EVP_OPENINIT: Int32 { get }
public var EVP_F_EVP_PBE_ALG_ADD: Int32 { get }
public var EVP_F_EVP_PBE_ALG_ADD_TYPE: Int32 { get }
public var EVP_F_EVP_PBE_CIPHERINIT: Int32 { get }
public var EVP_F_EVP_PKCS82PKEY: Int32 { get }
public var EVP_F_EVP_PKCS82PKEY_BROKEN: Int32 { get }
public var EVP_F_EVP_PKEY2PKCS8_BROKEN: Int32 { get }
public var EVP_F_EVP_PKEY_COPY_PARAMETERS: Int32 { get }
public var EVP_F_EVP_PKEY_CTX_CTRL: Int32 { get }
public var EVP_F_EVP_PKEY_CTX_CTRL_STR: Int32 { get }
public var EVP_F_EVP_PKEY_CTX_DUP: Int32 { get }
public var EVP_F_EVP_PKEY_DECRYPT: Int32 { get }
public var EVP_F_EVP_PKEY_DECRYPT_INIT: Int32 { get }
public var EVP_F_EVP_PKEY_DECRYPT_OLD: Int32 { get }
public var EVP_F_EVP_PKEY_DERIVE: Int32 { get }
public var EVP_F_EVP_PKEY_DERIVE_INIT: Int32 { get }
public var EVP_F_EVP_PKEY_DERIVE_SET_PEER: Int32 { get }
public var EVP_F_EVP_PKEY_ENCRYPT: Int32 { get }
public var EVP_F_EVP_PKEY_ENCRYPT_INIT: Int32 { get }
public var EVP_F_EVP_PKEY_ENCRYPT_OLD: Int32 { get }
public var EVP_F_EVP_PKEY_GET1_DH: Int32 { get }
public var EVP_F_EVP_PKEY_GET1_DSA: Int32 { get }
public var EVP_F_EVP_PKEY_GET1_ECDSA: Int32 { get }
public var EVP_F_EVP_PKEY_GET1_EC_KEY: Int32 { get }
public var EVP_F_EVP_PKEY_GET1_RSA: Int32 { get }
public var EVP_F_EVP_PKEY_KEYGEN: Int32 { get }
public var EVP_F_EVP_PKEY_KEYGEN_INIT: Int32 { get }
public var EVP_F_EVP_PKEY_NEW: Int32 { get }
public var EVP_F_EVP_PKEY_PARAMGEN: Int32 { get }
public var EVP_F_EVP_PKEY_PARAMGEN_INIT: Int32 { get }
public var EVP_F_EVP_PKEY_SIGN: Int32 { get }
public var EVP_F_EVP_PKEY_SIGN_INIT: Int32 { get }
public var EVP_F_EVP_PKEY_VERIFY: Int32 { get }
public var EVP_F_EVP_PKEY_VERIFY_INIT: Int32 { get }
public var EVP_F_EVP_PKEY_VERIFY_RECOVER: Int32 { get }
public var EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT: Int32 { get }
public var EVP_F_EVP_RIJNDAEL: Int32 { get }
public var EVP_F_EVP_SIGNFINAL: Int32 { get }
public var EVP_F_EVP_VERIFYFINAL: Int32 { get }
public var EVP_F_FIPS_CIPHERINIT: Int32 { get }
public var EVP_F_FIPS_CIPHER_CTX_COPY: Int32 { get }
public var EVP_F_FIPS_CIPHER_CTX_CTRL: Int32 { get }
public var EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH: Int32 { get }
public var EVP_F_FIPS_DIGESTINIT: Int32 { get }
public var EVP_F_FIPS_MD_CTX_COPY: Int32 { get }
public var EVP_F_HMAC_INIT_EX: Int32 { get }
public var EVP_F_INT_CTX_NEW: Int32 { get }
public var EVP_F_PKCS5_PBE_KEYIVGEN: Int32 { get }
public var EVP_F_PKCS5_V2_PBE_KEYIVGEN: Int32 { get }
public var EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN: Int32 { get }
public var EVP_F_PKCS8_SET_BROKEN: Int32 { get }
public var EVP_F_PKEY_SET_TYPE: Int32 { get }
public var EVP_F_RC2_MAGIC_TO_METH: Int32 { get }
public var EVP_F_RC5_CTRL: Int32 { get }

/* Reason codes. */
public var EVP_R_AES_IV_SETUP_FAILED: Int32 { get }
public var EVP_R_AES_KEY_SETUP_FAILED: Int32 { get }
public var EVP_R_ASN1_LIB: Int32 { get }
public var EVP_R_BAD_BLOCK_LENGTH: Int32 { get }
public var EVP_R_BAD_DECRYPT: Int32 { get }
public var EVP_R_BAD_KEY_LENGTH: Int32 { get }
public var EVP_R_BN_DECODE_ERROR: Int32 { get }
public var EVP_R_BN_PUBKEY_ERROR: Int32 { get }
public var EVP_R_BUFFER_TOO_SMALL: Int32 { get }
public var EVP_R_CAMELLIA_KEY_SETUP_FAILED: Int32 { get }
public var EVP_R_CIPHER_PARAMETER_ERROR: Int32 { get }
public var EVP_R_COMMAND_NOT_SUPPORTED: Int32 { get }
public var EVP_R_CTRL_NOT_IMPLEMENTED: Int32 { get }
public var EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED: Int32 { get }
public var EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH: Int32 { get }
public var EVP_R_DECODE_ERROR: Int32 { get }
public var EVP_R_DIFFERENT_KEY_TYPES: Int32 { get }
public var EVP_R_DIFFERENT_PARAMETERS: Int32 { get }
public var EVP_R_DISABLED_FOR_FIPS: Int32 { get }
public var EVP_R_ENCODE_ERROR: Int32 { get }
public var EVP_R_ERROR_LOADING_SECTION: Int32 { get }
public var EVP_R_ERROR_SETTING_FIPS_MODE: Int32 { get }
public var EVP_R_EVP_PBE_CIPHERINIT_ERROR: Int32 { get }
public var EVP_R_EXPECTING_AN_RSA_KEY: Int32 { get }
public var EVP_R_EXPECTING_A_DH_KEY: Int32 { get }
public var EVP_R_EXPECTING_A_DSA_KEY: Int32 { get }
public var EVP_R_EXPECTING_A_ECDSA_KEY: Int32 { get }
public var EVP_R_EXPECTING_A_EC_KEY: Int32 { get }
public var EVP_R_FIPS_MODE_NOT_SUPPORTED: Int32 { get }
public var EVP_R_INITIALIZATION_ERROR: Int32 { get }
public var EVP_R_INPUT_NOT_INITIALIZED: Int32 { get }
public var EVP_R_INVALID_DIGEST: Int32 { get }
public var EVP_R_INVALID_FIPS_MODE: Int32 { get }
public var EVP_R_INVALID_KEY_LENGTH: Int32 { get }
public var EVP_R_INVALID_OPERATION: Int32 { get }
public var EVP_R_IV_TOO_LARGE: Int32 { get }
public var EVP_R_KEYGEN_FAILURE: Int32 { get }
public var EVP_R_MESSAGE_DIGEST_IS_NULL: Int32 { get }
public var EVP_R_METHOD_NOT_SUPPORTED: Int32 { get }
public var EVP_R_MISSING_PARAMETERS: Int32 { get }
public var EVP_R_NO_CIPHER_SET: Int32 { get }
public var EVP_R_NO_DEFAULT_DIGEST: Int32 { get }
public var EVP_R_NO_DIGEST_SET: Int32 { get }
public var EVP_R_NO_DSA_PARAMETERS: Int32 { get }
public var EVP_R_NO_KEY_SET: Int32 { get }
public var EVP_R_NO_OPERATION_SET: Int32 { get }
public var EVP_R_NO_SIGN_FUNCTION_CONFIGURED: Int32 { get }
public var EVP_R_NO_VERIFY_FUNCTION_CONFIGURED: Int32 { get }
public var EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE: Int32 { get }
public var EVP_R_OPERATON_NOT_INITIALIZED: Int32 { get }
public var EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE: Int32 { get }
public var EVP_R_PRIVATE_KEY_DECODE_ERROR: Int32 { get }
public var EVP_R_PRIVATE_KEY_ENCODE_ERROR: Int32 { get }
public var EVP_R_PUBLIC_KEY_NOT_RSA: Int32 { get }
public var EVP_R_TOO_LARGE: Int32 { get }
public var EVP_R_UNKNOWN_CIPHER: Int32 { get }
public var EVP_R_UNKNOWN_DIGEST: Int32 { get }
public var EVP_R_UNKNOWN_OPTION: Int32 { get }
public var EVP_R_UNKNOWN_PBE_ALGORITHM: Int32 { get }
public var EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS: Int32 { get }
public var EVP_R_UNSUPPORTED_ALGORITHM: Int32 { get }
public var EVP_R_UNSUPPORTED_CIPHER: Int32 { get }
public var EVP_R_UNSUPPORTED_KEYLENGTH: Int32 { get }
public var EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION: Int32 { get }
public var EVP_R_UNSUPPORTED_KEY_SIZE: Int32 { get }
public var EVP_R_UNSUPPORTED_PRF: Int32 { get }
public var EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM: Int32 { get }
public var EVP_R_UNSUPPORTED_SALT_TYPE: Int32 { get }
public var EVP_R_WRAP_MODE_NOT_ALLOWED: Int32 { get }
public var EVP_R_WRONG_FINAL_BLOCK_LENGTH: Int32 { get }
public var EVP_R_WRONG_PUBLIC_KEY_TYPE: Int32 { get }
/* crypto/err/err.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

public var ERR_TXT_MALLOCED: Int32 { get }
public var ERR_TXT_STRING: Int32 { get }

public var ERR_FLAG_MARK: Int32 { get }

public var ERR_NUM_ERRORS: Int32 { get }
public struct err_state_st {

    public var tid: CRYPTO_THREADID

    public var err_flags: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)

    public var err_buffer: (UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt)

    public var err_data: (UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?)

    public var err_data_flags: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)

    public var err_file: (UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?)

    public var err_line: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)

    public var top: Int32

    public var bottom: Int32

    public init()

    public init(tid: CRYPTO_THREADID, err_flags: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32), err_buffer: (UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt, UInt), err_data: (UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?, UnsafeMutablePointer<Int8>?), err_data_flags: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32), err_file: (UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?, UnsafePointer<Int8>?), err_line: (Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32), top: Int32, bottom: Int32)
}
public typealias ERR_STATE = err_state_st

/* library */
public var ERR_LIB_NONE: Int32 { get }
public var ERR_LIB_SYS: Int32 { get }
public var ERR_LIB_BN: Int32 { get }
public var ERR_LIB_RSA: Int32 { get }
public var ERR_LIB_DH: Int32 { get }
public var ERR_LIB_EVP: Int32 { get }
public var ERR_LIB_BUF: Int32 { get }
public var ERR_LIB_OBJ: Int32 { get }
public var ERR_LIB_PEM: Int32 { get }
public var ERR_LIB_DSA: Int32 { get }
public var ERR_LIB_X509: Int32 { get }
/* #define ERR_LIB_METH         12 */
public var ERR_LIB_ASN1: Int32 { get }
public var ERR_LIB_CONF: Int32 { get }
public var ERR_LIB_CRYPTO: Int32 { get }
public var ERR_LIB_EC: Int32 { get }
public var ERR_LIB_SSL: Int32 { get }
/* #define ERR_LIB_SSL23        21 */
/* #define ERR_LIB_SSL2         22 */
/* #define ERR_LIB_SSL3         23 */
/* #define ERR_LIB_RSAREF       30 */
/* #define ERR_LIB_PROXY        31 */
public var ERR_LIB_BIO: Int32 { get }
public var ERR_LIB_PKCS7: Int32 { get }
public var ERR_LIB_X509V3: Int32 { get }
public var ERR_LIB_PKCS12: Int32 { get }
public var ERR_LIB_RAND: Int32 { get }
public var ERR_LIB_DSO: Int32 { get }
public var ERR_LIB_ENGINE: Int32 { get }
public var ERR_LIB_OCSP: Int32 { get }
public var ERR_LIB_UI: Int32 { get }
public var ERR_LIB_COMP: Int32 { get }
public var ERR_LIB_ECDSA: Int32 { get }
public var ERR_LIB_ECDH: Int32 { get }
public var ERR_LIB_STORE: Int32 { get }
public var ERR_LIB_FIPS: Int32 { get }
public var ERR_LIB_CMS: Int32 { get }
public var ERR_LIB_TS: Int32 { get }
public var ERR_LIB_HMAC: Int32 { get }
public var ERR_LIB_JPAKE: Int32 { get }

public var ERR_LIB_USER: Int32 { get }

/*
 * Borland C seems too stupid to be able to shift and do longs in the
 * pre-processor :-(
 */

/* OS functions */
public var SYS_F_FOPEN: Int32 { get }
public var SYS_F_CONNECT: Int32 { get }
public var SYS_F_GETSERVBYNAME: Int32 { get }
public var SYS_F_SOCKET: Int32 { get }
public var SYS_F_IOCTLSOCKET: Int32 { get }
public var SYS_F_BIND: Int32 { get }
public var SYS_F_LISTEN: Int32 { get }
public var SYS_F_ACCEPT: Int32 { get }
public var SYS_F_WSASTARTUP: Int32 { get } /* Winsock stuff */
public var SYS_F_OPENDIR: Int32 { get }
public var SYS_F_FREAD: Int32 { get }

/* reasons */
public var ERR_R_SYS_LIB: Int32 { get } /* 2 */
public var ERR_R_BN_LIB: Int32 { get } /* 3 */
public var ERR_R_RSA_LIB: Int32 { get } /* 4 */
public var ERR_R_DH_LIB: Int32 { get } /* 5 */
public var ERR_R_EVP_LIB: Int32 { get } /* 6 */
public var ERR_R_BUF_LIB: Int32 { get } /* 7 */
public var ERR_R_OBJ_LIB: Int32 { get } /* 8 */
public var ERR_R_PEM_LIB: Int32 { get } /* 9 */
public var ERR_R_DSA_LIB: Int32 { get } /* 10 */
public var ERR_R_X509_LIB: Int32 { get } /* 11 */
public var ERR_R_ASN1_LIB: Int32 { get } /* 13 */
public var ERR_R_CONF_LIB: Int32 { get } /* 14 */
public var ERR_R_CRYPTO_LIB: Int32 { get } /* 15 */
public var ERR_R_EC_LIB: Int32 { get } /* 16 */
public var ERR_R_SSL_LIB: Int32 { get } /* 20 */
public var ERR_R_BIO_LIB: Int32 { get } /* 32 */
public var ERR_R_PKCS7_LIB: Int32 { get } /* 33 */
public var ERR_R_X509V3_LIB: Int32 { get } /* 34 */
public var ERR_R_PKCS12_LIB: Int32 { get } /* 35 */
public var ERR_R_RAND_LIB: Int32 { get } /* 36 */
public var ERR_R_DSO_LIB: Int32 { get } /* 37 */
public var ERR_R_ENGINE_LIB: Int32 { get } /* 38 */
public var ERR_R_OCSP_LIB: Int32 { get } /* 39 */
public var ERR_R_UI_LIB: Int32 { get } /* 40 */
public var ERR_R_COMP_LIB: Int32 { get } /* 41 */
public var ERR_R_ECDSA_LIB: Int32 { get } /* 42 */
public var ERR_R_ECDH_LIB: Int32 { get } /* 43 */
public var ERR_R_STORE_LIB: Int32 { get } /* 44 */
public var ERR_R_TS_LIB: Int32 { get } /* 45 */

public var ERR_R_NESTED_ASN1_ERROR: Int32 { get }
public var ERR_R_BAD_ASN1_OBJECT_HEADER: Int32 { get }
public var ERR_R_BAD_GET_ASN1_OBJECT_CALL: Int32 { get }
public var ERR_R_EXPECTING_AN_ASN1_SEQUENCE: Int32 { get }
public var ERR_R_ASN1_LENGTH_MISMATCH: Int32 { get }
public var ERR_R_MISSING_ASN1_EOS: Int32 { get }

/* fatal error */
public var ERR_R_FATAL: Int32 { get }

/*
 * 99 is the maximum possible ERR_R_... code, higher values are reserved for
 * the individual libraries
 */

public struct ERR_string_data_st {

    public var error: UInt

    public var string: UnsafePointer<Int8>!

    public init()

    public init(error: UInt, string: UnsafePointer<Int8>!)
}
public typealias ERR_STRING_DATA = ERR_string_data_st

public func ERR_put_error(_ lib: Int32, _ func: Int32, _ reason: Int32, _ file: UnsafePointer<Int8>!, _ line: Int32)
public func ERR_set_error_data(_ data: UnsafeMutablePointer<Int8>!, _ flags: Int32)

public func ERR_get_error() -> UInt
public func ERR_get_error_line(_ file: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ line: UnsafeMutablePointer<Int32>!) -> UInt
public func ERR_get_error_line_data(_ file: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ line: UnsafeMutablePointer<Int32>!, _ data: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ flags: UnsafeMutablePointer<Int32>!) -> UInt
public func ERR_peek_error() -> UInt
public func ERR_peek_error_line(_ file: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ line: UnsafeMutablePointer<Int32>!) -> UInt
public func ERR_peek_error_line_data(_ file: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ line: UnsafeMutablePointer<Int32>!, _ data: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ flags: UnsafeMutablePointer<Int32>!) -> UInt
public func ERR_peek_last_error() -> UInt
public func ERR_peek_last_error_line(_ file: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ line: UnsafeMutablePointer<Int32>!) -> UInt
public func ERR_peek_last_error_line_data(_ file: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ line: UnsafeMutablePointer<Int32>!, _ data: UnsafeMutablePointer<UnsafePointer<Int8>?>!, _ flags: UnsafeMutablePointer<Int32>!) -> UInt
public func ERR_clear_error()
public func ERR_error_string(_ e: UInt, _ buf: UnsafeMutablePointer<Int8>!) -> UnsafeMutablePointer<Int8>!
public func ERR_error_string_n(_ e: UInt, _ buf: UnsafeMutablePointer<Int8>!, _ len: Int)
public func ERR_lib_error_string(_ e: UInt) -> UnsafePointer<Int8>!
public func ERR_func_error_string(_ e: UInt) -> UnsafePointer<Int8>!
public func ERR_reason_error_string(_ e: UInt) -> UnsafePointer<Int8>!
public func ERR_print_errors_cb(_ cb: (@escaping @convention(c) (UnsafePointer<Int8>?, Int, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!)

public func ERR_print_errors_fp(_ fp: UnsafeMutablePointer<FILE>!)

public func ERR_print_errors(_ bp: UnsafeMutablePointer<BIO>!)

public func ERR_add_error_vdata(_ num: Int32, _ args: CVaListPointer)
public func ERR_load_strings(_ lib: Int32, _ str: UnsafeMutablePointer<ERR_STRING_DATA>!)
public func ERR_unload_strings(_ lib: Int32, _ str: UnsafeMutablePointer<ERR_STRING_DATA>!)
public func ERR_load_ERR_strings()
public func ERR_load_crypto_strings()
public func ERR_free_strings()

public func ERR_remove_thread_state(_ tid: UnsafePointer<CRYPTO_THREADID>!)

public func ERR_remove_state(_ pid: UInt) /* if zero we look it up */

public func ERR_get_state() -> UnsafeMutablePointer<ERR_STATE>!

public func ERR_get_string_table() -> OpaquePointer!
public func ERR_get_err_state_table() -> OpaquePointer!
public func ERR_release_err_state_table(_ hash: UnsafeMutablePointer<OpaquePointer?>!)

public func ERR_get_next_error_library() -> Int32

public func ERR_set_mark() -> Int32
public func ERR_pop_to_mark() -> Int32

/* Already defined in ossl_typ.h */
/* typedef struct st_ERR_FNS ERR_FNS; */
/*
 * An application can use this function and provide the return value to
 * loaded modules that should use the application's ERR state/functionality
 */
public func ERR_get_implementation() -> OpaquePointer!
/*
 * A loaded module should call this function prior to any ERR operations
 * using the application's "ERR_FNS".
 */
public func ERR_set_implementation(_ fns: OpaquePointer!) -> Int32

public typealias COMP_CTX = comp_ctx_st

public struct comp_method_st {

    public var type: Int32 /* NID for compression library */

    public var name: UnsafePointer<Int8>! /* A text string to identify the library */

    public var `init`: (@convention(c) (UnsafeMutablePointer<COMP_CTX>?) -> Int32)!

    public var finish: (@convention(c) (UnsafeMutablePointer<COMP_CTX>?) -> Swift.Void)!

    public var compress: (@convention(c) (UnsafeMutablePointer<COMP_CTX>?, UnsafeMutablePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> Int32)!

    public var expand: (@convention(c) (UnsafeMutablePointer<COMP_CTX>?, UnsafeMutablePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> Int32)!

    /*
     * The following two do NOTHING, but are kept for backward compatibility
     */
    public var ctrl: (@convention(c) () -> Int)!

    public var callback_ctrl: (@convention(c) () -> Int)!

    public init()

    public init(type: Int32, name: UnsafePointer<Int8>!, init: (@escaping @convention(c) (UnsafeMutablePointer<COMP_CTX>?) -> Int32)!, finish: (@escaping @convention(c) (UnsafeMutablePointer<COMP_CTX>?) -> Swift.Void)!, compress: (@escaping @convention(c) (UnsafeMutablePointer<COMP_CTX>?, UnsafeMutablePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> Int32)!, expand: (@escaping @convention(c) (UnsafeMutablePointer<COMP_CTX>?, UnsafeMutablePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> Int32)!, ctrl: (@escaping @convention(c) () -> Int)!, callback_ctrl: (@escaping @convention(c) () -> Int)!)
}
public typealias COMP_METHOD = comp_method_st

public struct comp_ctx_st {

    public var meth: UnsafeMutablePointer<COMP_METHOD>!

    public var compress_in: UInt

    public var compress_out: UInt

    public var expand_in: UInt

    public var expand_out: UInt

    public var ex_data: CRYPTO_EX_DATA

    public init()

    public init(meth: UnsafeMutablePointer<COMP_METHOD>!, compress_in: UInt, compress_out: UInt, expand_in: UInt, expand_out: UInt, ex_data: CRYPTO_EX_DATA)
}

public func COMP_CTX_new(_ meth: UnsafeMutablePointer<COMP_METHOD>!) -> UnsafeMutablePointer<COMP_CTX>!
public func COMP_CTX_free(_ ctx: UnsafeMutablePointer<COMP_CTX>!)
public func COMP_compress_block(_ ctx: UnsafeMutablePointer<COMP_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ olen: Int32, _ in: UnsafeMutablePointer<UInt8>!, _ ilen: Int32) -> Int32
public func COMP_expand_block(_ ctx: UnsafeMutablePointer<COMP_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ olen: Int32, _ in: UnsafeMutablePointer<UInt8>!, _ ilen: Int32) -> Int32
public func COMP_rle() -> UnsafeMutablePointer<COMP_METHOD>!
public func COMP_zlib() -> UnsafeMutablePointer<COMP_METHOD>!
public func COMP_zlib_cleanup()

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_COMP_strings()

/* Error codes for the COMP functions. */

/* Function codes. */
public var COMP_F_BIO_ZLIB_FLUSH: Int32 { get }
public var COMP_F_BIO_ZLIB_NEW: Int32 { get }
public var COMP_F_BIO_ZLIB_READ: Int32 { get }
public var COMP_F_BIO_ZLIB_WRITE: Int32 { get }

/* Reason codes. */
public var COMP_R_ZLIB_DEFLATE_ERROR: Int32 { get }
public var COMP_R_ZLIB_INFLATE_ERROR: Int32 { get }
public var COMP_R_ZLIB_NOT_SUPPORTED: Int32 { get }
/* crypto/buffer/buffer.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Already declared in ossl_typ.h */
/* typedef struct buf_mem_st BUF_MEM; */

public struct buf_mem_st {

    public var length: Int /* current number of bytes */

    public var data: UnsafeMutablePointer<Int8>!

    public var max: Int /* size of buffer */

    public init()

    public init(length: Int, data: UnsafeMutablePointer<Int8>!, max: Int)
}

public func BUF_MEM_new() -> UnsafeMutablePointer<BUF_MEM>!
public func BUF_MEM_free(_ a: UnsafeMutablePointer<BUF_MEM>!)
public func BUF_MEM_grow(_ str: UnsafeMutablePointer<BUF_MEM>!, _ len: Int) -> Int32
public func BUF_MEM_grow_clean(_ str: UnsafeMutablePointer<BUF_MEM>!, _ len: Int) -> Int32
public func BUF_strnlen(_ str: UnsafePointer<Int8>!, _ maxlen: Int) -> Int
public func BUF_strdup(_ str: UnsafePointer<Int8>!) -> UnsafeMutablePointer<Int8>!

/*
 * Like strndup, but in addition, explicitly guarantees to never read past the
 * first |siz| bytes of |str|.
 */
public func BUF_strndup(_ str: UnsafePointer<Int8>!, _ siz: Int) -> UnsafeMutablePointer<Int8>!

public func BUF_memdup(_ data: UnsafeRawPointer!, _ siz: Int) -> UnsafeMutableRawPointer!
public func BUF_reverse(_ out: UnsafeMutablePointer<UInt8>!, _ in: UnsafePointer<UInt8>!, _ siz: Int)

/* safe string functions */
public func BUF_strlcpy(_ dst: UnsafeMutablePointer<Int8>!, _ src: UnsafePointer<Int8>!, _ siz: Int) -> Int
public func BUF_strlcat(_ dst: UnsafeMutablePointer<Int8>!, _ src: UnsafePointer<Int8>!, _ siz: Int) -> Int

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_BUF_strings()

/* Error codes for the BUF functions. */

/* Function codes. */
public var BUF_F_BUF_MEMDUP: Int32 { get }
public var BUF_F_BUF_MEM_GROW: Int32 { get }
public var BUF_F_BUF_MEM_GROW_CLEAN: Int32 { get }
public var BUF_F_BUF_MEM_NEW: Int32 { get }
public var BUF_F_BUF_STRDUP: Int32 { get }
public var BUF_F_BUF_STRNDUP: Int32 { get }
/* crypto/ec/ec.h */
/*
 * Originally written by Bodo Moeller for the OpenSSL project.
 */
/**
 * \file crypto/ec/ec.h Include file for the OpenSSL EC functions
 * \author Originally written by Bodo Moeller for the OpenSSL project
 */
/* ====================================================================
 * Copyright (c) 1998-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 *
 * Portions of the attached software ("Contribution") are developed by
 * SUN MICROSYSTEMS, INC., and are contributed to the OpenSSL project.
 *
 * The Contribution is licensed pursuant to the OpenSSL open source
 * license provided above.
 *
 * The elliptic curve binary polynomial software is originally written by
 * Sheueling Chang Shantz and Douglas Stebila of Sun Microsystems Laboratories.
 *
 */

public var OPENSSL_ECC_MAX_FIELD_BITS: Int32 { get }

/** Enum for the point conversion form as defined in X9.62 (ECDSA)
 *  for the encoding of a elliptic curve point (x,y) */
public struct point_conversion_form_t : RawRepresentable, Equatable {

    public init(_ rawValue: UInt32)

    public init(rawValue: UInt32)

    public var rawValue: UInt32
}

/** the point is encoded as z||x, where the octet z specifies
 *  which solution of the quadratic equation y is  */
public var POINT_CONVERSION_COMPRESSED: point_conversion_form_t { get }
/** the point is encoded as z||x||y, where z is the octet 0x04  */
public var POINT_CONVERSION_UNCOMPRESSED: point_conversion_form_t { get }
/** the point is encoded as z||x||y, where the octet z specifies
 *  which solution of the quadratic equation y is  */
public var POINT_CONVERSION_HYBRID: point_conversion_form_t { get }

/*-
 EC_METHOD *meth;
 -- field definition
 -- curve coefficients
 -- optional generator with associated information (order, cofactor)
 -- optional extra data (precomputed table for fast computation of multiples of generator)
 -- ASN1 stuff
*/

/********************************************************************/
/*               EC_METHODs for curves over GF(p)                   */
/********************************************************************/

/** Returns the basic GFp ec methods which provides the basis for the
 *  optimized methods.
 *  \return  EC_METHOD object
 */
public func EC_GFp_simple_method() -> OpaquePointer!

/** Returns GFp methods using montgomery multiplication.
 *  \return  EC_METHOD object
 */
public func EC_GFp_mont_method() -> OpaquePointer!

/** Returns GFp methods using optimized methods for NIST recommended curves
 *  \return  EC_METHOD object
 */
public func EC_GFp_nist_method() -> OpaquePointer!

/** Returns 64-bit optimized methods for nistp224
 *  \return  EC_METHOD object
 */
public func EC_GFp_nistp224_method() -> OpaquePointer!

/** Returns 64-bit optimized methods for nistp256
 *  \return  EC_METHOD object
 */
public func EC_GFp_nistp256_method() -> OpaquePointer!

/** Returns 64-bit optimized methods for nistp521
 *  \return  EC_METHOD object
 */
public func EC_GFp_nistp521_method() -> OpaquePointer!

/********************************************************************/
/*           EC_METHOD for curves over GF(2^m)                      */
/********************************************************************/

/** Returns the basic GF2m ec method
 *  \return  EC_METHOD object
 */
public func EC_GF2m_simple_method() -> OpaquePointer!

/********************************************************************/
/*                   EC_GROUP functions                             */
/********************************************************************/

/** Creates a new EC_GROUP object
 *  \param   meth  EC_METHOD to use
 *  \return  newly created EC_GROUP object or NULL in case of an error.
 */
public func EC_GROUP_new(_ meth: OpaquePointer!) -> OpaquePointer!

/** Frees a EC_GROUP object
 *  \param  group  EC_GROUP object to be freed.
 */
public func EC_GROUP_free(_ group: OpaquePointer!)

/** Clears and frees a EC_GROUP object
 *  \param  group  EC_GROUP object to be cleared and freed.
 */
public func EC_GROUP_clear_free(_ group: OpaquePointer!)

/** Copies EC_GROUP objects. Note: both EC_GROUPs must use the same EC_METHOD.
 *  \param  dst  destination EC_GROUP object
 *  \param  src  source EC_GROUP object
 *  \return 1 on success and 0 if an error occurred.
 */
public func EC_GROUP_copy(_ dst: OpaquePointer!, _ src: OpaquePointer!) -> Int32

/** Creates a new EC_GROUP object and copies the copies the content
 *  form src to the newly created EC_KEY object
 *  \param  src  source EC_GROUP object
 *  \return newly created EC_GROUP object or NULL in case of an error.
 */
public func EC_GROUP_dup(_ src: OpaquePointer!) -> OpaquePointer!

/** Returns the EC_METHOD of the EC_GROUP object.
 *  \param  group  EC_GROUP object
 *  \return EC_METHOD used in this EC_GROUP object.
 */
public func EC_GROUP_method_of(_ group: OpaquePointer!) -> OpaquePointer!

/** Returns the field type of the EC_METHOD.
 *  \param  meth  EC_METHOD object
 *  \return NID of the underlying field type OID.
 */
public func EC_METHOD_get_field_type(_ meth: OpaquePointer!) -> Int32

/** Sets the generator and it's order/cofactor of a EC_GROUP object.
 *  \param  group      EC_GROUP object
 *  \param  generator  EC_POINT object with the generator.
 *  \param  order      the order of the group generated by the generator.
 *  \param  cofactor   the index of the sub-group generated by the generator
 *                     in the group of all points on the elliptic curve.
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_set_generator(_ group: OpaquePointer!, _ generator: OpaquePointer!, _ order: UnsafePointer<BIGNUM>!, _ cofactor: UnsafePointer<BIGNUM>!) -> Int32

/** Returns the generator of a EC_GROUP object.
 *  \param  group  EC_GROUP object
 *  \return the currently used generator (possibly NULL).
 */
public func EC_GROUP_get0_generator(_ group: OpaquePointer!) -> OpaquePointer!

/** Returns the montgomery data for order(Generator)
 *  \param  group  EC_GROUP object
 *  \return the currently used generator (possibly NULL).
*/
public func EC_GROUP_get_mont_data(_ group: OpaquePointer!) -> UnsafeMutablePointer<BN_MONT_CTX>!

/** Gets the order of a EC_GROUP
 *  \param  group  EC_GROUP object
 *  \param  order  BIGNUM to which the order is copied
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_get_order(_ group: OpaquePointer!, _ order: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Gets the cofactor of a EC_GROUP
 *  \param  group     EC_GROUP object
 *  \param  cofactor  BIGNUM to which the cofactor is copied
 *  \param  ctx       BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_get_cofactor(_ group: OpaquePointer!, _ cofactor: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Sets the name of a EC_GROUP object
 *  \param  group  EC_GROUP object
 *  \param  nid    NID of the curve name OID
 */
public func EC_GROUP_set_curve_name(_ group: OpaquePointer!, _ nid: Int32)

/** Returns the curve name of a EC_GROUP object
 *  \param  group  EC_GROUP object
 *  \return NID of the curve name OID or 0 if not set.
 */
public func EC_GROUP_get_curve_name(_ group: OpaquePointer!) -> Int32

public func EC_GROUP_set_asn1_flag(_ group: OpaquePointer!, _ flag: Int32)
public func EC_GROUP_get_asn1_flag(_ group: OpaquePointer!) -> Int32

public func EC_GROUP_set_point_conversion_form(_ group: OpaquePointer!, _ form: point_conversion_form_t)
public func EC_GROUP_get_point_conversion_form(_: OpaquePointer!) -> point_conversion_form_t

public func EC_GROUP_get0_seed(_ x: OpaquePointer!) -> UnsafeMutablePointer<UInt8>!
public func EC_GROUP_get_seed_len(_: OpaquePointer!) -> Int
public func EC_GROUP_set_seed(_: OpaquePointer!, _: UnsafePointer<UInt8>!, _ len: Int) -> Int

/** Sets the parameter of a ec over GFp defined by y^2 = x^3 + a*x + b
 *  \param  group  EC_GROUP object
 *  \param  p      BIGNUM with the prime number
 *  \param  a      BIGNUM with parameter a of the equation
 *  \param  b      BIGNUM with parameter b of the equation
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_set_curve_GFp(_ group: OpaquePointer!, _ p: UnsafePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Gets the parameter of the ec over GFp defined by y^2 = x^3 + a*x + b
 *  \param  group  EC_GROUP object
 *  \param  p      BIGNUM for the prime number
 *  \param  a      BIGNUM for parameter a of the equation
 *  \param  b      BIGNUM for parameter b of the equation
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_get_curve_GFp(_ group: OpaquePointer!, _ p: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafeMutablePointer<BIGNUM>!, _ b: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Sets the parameter of a ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b
 *  \param  group  EC_GROUP object
 *  \param  p      BIGNUM with the polynomial defining the underlying field
 *  \param  a      BIGNUM with parameter a of the equation
 *  \param  b      BIGNUM with parameter b of the equation
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_set_curve_GF2m(_ group: OpaquePointer!, _ p: UnsafePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Gets the parameter of the ec over GF2m defined by y^2 + x*y = x^3 + a*x^2 + b
 *  \param  group  EC_GROUP object
 *  \param  p      BIGNUM for the polynomial defining the underlying field
 *  \param  a      BIGNUM for parameter a of the equation
 *  \param  b      BIGNUM for parameter b of the equation
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_get_curve_GF2m(_ group: OpaquePointer!, _ p: UnsafeMutablePointer<BIGNUM>!, _ a: UnsafeMutablePointer<BIGNUM>!, _ b: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Returns the number of bits needed to represent a field element
 *  \param  group  EC_GROUP object
 *  \return number of bits needed to represent a field element
 */
public func EC_GROUP_get_degree(_ group: OpaquePointer!) -> Int32

/** Checks whether the parameter in the EC_GROUP define a valid ec group
 *  \param  group  EC_GROUP object
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 if group is a valid ec group and 0 otherwise
 */
public func EC_GROUP_check(_ group: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Checks whether the discriminant of the elliptic curve is zero or not
 *  \param  group  EC_GROUP object
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 if the discriminant is not zero and 0 otherwise
 */
public func EC_GROUP_check_discriminant(_ group: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Compares two EC_GROUP objects
 *  \param  a    first EC_GROUP object
 *  \param  b    second EC_GROUP object
 *  \param  ctx  BN_CTX object (optional)
 *  \return 0 if both groups are equal and 1 otherwise
 */
public func EC_GROUP_cmp(_ a: OpaquePointer!, _ b: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/*
 * EC_GROUP_new_GF*() calls EC_GROUP_new() and EC_GROUP_set_GF*() after
 * choosing an appropriate EC_METHOD
 */

/** Creates a new EC_GROUP object with the specified parameters defined
 *  over GFp (defined by the equation y^2 = x^3 + a*x + b)
 *  \param  p    BIGNUM with the prime number
 *  \param  a    BIGNUM with the parameter a of the equation
 *  \param  b    BIGNUM with the parameter b of the equation
 *  \param  ctx  BN_CTX object (optional)
 *  \return newly created EC_GROUP object with the specified parameters
 */
public func EC_GROUP_new_curve_GFp(_ p: UnsafePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> OpaquePointer!

/** Creates a new EC_GROUP object with the specified parameters defined
 *  over GF2m (defined by the equation y^2 + x*y = x^3 + a*x^2 + b)
 *  \param  p    BIGNUM with the polynomial defining the underlying field
 *  \param  a    BIGNUM with the parameter a of the equation
 *  \param  b    BIGNUM with the parameter b of the equation
 *  \param  ctx  BN_CTX object (optional)
 *  \return newly created EC_GROUP object with the specified parameters
 */
public func EC_GROUP_new_curve_GF2m(_ p: UnsafePointer<BIGNUM>!, _ a: UnsafePointer<BIGNUM>!, _ b: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> OpaquePointer!

/** Creates a EC_GROUP object with a curve specified by a NID
 *  \param  nid  NID of the OID of the curve name
 *  \return newly created EC_GROUP object with specified curve or NULL
 *          if an error occurred
 */
public func EC_GROUP_new_by_curve_name(_ nid: Int32) -> OpaquePointer!

/********************************************************************/
/*               handling of internal curves                        */

/********************************************************************/
public struct EC_builtin_curve {

    public var nid: Int32

    public var comment: UnsafePointer<Int8>!

    public init()

    public init(nid: Int32, comment: UnsafePointer<Int8>!)
}

/*
 * EC_builtin_curves(EC_builtin_curve *r, size_t size) returns number of all
 * available curves or zero if a error occurred. In case r ist not zero
 * nitems EC_builtin_curve structures are filled with the data of the first
 * nitems internal groups
 */
public func EC_get_builtin_curves(_ r: UnsafeMutablePointer<EC_builtin_curve>!, _ nitems: Int) -> Int

public func EC_curve_nid2nist(_ nid: Int32) -> UnsafePointer<Int8>!
public func EC_curve_nist2nid(_ name: UnsafePointer<Int8>!) -> Int32

/********************************************************************/
/*                    EC_POINT functions                            */
/********************************************************************/

/** Creates a new EC_POINT object for the specified EC_GROUP
 *  \param  group  EC_GROUP the underlying EC_GROUP object
 *  \return newly created EC_POINT object or NULL if an error occurred
 */
public func EC_POINT_new(_ group: OpaquePointer!) -> OpaquePointer!

/** Frees a EC_POINT object
 *  \param  point  EC_POINT object to be freed
 */
public func EC_POINT_free(_ point: OpaquePointer!)

/** Clears and frees a EC_POINT object
 *  \param  point  EC_POINT object to be cleared and freed
 */
public func EC_POINT_clear_free(_ point: OpaquePointer!)

/** Copies EC_POINT object
 *  \param  dst  destination EC_POINT object
 *  \param  src  source EC_POINT object
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_copy(_ dst: OpaquePointer!, _ src: OpaquePointer!) -> Int32

/** Creates a new EC_POINT object and copies the content of the supplied
 *  EC_POINT
 *  \param  src    source EC_POINT object
 *  \param  group  underlying the EC_GROUP object
 *  \return newly created EC_POINT object or NULL if an error occurred
 */
public func EC_POINT_dup(_ src: OpaquePointer!, _ group: OpaquePointer!) -> OpaquePointer!

/** Returns the EC_METHOD used in EC_POINT object
 *  \param  point  EC_POINT object
 *  \return the EC_METHOD used
 */
public func EC_POINT_method_of(_ point: OpaquePointer!) -> OpaquePointer!

/** Sets a point to infinity (neutral element)
 *  \param  group  underlying EC_GROUP object
 *  \param  point  EC_POINT to set to infinity
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_set_to_infinity(_ group: OpaquePointer!, _ point: OpaquePointer!) -> Int32

/** Sets the jacobian projective coordinates of a EC_POINT over GFp
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM with the x-coordinate
 *  \param  y      BIGNUM with the y-coordinate
 *  \param  z      BIGNUM with the z-coordinate
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_set_Jprojective_coordinates_GFp(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafePointer<BIGNUM>!, _ y: UnsafePointer<BIGNUM>!, _ z: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Gets the jacobian projective coordinates of a EC_POINT over GFp
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM for the x-coordinate
 *  \param  y      BIGNUM for the y-coordinate
 *  \param  z      BIGNUM for the z-coordinate
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_get_Jprojective_coordinates_GFp(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafeMutablePointer<BIGNUM>!, _ y: UnsafeMutablePointer<BIGNUM>!, _ z: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Sets the affine coordinates of a EC_POINT over GFp
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM with the x-coordinate
 *  \param  y      BIGNUM with the y-coordinate
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_set_affine_coordinates_GFp(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafePointer<BIGNUM>!, _ y: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Gets the affine coordinates of a EC_POINT over GFp
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM for the x-coordinate
 *  \param  y      BIGNUM for the y-coordinate
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_get_affine_coordinates_GFp(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafeMutablePointer<BIGNUM>!, _ y: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Sets the x9.62 compressed coordinates of a EC_POINT over GFp
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM with x-coordinate
 *  \param  y_bit  integer with the y-Bit (either 0 or 1)
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_set_compressed_coordinates_GFp(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafePointer<BIGNUM>!, _ y_bit: Int32, _ ctx: OpaquePointer!) -> Int32

/** Sets the affine coordinates of a EC_POINT over GF2m
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM with the x-coordinate
 *  \param  y      BIGNUM with the y-coordinate
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_set_affine_coordinates_GF2m(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafePointer<BIGNUM>!, _ y: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Gets the affine coordinates of a EC_POINT over GF2m
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM for the x-coordinate
 *  \param  y      BIGNUM for the y-coordinate
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_get_affine_coordinates_GF2m(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafeMutablePointer<BIGNUM>!, _ y: UnsafeMutablePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Sets the x9.62 compressed coordinates of a EC_POINT over GF2m
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  x      BIGNUM with x-coordinate
 *  \param  y_bit  integer with the y-Bit (either 0 or 1)
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_set_compressed_coordinates_GF2m(_ group: OpaquePointer!, _ p: OpaquePointer!, _ x: UnsafePointer<BIGNUM>!, _ y_bit: Int32, _ ctx: OpaquePointer!) -> Int32

/** Encodes a EC_POINT object to a octet string
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  form   point conversion form
 *  \param  buf    memory buffer for the result. If NULL the function returns
 *                 required buffer size.
 *  \param  len    length of the memory buffer
 *  \param  ctx    BN_CTX object (optional)
 *  \return the length of the encoded octet string or 0 if an error occurred
 */
public func EC_POINT_point2oct(_ group: OpaquePointer!, _ p: OpaquePointer!, _ form: point_conversion_form_t, _ buf: UnsafeMutablePointer<UInt8>!, _ len: Int, _ ctx: OpaquePointer!) -> Int

/** Decodes a EC_POINT from a octet string
 *  \param  group  underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \param  buf    memory buffer with the encoded ec point
 *  \param  len    length of the encoded ec point
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_oct2point(_ group: OpaquePointer!, _ p: OpaquePointer!, _ buf: UnsafePointer<UInt8>!, _ len: Int, _ ctx: OpaquePointer!) -> Int32

/* other interfaces to point2oct/oct2point: */
public func EC_POINT_point2bn(_: OpaquePointer!, _: OpaquePointer!, _ form: point_conversion_form_t, _: UnsafeMutablePointer<BIGNUM>!, _: OpaquePointer!) -> UnsafeMutablePointer<BIGNUM>!
public func EC_POINT_bn2point(_: OpaquePointer!, _: UnsafePointer<BIGNUM>!, _: OpaquePointer!, _: OpaquePointer!) -> OpaquePointer!
public func EC_POINT_point2hex(_: OpaquePointer!, _: OpaquePointer!, _ form: point_conversion_form_t, _: OpaquePointer!) -> UnsafeMutablePointer<Int8>!
public func EC_POINT_hex2point(_: OpaquePointer!, _: UnsafePointer<Int8>!, _: OpaquePointer!, _: OpaquePointer!) -> OpaquePointer!

/********************************************************************/
/*         functions for doing EC_POINT arithmetic                  */
/********************************************************************/

/** Computes the sum of two EC_POINT
 *  \param  group  underlying EC_GROUP object
 *  \param  r      EC_POINT object for the result (r = a + b)
 *  \param  a      EC_POINT object with the first summand
 *  \param  b      EC_POINT object with the second summand
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_add(_ group: OpaquePointer!, _ r: OpaquePointer!, _ a: OpaquePointer!, _ b: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Computes the double of a EC_POINT
 *  \param  group  underlying EC_GROUP object
 *  \param  r      EC_POINT object for the result (r = 2 * a)
 *  \param  a      EC_POINT object
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_dbl(_ group: OpaquePointer!, _ r: OpaquePointer!, _ a: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Computes the inverse of a EC_POINT
 *  \param  group  underlying EC_GROUP object
 *  \param  a      EC_POINT object to be inverted (it's used for the result as well)
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_invert(_ group: OpaquePointer!, _ a: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Checks whether the point is the neutral element of the group
 *  \param  group  the underlying EC_GROUP object
 *  \param  p      EC_POINT object
 *  \return 1 if the point is the neutral element and 0 otherwise
 */
public func EC_POINT_is_at_infinity(_ group: OpaquePointer!, _ p: OpaquePointer!) -> Int32

/** Checks whether the point is on the curve
 *  \param  group  underlying EC_GROUP object
 *  \param  point  EC_POINT object to check
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 if point if on the curve and 0 otherwise
 */
public func EC_POINT_is_on_curve(_ group: OpaquePointer!, _ point: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Compares two EC_POINTs
 *  \param  group  underlying EC_GROUP object
 *  \param  a      first EC_POINT object
 *  \param  b      second EC_POINT object
 *  \param  ctx    BN_CTX object (optional)
 *  \return 0 if both points are equal and a value != 0 otherwise
 */
public func EC_POINT_cmp(_ group: OpaquePointer!, _ a: OpaquePointer!, _ b: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

public func EC_POINT_make_affine(_ group: OpaquePointer!, _ point: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32
public func EC_POINTs_make_affine(_ group: OpaquePointer!, _ num: Int, _ points: UnsafeMutablePointer<OpaquePointer?>!, _ ctx: OpaquePointer!) -> Int32

/** Computes r = generator * n sum_{i=0}^{num-1} p[i] * m[i]
 *  \param  group  underlying EC_GROUP object
 *  \param  r      EC_POINT object for the result
 *  \param  n      BIGNUM with the multiplier for the group generator (optional)
 *  \param  num    number futher summands
 *  \param  p      array of size num of EC_POINT objects
 *  \param  m      array of size num of BIGNUM objects
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINTs_mul(_ group: OpaquePointer!, _ r: OpaquePointer!, _ n: UnsafePointer<BIGNUM>!, _ num: Int, _ p: UnsafeMutablePointer<OpaquePointer?>!, _ m: UnsafeMutablePointer<UnsafePointer<BIGNUM>?>!, _ ctx: OpaquePointer!) -> Int32

/** Computes r = generator * n + q * m
 *  \param  group  underlying EC_GROUP object
 *  \param  r      EC_POINT object for the result
 *  \param  n      BIGNUM with the multiplier for the group generator (optional)
 *  \param  q      EC_POINT object with the first factor of the second summand
 *  \param  m      BIGNUM with the second factor of the second summand
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_POINT_mul(_ group: OpaquePointer!, _ r: OpaquePointer!, _ n: UnsafePointer<BIGNUM>!, _ q: OpaquePointer!, _ m: UnsafePointer<BIGNUM>!, _ ctx: OpaquePointer!) -> Int32

/** Stores multiples of generator for faster point multiplication
 *  \param  group  EC_GROUP object
 *  \param  ctx    BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occured
 */
public func EC_GROUP_precompute_mult(_ group: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Reports whether a precomputation has been done
 *  \param  group  EC_GROUP object
 *  \return 1 if a pre-computation has been done and 0 otherwise
 */
public func EC_GROUP_have_precompute_mult(_ group: OpaquePointer!) -> Int32

/********************************************************************/
/*                       ASN1 stuff                                 */

/*
 * EC_GROUP_get_basis_type() returns the NID of the basis type used to
 * represent the field elements
 */
/********************************************************************/
public func EC_GROUP_get_basis_type(_: OpaquePointer!) -> Int32

public func EC_GROUP_get_trinomial_basis(_: OpaquePointer!, _ k: UnsafeMutablePointer<UInt32>!) -> Int32
public func EC_GROUP_get_pentanomial_basis(_: OpaquePointer!, _ k1: UnsafeMutablePointer<UInt32>!, _ k2: UnsafeMutablePointer<UInt32>!, _ k3: UnsafeMutablePointer<UInt32>!) -> Int32

public var OPENSSL_EC_NAMED_CURVE: Int32 { get }

public func d2i_ECPKParameters(_: UnsafeMutablePointer<OpaquePointer?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> OpaquePointer!
public func i2d_ECPKParameters(_: OpaquePointer!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func ECPKParameters_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: OpaquePointer!, _ off: Int32) -> Int32

public func ECPKParameters_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x: OpaquePointer!, _ off: Int32) -> Int32

/********************************************************************/
/*                      EC_KEY functions                            */
/********************************************************************/

/* some values for the encoding_flag */
public var EC_PKEY_NO_PARAMETERS: Int32 { get }
public var EC_PKEY_NO_PUBKEY: Int32 { get }

/* some values for the flags field */
public var EC_FLAG_NON_FIPS_ALLOW: Int32 { get }
public var EC_FLAG_FIPS_CHECKED: Int32 { get }

/** Creates a new EC_KEY object.
 *  \return EC_KEY object or NULL if an error occurred.
 */
public func EC_KEY_new() -> OpaquePointer!

public func EC_KEY_get_flags(_ key: OpaquePointer!) -> Int32

public func EC_KEY_set_flags(_ key: OpaquePointer!, _ flags: Int32)

public func EC_KEY_clear_flags(_ key: OpaquePointer!, _ flags: Int32)

/** Creates a new EC_KEY object using a named curve as underlying
 *  EC_GROUP object.
 *  \param  nid  NID of the named curve.
 *  \return EC_KEY object or NULL if an error occurred.
 */
public func EC_KEY_new_by_curve_name(_ nid: Int32) -> OpaquePointer!

/** Frees a EC_KEY object.
 *  \param  key  EC_KEY object to be freed.
 */
public func EC_KEY_free(_ key: OpaquePointer!)

/** Copies a EC_KEY object.
 *  \param  dst  destination EC_KEY object
 *  \param  src  src EC_KEY object
 *  \return dst or NULL if an error occurred.
 */
public func EC_KEY_copy(_ dst: OpaquePointer!, _ src: OpaquePointer!) -> OpaquePointer!

/** Creates a new EC_KEY object and copies the content from src to it.
 *  \param  src  the source EC_KEY object
 *  \return newly created EC_KEY object or NULL if an error occurred.
 */
public func EC_KEY_dup(_ src: OpaquePointer!) -> OpaquePointer!

/** Increases the internal reference count of a EC_KEY object.
 *  \param  key  EC_KEY object
 *  \return 1 on success and 0 if an error occurred.
 */
public func EC_KEY_up_ref(_ key: OpaquePointer!) -> Int32

/** Returns the EC_GROUP object of a EC_KEY object
 *  \param  key  EC_KEY object
 *  \return the EC_GROUP object (possibly NULL).
 */
public func EC_KEY_get0_group(_ key: OpaquePointer!) -> OpaquePointer!

/** Sets the EC_GROUP of a EC_KEY object.
 *  \param  key    EC_KEY object
 *  \param  group  EC_GROUP to use in the EC_KEY object (note: the EC_KEY
 *                 object will use an own copy of the EC_GROUP).
 *  \return 1 on success and 0 if an error occurred.
 */
public func EC_KEY_set_group(_ key: OpaquePointer!, _ group: OpaquePointer!) -> Int32

/** Returns the private key of a EC_KEY object.
 *  \param  key  EC_KEY object
 *  \return a BIGNUM with the private key (possibly NULL).
 */
public func EC_KEY_get0_private_key(_ key: OpaquePointer!) -> UnsafePointer<BIGNUM>!

/** Sets the private key of a EC_KEY object.
 *  \param  key  EC_KEY object
 *  \param  prv  BIGNUM with the private key (note: the EC_KEY object
 *               will use an own copy of the BIGNUM).
 *  \return 1 on success and 0 if an error occurred.
 */
public func EC_KEY_set_private_key(_ key: OpaquePointer!, _ prv: UnsafePointer<BIGNUM>!) -> Int32

/** Returns the public key of a EC_KEY object.
 *  \param  key  the EC_KEY object
 *  \return a EC_POINT object with the public key (possibly NULL)
 */
public func EC_KEY_get0_public_key(_ key: OpaquePointer!) -> OpaquePointer!

/** Sets the public key of a EC_KEY object.
 *  \param  key  EC_KEY object
 *  \param  pub  EC_POINT object with the public key (note: the EC_KEY object
 *               will use an own copy of the EC_POINT object).
 *  \return 1 on success and 0 if an error occurred.
 */
public func EC_KEY_set_public_key(_ key: OpaquePointer!, _ pub: OpaquePointer!) -> Int32

public func EC_KEY_get_enc_flags(_ key: OpaquePointer!) -> UInt32
public func EC_KEY_set_enc_flags(_ eckey: OpaquePointer!, _ flags: UInt32)
public func EC_KEY_get_conv_form(_ key: OpaquePointer!) -> point_conversion_form_t
public func EC_KEY_set_conv_form(_ eckey: OpaquePointer!, _ cform: point_conversion_form_t)
/* functions to set/get method specific data  */
public func EC_KEY_get_key_method_data(_ key: OpaquePointer!, _ dup_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> UnsafeMutableRawPointer?)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!, _ clear_free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!) -> UnsafeMutableRawPointer!
/** Sets the key method data of an EC_KEY object, if none has yet been set.
 *  \param  key              EC_KEY object
 *  \param  data             opaque data to install.
 *  \param  dup_func         a function that duplicates |data|.
 *  \param  free_func        a function that frees |data|.
 *  \param  clear_free_func  a function that wipes and frees |data|.
 *  \return the previously set data pointer, or NULL if |data| was inserted.
 */
public func EC_KEY_insert_key_method_data(_ key: OpaquePointer!, _ data: UnsafeMutableRawPointer!, _ dup_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> UnsafeMutableRawPointer?)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!, _ clear_free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?) -> Swift.Void)!) -> UnsafeMutableRawPointer!
/* wrapper functions for the underlying EC_GROUP object */
public func EC_KEY_set_asn1_flag(_ eckey: OpaquePointer!, _ asn1_flag: Int32)

/** Creates a table of pre-computed multiples of the generator to
 *  accelerate further EC_KEY operations.
 *  \param  key  EC_KEY object
 *  \param  ctx  BN_CTX object (optional)
 *  \return 1 on success and 0 if an error occurred.
 */
public func EC_KEY_precompute_mult(_ key: OpaquePointer!, _ ctx: OpaquePointer!) -> Int32

/** Creates a new ec private (and optional a new public) key.
 *  \param  key  EC_KEY object
 *  \return 1 on success and 0 if an error occurred.
 */
public func EC_KEY_generate_key(_ key: OpaquePointer!) -> Int32

/** Verifies that a private and/or public key is valid.
 *  \param  key  the EC_KEY object
 *  \return 1 on success and 0 otherwise.
 */
public func EC_KEY_check_key(_ key: OpaquePointer!) -> Int32

/** Sets a public key from affine coordindates performing
 *  neccessary NIST PKV tests.
 *  \param  key  the EC_KEY object
 *  \param  x    public key x coordinate
 *  \param  y    public key y coordinate
 *  \return 1 on success and 0 otherwise.
 */
public func EC_KEY_set_public_key_affine_coordinates(_ key: OpaquePointer!, _ x: UnsafeMutablePointer<BIGNUM>!, _ y: UnsafeMutablePointer<BIGNUM>!) -> Int32

/********************************************************************/
/*        de- and encoding functions for SEC1 ECPrivateKey          */
/********************************************************************/

/** Decodes a private key from a memory buffer.
 *  \param  key  a pointer to a EC_KEY object which should be used (or NULL)
 *  \param  in   pointer to memory with the DER encoded private key
 *  \param  len  length of the DER encoded private key
 *  \return the decoded private key or NULL if an error occurred.
 */
public func d2i_ECPrivateKey(_ key: UnsafeMutablePointer<OpaquePointer?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> OpaquePointer!

/** Encodes a private key object and stores the result in a buffer.
 *  \param  key  the EC_KEY object to encode
 *  \param  out  the buffer for the result (if NULL the function returns number
 *               of bytes needed).
 *  \return 1 on success and 0 if an error occurred.
 */
public func i2d_ECPrivateKey(_ key: OpaquePointer!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

/********************************************************************/
/*        de- and encoding functions for EC parameters              */
/********************************************************************/

/** Decodes ec parameter from a memory buffer.
 *  \param  key  a pointer to a EC_KEY object which should be used (or NULL)
 *  \param  in   pointer to memory with the DER encoded ec parameters
 *  \param  len  length of the DER encoded ec parameters
 *  \return a EC_KEY object with the decoded parameters or NULL if an error
 *          occurred.
 */
public func d2i_ECParameters(_ key: UnsafeMutablePointer<OpaquePointer?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> OpaquePointer!

/** Encodes ec parameter and stores the result in a buffer.
 *  \param  key  the EC_KEY object with ec paramters to encode
 *  \param  out  the buffer for the result (if NULL the function returns number
 *               of bytes needed).
 *  \return 1 on success and 0 if an error occurred.
 */
public func i2d_ECParameters(_ key: OpaquePointer!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

/********************************************************************/
/*         de- and encoding functions for EC public key             */
/*         (octet string, not DER -- hence 'o2i' and 'i2o')         */
/********************************************************************/

/** Decodes a ec public key from a octet string.
 *  \param  key  a pointer to a EC_KEY object which should be used
 *  \param  in   memory buffer with the encoded public key
 *  \param  len  length of the encoded public key
 *  \return EC_KEY object with decoded public key or NULL if an error
 *          occurred.
 */
public func o2i_ECPublicKey(_ key: UnsafeMutablePointer<OpaquePointer?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> OpaquePointer!

/** Encodes a ec public key in an octet string.
 *  \param  key  the EC_KEY object with the public key
 *  \param  out  the buffer for the result (if NULL the function returns number
 *               of bytes needed).
 *  \return 1 on success and 0 if an error occurred
 */
public func i2o_ECPublicKey(_ key: OpaquePointer!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

/** Prints out the ec parameters on human readable form.
 *  \param  bp   BIO object to which the information is printed
 *  \param  key  EC_KEY object
 *  \return 1 on success and 0 if an error occurred
 */
public func ECParameters_print(_ bp: UnsafeMutablePointer<BIO>!, _ key: OpaquePointer!) -> Int32

/** Prints out the contents of a EC_KEY object
 *  \param  bp   BIO object to which the information is printed
 *  \param  key  EC_KEY object
 *  \param  off  line offset
 *  \return 1 on success and 0 if an error occurred
 */
public func EC_KEY_print(_ bp: UnsafeMutablePointer<BIO>!, _ key: OpaquePointer!, _ off: Int32) -> Int32

/** Prints out the ec parameters on human readable form.
 *  \param  fp   file descriptor to which the information is printed
 *  \param  key  EC_KEY object
 *  \return 1 on success and 0 if an error occurred
 */
public func ECParameters_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ key: OpaquePointer!) -> Int32

/** Prints out the contents of a EC_KEY object
 *  \param  fp   file descriptor to which the information is printed
 *  \param  key  EC_KEY object
 *  \param  off  line offset
 *  \return 1 on success and 0 if an error occurred
 */
public func EC_KEY_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ key: OpaquePointer!, _ off: Int32) -> Int32

/* KDF types */
public var EVP_PKEY_ECDH_KDF_NONE: Int32 { get }
public var EVP_PKEY_ECDH_KDF_X9_62: Int32 { get }

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_EC_strings()

/* Error codes for the EC functions. */

/* Function codes. */
public var EC_F_BN_TO_FELEM: Int32 { get }
public var EC_F_COMPUTE_WNAF: Int32 { get }
public var EC_F_D2I_ECPARAMETERS: Int32 { get }
public var EC_F_D2I_ECPKPARAMETERS: Int32 { get }
public var EC_F_D2I_ECPRIVATEKEY: Int32 { get }
public var EC_F_DO_EC_KEY_PRINT: Int32 { get }
public var EC_F_ECDH_CMS_DECRYPT: Int32 { get }
public var EC_F_ECDH_CMS_SET_SHARED_INFO: Int32 { get }
public var EC_F_ECKEY_PARAM2TYPE: Int32 { get }
public var EC_F_ECKEY_PARAM_DECODE: Int32 { get }
public var EC_F_ECKEY_PRIV_DECODE: Int32 { get }
public var EC_F_ECKEY_PRIV_ENCODE: Int32 { get }
public var EC_F_ECKEY_PUB_DECODE: Int32 { get }
public var EC_F_ECKEY_PUB_ENCODE: Int32 { get }
public var EC_F_ECKEY_TYPE2PARAM: Int32 { get }
public var EC_F_ECPARAMETERS_PRINT: Int32 { get }
public var EC_F_ECPARAMETERS_PRINT_FP: Int32 { get }
public var EC_F_ECPKPARAMETERS_PRINT: Int32 { get }
public var EC_F_ECPKPARAMETERS_PRINT_FP: Int32 { get }
public var EC_F_ECP_NISTZ256_GET_AFFINE: Int32 { get }
public var EC_F_ECP_NISTZ256_MULT_PRECOMPUTE: Int32 { get }
public var EC_F_ECP_NISTZ256_POINTS_MUL: Int32 { get }
public var EC_F_ECP_NISTZ256_PRE_COMP_NEW: Int32 { get }
public var EC_F_ECP_NISTZ256_SET_WORDS: Int32 { get }
public var EC_F_ECP_NISTZ256_WINDOWED_MUL: Int32 { get }
public var EC_F_ECP_NIST_MOD_192: Int32 { get }
public var EC_F_ECP_NIST_MOD_224: Int32 { get }
public var EC_F_ECP_NIST_MOD_256: Int32 { get }
public var EC_F_ECP_NIST_MOD_521: Int32 { get }
public var EC_F_EC_ASN1_GROUP2CURVE: Int32 { get }
public var EC_F_EC_ASN1_GROUP2FIELDID: Int32 { get }
public var EC_F_EC_ASN1_GROUP2PARAMETERS: Int32 { get }
public var EC_F_EC_ASN1_GROUP2PKPARAMETERS: Int32 { get }
public var EC_F_EC_ASN1_PARAMETERS2GROUP: Int32 { get }
public var EC_F_EC_ASN1_PKPARAMETERS2GROUP: Int32 { get }
public var EC_F_EC_EX_DATA_SET_DATA: Int32 { get }
public var EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY: Int32 { get }
public var EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT: Int32 { get }
public var EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE: Int32 { get }
public var EC_F_EC_GF2M_SIMPLE_OCT2POINT: Int32 { get }
public var EC_F_EC_GF2M_SIMPLE_POINT2OCT: Int32 { get }
public var EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES: Int32 { get }
public var EC_F_EC_GFP_MONT_FIELD_DECODE: Int32 { get }
public var EC_F_EC_GFP_MONT_FIELD_ENCODE: Int32 { get }
public var EC_F_EC_GFP_MONT_FIELD_MUL: Int32 { get }
public var EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE: Int32 { get }
public var EC_F_EC_GFP_MONT_FIELD_SQR: Int32 { get }
public var EC_F_EC_GFP_MONT_GROUP_SET_CURVE: Int32 { get }
public var EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP: Int32 { get }
public var EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE: Int32 { get }
public var EC_F_EC_GFP_NISTP224_POINTS_MUL: Int32 { get }
public var EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE: Int32 { get }
public var EC_F_EC_GFP_NISTP256_POINTS_MUL: Int32 { get }
public var EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE: Int32 { get }
public var EC_F_EC_GFP_NISTP521_POINTS_MUL: Int32 { get }
public var EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_GFP_NIST_FIELD_MUL: Int32 { get }
public var EC_F_EC_GFP_NIST_FIELD_SQR: Int32 { get }
public var EC_F_EC_GFP_NIST_GROUP_SET_CURVE: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_MAKE_AFFINE: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_OCT2POINT: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_POINT2OCT: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES: Int32 { get }
public var EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_GROUP_CHECK: Int32 { get }
public var EC_F_EC_GROUP_CHECK_DISCRIMINANT: Int32 { get }
public var EC_F_EC_GROUP_COPY: Int32 { get }
public var EC_F_EC_GROUP_GET0_GENERATOR: Int32 { get }
public var EC_F_EC_GROUP_GET_COFACTOR: Int32 { get }
public var EC_F_EC_GROUP_GET_CURVE_GF2M: Int32 { get }
public var EC_F_EC_GROUP_GET_CURVE_GFP: Int32 { get }
public var EC_F_EC_GROUP_GET_DEGREE: Int32 { get }
public var EC_F_EC_GROUP_GET_ORDER: Int32 { get }
public var EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS: Int32 { get }
public var EC_F_EC_GROUP_GET_TRINOMIAL_BASIS: Int32 { get }
public var EC_F_EC_GROUP_NEW: Int32 { get }
public var EC_F_EC_GROUP_NEW_BY_CURVE_NAME: Int32 { get }
public var EC_F_EC_GROUP_NEW_FROM_DATA: Int32 { get }
public var EC_F_EC_GROUP_PRECOMPUTE_MULT: Int32 { get }
public var EC_F_EC_GROUP_SET_CURVE_GF2M: Int32 { get }
public var EC_F_EC_GROUP_SET_CURVE_GFP: Int32 { get }
public var EC_F_EC_GROUP_SET_EXTRA_DATA: Int32 { get }
public var EC_F_EC_GROUP_SET_GENERATOR: Int32 { get }
public var EC_F_EC_KEY_CHECK_KEY: Int32 { get }
public var EC_F_EC_KEY_COPY: Int32 { get }
public var EC_F_EC_KEY_GENERATE_KEY: Int32 { get }
public var EC_F_EC_KEY_NEW: Int32 { get }
public var EC_F_EC_KEY_PRINT: Int32 { get }
public var EC_F_EC_KEY_PRINT_FP: Int32 { get }
public var EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES: Int32 { get }
public var EC_F_EC_POINTS_MAKE_AFFINE: Int32 { get }
public var EC_F_EC_POINT_ADD: Int32 { get }
public var EC_F_EC_POINT_CMP: Int32 { get }
public var EC_F_EC_POINT_COPY: Int32 { get }
public var EC_F_EC_POINT_DBL: Int32 { get }
public var EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M: Int32 { get }
public var EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_POINT_INVERT: Int32 { get }
public var EC_F_EC_POINT_IS_AT_INFINITY: Int32 { get }
public var EC_F_EC_POINT_IS_ON_CURVE: Int32 { get }
public var EC_F_EC_POINT_MAKE_AFFINE: Int32 { get }
public var EC_F_EC_POINT_MUL: Int32 { get }
public var EC_F_EC_POINT_NEW: Int32 { get }
public var EC_F_EC_POINT_OCT2POINT: Int32 { get }
public var EC_F_EC_POINT_POINT2OCT: Int32 { get }
public var EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M: Int32 { get }
public var EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M: Int32 { get }
public var EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP: Int32 { get }
public var EC_F_EC_POINT_SET_TO_INFINITY: Int32 { get }
public var EC_F_EC_PRE_COMP_DUP: Int32 { get }
public var EC_F_EC_PRE_COMP_NEW: Int32 { get }
public var EC_F_EC_WNAF_MUL: Int32 { get }
public var EC_F_EC_WNAF_PRECOMPUTE_MULT: Int32 { get }
public var EC_F_I2D_ECPARAMETERS: Int32 { get }
public var EC_F_I2D_ECPKPARAMETERS: Int32 { get }
public var EC_F_I2D_ECPRIVATEKEY: Int32 { get }
public var EC_F_I2O_ECPUBLICKEY: Int32 { get }
public var EC_F_NISTP224_PRE_COMP_NEW: Int32 { get }
public var EC_F_NISTP256_PRE_COMP_NEW: Int32 { get }
public var EC_F_NISTP521_PRE_COMP_NEW: Int32 { get }
public var EC_F_O2I_ECPUBLICKEY: Int32 { get }
public var EC_F_OLD_EC_PRIV_DECODE: Int32 { get }
public var EC_F_PKEY_EC_CTRL: Int32 { get }
public var EC_F_PKEY_EC_CTRL_STR: Int32 { get }
public var EC_F_PKEY_EC_DERIVE: Int32 { get }
public var EC_F_PKEY_EC_KEYGEN: Int32 { get }
public var EC_F_PKEY_EC_PARAMGEN: Int32 { get }
public var EC_F_PKEY_EC_SIGN: Int32 { get }

/* Reason codes. */
public var EC_R_ASN1_ERROR: Int32 { get }
public var EC_R_ASN1_UNKNOWN_FIELD: Int32 { get }
public var EC_R_BIGNUM_OUT_OF_RANGE: Int32 { get }
public var EC_R_BUFFER_TOO_SMALL: Int32 { get }
public var EC_R_COORDINATES_OUT_OF_RANGE: Int32 { get }
public var EC_R_D2I_ECPKPARAMETERS_FAILURE: Int32 { get }
public var EC_R_DECODE_ERROR: Int32 { get }
public var EC_R_DISCRIMINANT_IS_ZERO: Int32 { get }
public var EC_R_EC_GROUP_NEW_BY_NAME_FAILURE: Int32 { get }
public var EC_R_FIELD_TOO_LARGE: Int32 { get }
public var EC_R_GF2M_NOT_SUPPORTED: Int32 { get }
public var EC_R_GROUP2PKPARAMETERS_FAILURE: Int32 { get }
public var EC_R_I2D_ECPKPARAMETERS_FAILURE: Int32 { get }
public var EC_R_INCOMPATIBLE_OBJECTS: Int32 { get }
public var EC_R_INVALID_ARGUMENT: Int32 { get }
public var EC_R_INVALID_COMPRESSED_POINT: Int32 { get }
public var EC_R_INVALID_COMPRESSION_BIT: Int32 { get }
public var EC_R_INVALID_CURVE: Int32 { get }
public var EC_R_INVALID_DIGEST: Int32 { get }
public var EC_R_INVALID_DIGEST_TYPE: Int32 { get }
public var EC_R_INVALID_ENCODING: Int32 { get }
public var EC_R_INVALID_FIELD: Int32 { get }
public var EC_R_INVALID_FORM: Int32 { get }
public var EC_R_INVALID_GROUP_ORDER: Int32 { get }
public var EC_R_INVALID_PENTANOMIAL_BASIS: Int32 { get }
public var EC_R_INVALID_PRIVATE_KEY: Int32 { get }
public var EC_R_INVALID_TRINOMIAL_BASIS: Int32 { get }
public var EC_R_KDF_PARAMETER_ERROR: Int32 { get }
public var EC_R_KEYS_NOT_SET: Int32 { get }
public var EC_R_MISSING_PARAMETERS: Int32 { get }
public var EC_R_MISSING_PRIVATE_KEY: Int32 { get }
public var EC_R_NOT_A_NIST_PRIME: Int32 { get }
public var EC_R_NOT_A_SUPPORTED_NIST_PRIME: Int32 { get }
public var EC_R_NOT_IMPLEMENTED: Int32 { get }
public var EC_R_NOT_INITIALIZED: Int32 { get }
public var EC_R_NO_FIELD_MOD: Int32 { get }
public var EC_R_NO_PARAMETERS_SET: Int32 { get }
public var EC_R_PASSED_NULL_PARAMETER: Int32 { get }
public var EC_R_PEER_KEY_ERROR: Int32 { get }
public var EC_R_PKPARAMETERS2GROUP_FAILURE: Int32 { get }
public var EC_R_POINT_AT_INFINITY: Int32 { get }
public var EC_R_POINT_IS_NOT_ON_CURVE: Int32 { get }
public var EC_R_SHARED_INFO_ERROR: Int32 { get }
public var EC_R_SLOT_FULL: Int32 { get }
public var EC_R_UNDEFINED_GENERATOR: Int32 { get }
public var EC_R_UNDEFINED_ORDER: Int32 { get }
public var EC_R_UNKNOWN_GROUP: Int32 { get }
public var EC_R_UNKNOWN_ORDER: Int32 { get }
public var EC_R_UNSUPPORTED_FIELD: Int32 { get }
public var EC_R_WRONG_CURVE_PARAMETERS: Int32 { get }
public var EC_R_WRONG_ORDER: Int32 { get }
/* crypto/ecdsa/ecdsa.h */
/**
 * \file   crypto/ecdsa/ecdsa.h Include file for the OpenSSL ECDSA functions
 * \author Written by Nils Larsch for the OpenSSL project
 */
/* ====================================================================
 * Copyright (c) 2000-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

public struct ECDSA_SIG_st {

    public var r: UnsafeMutablePointer<BIGNUM>!

    public var s: UnsafeMutablePointer<BIGNUM>!

    public init()

    public init(r: UnsafeMutablePointer<BIGNUM>!, s: UnsafeMutablePointer<BIGNUM>!)
}
public typealias ECDSA_SIG = ECDSA_SIG_st

/** Allocates and initialize a ECDSA_SIG structure
 *  \return pointer to a ECDSA_SIG structure or NULL if an error occurred
 */
public func ECDSA_SIG_new() -> UnsafeMutablePointer<ECDSA_SIG>!

/** frees a ECDSA_SIG structure
 *  \param  sig  pointer to the ECDSA_SIG structure
 */
public func ECDSA_SIG_free(_ sig: UnsafeMutablePointer<ECDSA_SIG>!)

/** DER encode content of ECDSA_SIG object (note: this function modifies *pp
 *  (*pp += length of the DER encoded signature)).
 *  \param  sig  pointer to the ECDSA_SIG object
 *  \param  pp   pointer to a unsigned char pointer for the output or NULL
 *  \return the length of the DER encoded ECDSA_SIG object or 0
 */
public func i2d_ECDSA_SIG(_ sig: UnsafePointer<ECDSA_SIG>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

/** Decodes a DER encoded ECDSA signature (note: this function changes *pp
 *  (*pp += len)).
 *  \param  sig  pointer to ECDSA_SIG pointer (may be NULL)
 *  \param  pp   memory buffer with the DER encoded signature
 *  \param  len  length of the buffer
 *  \return pointer to the decoded ECDSA_SIG structure (or NULL)
 */
public func d2i_ECDSA_SIG(_ sig: UnsafeMutablePointer<UnsafeMutablePointer<ECDSA_SIG>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<ECDSA_SIG>!

/** Computes the ECDSA signature of the given hash value using
 *  the supplied private key and returns the created signature.
 *  \param  dgst      pointer to the hash value
 *  \param  dgst_len  length of the hash value
 *  \param  eckey     EC_KEY object containing a private EC key
 *  \return pointer to a ECDSA_SIG structure or NULL if an error occurred
 */
public func ECDSA_do_sign(_ dgst: UnsafePointer<UInt8>!, _ dgst_len: Int32, _ eckey: OpaquePointer!) -> UnsafeMutablePointer<ECDSA_SIG>!

/** Computes ECDSA signature of a given hash value using the supplied
 *  private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
 *  \param  dgst     pointer to the hash value to sign
 *  \param  dgstlen  length of the hash value
 *  \param  kinv     BIGNUM with a pre-computed inverse k (optional)
 *  \param  rp       BIGNUM with a pre-computed rp value (optioanl),
 *                   see ECDSA_sign_setup
 *  \param  eckey    EC_KEY object containing a private EC key
 *  \return pointer to a ECDSA_SIG structure or NULL if an error occurred
 */
public func ECDSA_do_sign_ex(_ dgst: UnsafePointer<UInt8>!, _ dgstlen: Int32, _ kinv: UnsafePointer<BIGNUM>!, _ rp: UnsafePointer<BIGNUM>!, _ eckey: OpaquePointer!) -> UnsafeMutablePointer<ECDSA_SIG>!

/** Verifies that the supplied signature is a valid ECDSA
 *  signature of the supplied hash value using the supplied public key.
 *  \param  dgst      pointer to the hash value
 *  \param  dgst_len  length of the hash value
 *  \param  sig       ECDSA_SIG structure
 *  \param  eckey     EC_KEY object containing a public EC key
 *  \return 1 if the signature is valid, 0 if the signature is invalid
 *          and -1 on error
 */
public func ECDSA_do_verify(_ dgst: UnsafePointer<UInt8>!, _ dgst_len: Int32, _ sig: UnsafePointer<ECDSA_SIG>!, _ eckey: OpaquePointer!) -> Int32

public func ECDSA_OpenSSL() -> OpaquePointer!

/** Sets the default ECDSA method
 *  \param  meth  new default ECDSA_METHOD
 */
public func ECDSA_set_default_method(_ meth: OpaquePointer!)

/** Returns the default ECDSA method
 *  \return pointer to ECDSA_METHOD structure containing the default method
 */
public func ECDSA_get_default_method() -> OpaquePointer!

/** Sets method to be used for the ECDSA operations
 *  \param  eckey  EC_KEY object
 *  \param  meth   new method
 *  \return 1 on success and 0 otherwise
 */
public func ECDSA_set_method(_ eckey: OpaquePointer!, _ meth: OpaquePointer!) -> Int32

/** Returns the maximum length of the DER encoded signature
 *  \param  eckey  EC_KEY object
 *  \return numbers of bytes required for the DER encoded signature
 */
public func ECDSA_size(_ eckey: OpaquePointer!) -> Int32

/** Precompute parts of the signing operation
 *  \param  eckey  EC_KEY object containing a private EC key
 *  \param  ctx    BN_CTX object (optional)
 *  \param  kinv   BIGNUM pointer for the inverse of k
 *  \param  rp     BIGNUM pointer for x coordinate of k * generator
 *  \return 1 on success and 0 otherwise
 */
public func ECDSA_sign_setup(_ eckey: OpaquePointer!, _ ctx: OpaquePointer!, _ kinv: UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>!, _ rp: UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>!) -> Int32

/** Computes ECDSA signature of a given hash value using the supplied
 *  private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
 *  \param  type     this parameter is ignored
 *  \param  dgst     pointer to the hash value to sign
 *  \param  dgstlen  length of the hash value
 *  \param  sig      memory for the DER encoded created signature
 *  \param  siglen   pointer to the length of the returned signature
 *  \param  eckey    EC_KEY object containing a private EC key
 *  \return 1 on success and 0 otherwise
 */
public func ECDSA_sign(_ type: Int32, _ dgst: UnsafePointer<UInt8>!, _ dgstlen: Int32, _ sig: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<UInt32>!, _ eckey: OpaquePointer!) -> Int32

/** Computes ECDSA signature of a given hash value using the supplied
 *  private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
 *  \param  type     this parameter is ignored
 *  \param  dgst     pointer to the hash value to sign
 *  \param  dgstlen  length of the hash value
 *  \param  sig      buffer to hold the DER encoded signature
 *  \param  siglen   pointer to the length of the returned signature
 *  \param  kinv     BIGNUM with a pre-computed inverse k (optional)
 *  \param  rp       BIGNUM with a pre-computed rp value (optioanl),
 *                   see ECDSA_sign_setup
 *  \param  eckey    EC_KEY object containing a private EC key
 *  \return 1 on success and 0 otherwise
 */
public func ECDSA_sign_ex(_ type: Int32, _ dgst: UnsafePointer<UInt8>!, _ dgstlen: Int32, _ sig: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<UInt32>!, _ kinv: UnsafePointer<BIGNUM>!, _ rp: UnsafePointer<BIGNUM>!, _ eckey: OpaquePointer!) -> Int32

/** Verifies that the given signature is valid ECDSA signature
 *  of the supplied hash value using the specified public key.
 *  \param  type     this parameter is ignored
 *  \param  dgst     pointer to the hash value
 *  \param  dgstlen  length of the hash value
 *  \param  sig      pointer to the DER encoded signature
 *  \param  siglen   length of the DER encoded signature
 *  \param  eckey    EC_KEY object containing a public EC key
 *  \return 1 if the signature is valid, 0 if the signature is invalid
 *          and -1 on error
 */
public func ECDSA_verify(_ type: Int32, _ dgst: UnsafePointer<UInt8>!, _ dgstlen: Int32, _ sig: UnsafePointer<UInt8>!, _ siglen: Int32, _ eckey: OpaquePointer!) -> Int32

/* the standard ex_data functions */
public func ECDSA_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func ECDSA_set_ex_data(_ d: OpaquePointer!, _ idx: Int32, _ arg: UnsafeMutableRawPointer!) -> Int32
public func ECDSA_get_ex_data(_ d: OpaquePointer!, _ idx: Int32) -> UnsafeMutableRawPointer!


/** Allocates and initialize a ECDSA_METHOD structure
 *  \param ecdsa_method pointer to ECDSA_METHOD to copy.  (May be NULL)
 *  \return pointer to a ECDSA_METHOD structure or NULL if an error occurred
 */
public func ECDSA_METHOD_new(_ ecdsa_method: OpaquePointer!) -> OpaquePointer!

/** frees a ECDSA_METHOD structure
 *  \param  ecdsa_method  pointer to the ECDSA_METHOD structure
 */
public func ECDSA_METHOD_free(_ ecdsa_method: OpaquePointer!)


/**  Sets application specific data in the ECDSA_METHOD
 *   \param  ecdsa_method pointer to existing ECDSA_METHOD
 *   \param  app application specific data to set
 */
public func ECDSA_METHOD_set_app_data(_ ecdsa_method: OpaquePointer!, _ app: UnsafeMutableRawPointer!)


/** Returns application specific data from a ECDSA_METHOD structure
 *  \param ecdsa_method pointer to ECDSA_METHOD structure
 *  \return pointer to application specific data.
 */
public func ECDSA_METHOD_get_app_data(_ ecdsa_method: OpaquePointer!) -> UnsafeMutableRawPointer!


/**  Set the ECDSA_do_sign function in the ECDSA_METHOD
 *   \param  ecdsa_method  pointer to existing ECDSA_METHOD
 *   \param  ecdsa_do_sign a funtion of type ECDSA_do_sign
 */
public func ECDSA_METHOD_set_sign(_ ecdsa_method: OpaquePointer!, _ ecdsa_do_sign: (@escaping @convention(c) (UnsafePointer<UInt8>?, Int32, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?) -> UnsafeMutablePointer<ECDSA_SIG>?)!)


/**  Set the  ECDSA_sign_setup function in the ECDSA_METHOD
 *   \param  ecdsa_method  pointer to existing ECDSA_METHOD
 *   \param  ecdsa_sign_setup a funtion of type ECDSA_sign_setup
 */
public func ECDSA_METHOD_set_sign_setup(_ ecdsa_method: OpaquePointer!, _ ecdsa_sign_setup: (@escaping @convention(c) (OpaquePointer?, OpaquePointer?, UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>?, UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>?) -> Int32)!)


/**  Set the ECDSA_do_verify function in the ECDSA_METHOD
 *   \param  ecdsa_method  pointer to existing ECDSA_METHOD
 *   \param  ecdsa_do_verify a funtion of type ECDSA_do_verify
 */
public func ECDSA_METHOD_set_verify(_ ecdsa_method: OpaquePointer!, _ ecdsa_do_verify: (@escaping @convention(c) (UnsafePointer<UInt8>?, Int32, UnsafePointer<ECDSA_SIG>?, OpaquePointer?) -> Int32)!)

public func ECDSA_METHOD_set_flags(_ ecdsa_method: OpaquePointer!, _ flags: Int32)


/**  Set the flags field in the ECDSA_METHOD
 *   \param  ecdsa_method  pointer to existing ECDSA_METHOD
 *   \param  flags flags value to set
 */
public func ECDSA_METHOD_set_name(_ ecdsa_method: OpaquePointer!, _ name: UnsafeMutablePointer<Int8>!)


/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
/**  Set the name field in the ECDSA_METHOD
 *   \param  ecdsa_method  pointer to existing ECDSA_METHOD
 *   \param  name name to set
 */
public func ERR_load_ECDSA_strings()

/* Error codes for the ECDSA functions. */

/* Function codes. */
public var ECDSA_F_ECDSA_CHECK: Int32 { get }
public var ECDSA_F_ECDSA_DATA_NEW_METHOD: Int32 { get }
public var ECDSA_F_ECDSA_DO_SIGN: Int32 { get }
public var ECDSA_F_ECDSA_DO_VERIFY: Int32 { get }
public var ECDSA_F_ECDSA_METHOD_NEW: Int32 { get }
public var ECDSA_F_ECDSA_SIGN_SETUP: Int32 { get }

/* Reason codes. */
public var ECDSA_R_BAD_SIGNATURE: Int32 { get }
public var ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE: Int32 { get }
public var ECDSA_R_ERR_EC_LIB: Int32 { get }
public var ECDSA_R_MISSING_PARAMETERS: Int32 { get }
public var ECDSA_R_NEED_NEW_SETUP_VALUES: Int32 { get }
public var ECDSA_R_NON_FIPS_METHOD: Int32 { get }
public var ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED: Int32 { get }
public var ECDSA_R_SIGNATURE_MALLOC_FAILED: Int32 { get }
/* crypto/ecdh/ecdh.h */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 *
 * The Elliptic Curve Public-Key Crypto Library (ECC Code) included
 * herein is developed by SUN MICROSYSTEMS, INC., and is contributed
 * to the OpenSSL project.
 *
 * The ECC Code is licensed pursuant to the OpenSSL open source
 * license provided below.
 *
 * The ECDH software is originally written by Douglas Stebila of
 * Sun Microsystems Laboratories.
 *
 */
/* ====================================================================
 * Copyright (c) 2000-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    licensing@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

public var EC_FLAG_COFACTOR_ECDH: Int32 { get }

public func ECDH_OpenSSL() -> OpaquePointer!

public func ECDH_set_default_method(_: OpaquePointer!)
public func ECDH_get_default_method() -> OpaquePointer!
public func ECDH_set_method(_: OpaquePointer!, _: OpaquePointer!) -> Int32

public func ECDH_compute_key(_ out: UnsafeMutableRawPointer!, _ outlen: Int, _ pub_key: OpaquePointer!, _ ecdh: OpaquePointer!, _ KDF: (@escaping @convention(c) (UnsafeRawPointer?, Int, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int>?) -> UnsafeMutableRawPointer?)!) -> Int32

public func ECDH_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func ECDH_set_ex_data(_ d: OpaquePointer!, _ idx: Int32, _ arg: UnsafeMutableRawPointer!) -> Int32
public func ECDH_get_ex_data(_ d: OpaquePointer!, _ idx: Int32) -> UnsafeMutableRawPointer!

public func ECDH_KDF_X9_62(_ out: UnsafeMutablePointer<UInt8>!, _ outlen: Int, _ Z: UnsafePointer<UInt8>!, _ Zlen: Int, _ sinfo: UnsafePointer<UInt8>!, _ sinfolen: Int, _ md: UnsafePointer<EVP_MD>!) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_ECDH_strings()

/* Error codes for the ECDH functions. */

/* Function codes. */
public var ECDH_F_ECDH_CHECK: Int32 { get }
public var ECDH_F_ECDH_COMPUTE_KEY: Int32 { get }
public var ECDH_F_ECDH_DATA_NEW_METHOD: Int32 { get }

/* Reason codes. */
public var ECDH_R_KDF_FAILED: Int32 { get }
public var ECDH_R_NON_FIPS_METHOD: Int32 { get }
public var ECDH_R_NO_PRIVATE_VALUE: Int32 { get }
public var ECDH_R_POINT_ARITHMETIC_FAILURE: Int32 { get }
/* crypto/rsa/rsa.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Declared already in ossl_typ.h */
/* typedef struct rsa_st RSA; */
/* typedef struct rsa_meth_st RSA_METHOD; */

public struct rsa_meth_st {

    public var name: UnsafePointer<Int8>!

    public var rsa_pub_enc: (@convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!

    public var rsa_pub_dec: (@convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!

    public var rsa_priv_enc: (@convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!

    public var rsa_priv_dec: (@convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!

    /* Can be null */
    public var rsa_mod_exp: (@convention(c) (UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafeMutablePointer<RSA>?, OpaquePointer?) -> Int32)!

    /* Can be null */
    public var bn_mod_exp: (@convention(c) (UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!

    /* called at new */
    public var `init`: (@convention(c) (UnsafeMutablePointer<RSA>?) -> Int32)!

    /* called at free */
    public var finish: (@convention(c) (UnsafeMutablePointer<RSA>?) -> Int32)!

    /* RSA_METHOD_FLAG_* things */
    public var flags: Int32

    /* may be needed! */
    public var app_data: UnsafeMutablePointer<Int8>!

    /*
     * New sign and verify functions: some libraries don't allow arbitrary
     * data to be signed/verified: this allows them to be used. Note: for
     * this to work the RSA_public_decrypt() and RSA_private_encrypt() should
     * *NOT* be used RSA_sign(), RSA_verify() should be used instead. Note:
     * for backwards compatibility this functionality is only enabled if the
     * RSA_FLAG_SIGN_VER option is set in 'flags'.
     */
    public var rsa_sign: (@convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?, UnsafePointer<RSA>?) -> Int32)!

    public var rsa_verify: (@convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafePointer<UInt8>?, UInt32, UnsafePointer<RSA>?) -> Int32)!

    /*
     * If this callback is NULL, the builtin software RSA key-gen will be
     * used. This is for behavioural compatibility whilst the code gets
     * rewired, but one day it would be nice to assume there are no such
     * things as "builtin software" implementations.
     */
    public var rsa_keygen: (@convention(c) (UnsafeMutablePointer<RSA>?, Int32, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!

    public init()

    public init(name: UnsafePointer<Int8>!, rsa_pub_enc: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!, rsa_pub_dec: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!, rsa_priv_enc: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!, rsa_priv_dec: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<RSA>?, Int32) -> Int32)!, rsa_mod_exp: (@escaping @convention(c) (UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafeMutablePointer<RSA>?, OpaquePointer?) -> Int32)!, bn_mod_exp: (@escaping @convention(c) (UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!, init: (@escaping @convention(c) (UnsafeMutablePointer<RSA>?) -> Int32)!, finish: (@escaping @convention(c) (UnsafeMutablePointer<RSA>?) -> Int32)!, flags: Int32, app_data: UnsafeMutablePointer<Int8>!, rsa_sign: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?, UnsafePointer<RSA>?) -> Int32)!, rsa_verify: (@escaping @convention(c) (Int32, UnsafePointer<UInt8>?, UInt32, UnsafePointer<UInt8>?, UInt32, UnsafePointer<RSA>?) -> Int32)!, rsa_keygen: (@escaping @convention(c) (UnsafeMutablePointer<RSA>?, Int32, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!)
}

public struct rsa_st {

    /*
     * The first parameter is used to pickup errors where this is passed
     * instead of aEVP_PKEY, it is set to 0
     */
    public var pad: Int32

    public var version: Int

    public var meth: UnsafePointer<RSA_METHOD>!

    /* functional reference if 'meth' is ENGINE-provided */
    public var engine: OpaquePointer!

    public var n: UnsafeMutablePointer<BIGNUM>!

    public var e: UnsafeMutablePointer<BIGNUM>!

    public var d: UnsafeMutablePointer<BIGNUM>!

    public var p: UnsafeMutablePointer<BIGNUM>!

    public var q: UnsafeMutablePointer<BIGNUM>!

    public var dmp1: UnsafeMutablePointer<BIGNUM>!

    public var dmq1: UnsafeMutablePointer<BIGNUM>!

    public var iqmp: UnsafeMutablePointer<BIGNUM>!

    /* be careful using this if the RSA structure is shared */
    public var ex_data: CRYPTO_EX_DATA

    public var references: Int32

    public var flags: Int32

    /* Used to cache montgomery values */
    public var _method_mod_n: UnsafeMutablePointer<BN_MONT_CTX>!

    public var _method_mod_p: UnsafeMutablePointer<BN_MONT_CTX>!

    public var _method_mod_q: UnsafeMutablePointer<BN_MONT_CTX>!

    /*
     * all BIGNUM values are actually in the following data, if it is not
     * NULL
     */
    public var bignum_data: UnsafeMutablePointer<Int8>!

    public var blinding: OpaquePointer!

    public var mt_blinding: OpaquePointer!

    public init()

    public init(pad: Int32, version: Int, meth: UnsafePointer<RSA_METHOD>!, engine: OpaquePointer!, n: UnsafeMutablePointer<BIGNUM>!, e: UnsafeMutablePointer<BIGNUM>!, d: UnsafeMutablePointer<BIGNUM>!, p: UnsafeMutablePointer<BIGNUM>!, q: UnsafeMutablePointer<BIGNUM>!, dmp1: UnsafeMutablePointer<BIGNUM>!, dmq1: UnsafeMutablePointer<BIGNUM>!, iqmp: UnsafeMutablePointer<BIGNUM>!, ex_data: CRYPTO_EX_DATA, references: Int32, flags: Int32, _method_mod_n: UnsafeMutablePointer<BN_MONT_CTX>!, _method_mod_p: UnsafeMutablePointer<BN_MONT_CTX>!, _method_mod_q: UnsafeMutablePointer<BN_MONT_CTX>!, bignum_data: UnsafeMutablePointer<Int8>!, blinding: OpaquePointer!, mt_blinding: OpaquePointer!)
}

public var OPENSSL_RSA_MAX_MODULUS_BITS: Int32 { get }

public var OPENSSL_RSA_SMALL_MODULUS_BITS: Int32 { get }

/* exponent limit enforced for "large" modulus only */
public var OPENSSL_RSA_MAX_PUBEXP_BITS: Int32 { get }

public var RSA_3: Int { get }
public var RSA_F4: Int { get }

public var RSA_METHOD_FLAG_NO_CHECK: Int32 { get } /* don't check pub/private
                                                * match */

public var RSA_FLAG_CACHE_PUBLIC: Int32 { get }
public var RSA_FLAG_CACHE_PRIVATE: Int32 { get }
public var RSA_FLAG_BLINDING: Int32 { get }
public var RSA_FLAG_THREAD_SAFE: Int32 { get }
/*
 * This flag means the private key operations will be handled by rsa_mod_exp
 * and that they do not depend on the private key components being present:
 * for example a key stored in external hardware. Without this flag
 * bn_mod_exp gets called when private key components are absent.
 */
public var RSA_FLAG_EXT_PKEY: Int32 { get }

/*
 * This flag in the RSA_METHOD enables the new rsa_sign, rsa_verify
 * functions.
 */
public var RSA_FLAG_SIGN_VER: Int32 { get }

/*
 * new with 0.9.6j and 0.9.7b; the built-in
 * RSA implementation now uses blinding by
 * default (ignoring RSA_FLAG_BLINDING),
 * but other engines might not need it
 */
public var RSA_FLAG_NO_BLINDING: Int32 { get }
/*
 * new with 0.9.8f; the built-in RSA
 * implementation now uses constant time
 * operations by default in private key operations,
 * e.g., constant time modular exponentiation,
 * modular inverse without leaking branches,
 * division without leaking branches. This
 * flag disables these constant time
 * operations and results in faster RSA
 * private key operations.
 */
public var RSA_FLAG_NO_CONSTTIME: Int32 { get }

/* deprecated name for the flag*/
/*
 * new with 0.9.7h; the built-in RSA
 * implementation now uses constant time
 * modular exponentiation for secret exponents
 * by default. This flag causes the
 * faster variable sliding window method to
 * be used for all exponents.
 */

public var RSA_PKCS1_PADDING: Int32 { get }
public var RSA_SSLV23_PADDING: Int32 { get }
public var RSA_NO_PADDING: Int32 { get }
public var RSA_PKCS1_OAEP_PADDING: Int32 { get }
public var RSA_X931_PADDING: Int32 { get }
/* EVP_PKEY_ only */
public var RSA_PKCS1_PSS_PADDING: Int32 { get }

public var RSA_PKCS1_PADDING_SIZE: Int32 { get }

public func RSA_new() -> UnsafeMutablePointer<RSA>!
public func RSA_new_method(_ engine: OpaquePointer!) -> UnsafeMutablePointer<RSA>!
public func RSA_size(_ rsa: UnsafePointer<RSA>!) -> Int32

/* Deprecated version */

public func RSA_generate_key(_ bits: Int32, _ e: UInt, _ callback: (@escaping @convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!, _ cb_arg: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<RSA>!
/* !defined(OPENSSL_NO_DEPRECATED) */

/* New version */
public func RSA_generate_key_ex(_ rsa: UnsafeMutablePointer<RSA>!, _ bits: Int32, _ e: UnsafeMutablePointer<BIGNUM>!, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32

public func RSA_check_key(_: UnsafePointer<RSA>!) -> Int32
/* next 4 return -1 on error */
public func RSA_public_encrypt(_ flen: Int32, _ from: UnsafePointer<UInt8>!, _ to: UnsafeMutablePointer<UInt8>!, _ rsa: UnsafeMutablePointer<RSA>!, _ padding: Int32) -> Int32
public func RSA_private_encrypt(_ flen: Int32, _ from: UnsafePointer<UInt8>!, _ to: UnsafeMutablePointer<UInt8>!, _ rsa: UnsafeMutablePointer<RSA>!, _ padding: Int32) -> Int32
public func RSA_public_decrypt(_ flen: Int32, _ from: UnsafePointer<UInt8>!, _ to: UnsafeMutablePointer<UInt8>!, _ rsa: UnsafeMutablePointer<RSA>!, _ padding: Int32) -> Int32
public func RSA_private_decrypt(_ flen: Int32, _ from: UnsafePointer<UInt8>!, _ to: UnsafeMutablePointer<UInt8>!, _ rsa: UnsafeMutablePointer<RSA>!, _ padding: Int32) -> Int32
public func RSA_free(_ r: UnsafeMutablePointer<RSA>!)
/* "up" the RSA object's reference count */
public func RSA_up_ref(_ r: UnsafeMutablePointer<RSA>!) -> Int32

public func RSA_flags(_ r: UnsafePointer<RSA>!) -> Int32

public func RSA_set_default_method(_ meth: UnsafePointer<RSA_METHOD>!)
public func RSA_get_default_method() -> UnsafePointer<RSA_METHOD>!
public func RSA_get_method(_ rsa: UnsafePointer<RSA>!) -> UnsafePointer<RSA_METHOD>!
public func RSA_set_method(_ rsa: UnsafeMutablePointer<RSA>!, _ meth: UnsafePointer<RSA_METHOD>!) -> Int32

/* This function needs the memory locking malloc callbacks to be installed */
public func RSA_memory_lock(_ r: UnsafeMutablePointer<RSA>!) -> Int32

/* these are the actual SSLeay RSA functions */
public func RSA_PKCS1_SSLeay() -> UnsafePointer<RSA_METHOD>!

public func RSA_null_method() -> UnsafePointer<RSA_METHOD>!

public func d2i_RSAPublicKey(_ a: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<RSA>!

public func i2d_RSAPublicKey(_ a: UnsafePointer<RSA>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func d2i_RSAPrivateKey(_ a: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<RSA>!

public func i2d_RSAPrivateKey(_ a: UnsafePointer<RSA>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public struct rsa_pss_params_st {

    public var hashAlgorithm: UnsafeMutablePointer<X509_ALGOR>!

    public var maskGenAlgorithm: UnsafeMutablePointer<X509_ALGOR>!

    public var saltLength: UnsafeMutablePointer<ASN1_INTEGER>!

    public var trailerField: UnsafeMutablePointer<ASN1_INTEGER>!

    public init()

    public init(hashAlgorithm: UnsafeMutablePointer<X509_ALGOR>!, maskGenAlgorithm: UnsafeMutablePointer<X509_ALGOR>!, saltLength: UnsafeMutablePointer<ASN1_INTEGER>!, trailerField: UnsafeMutablePointer<ASN1_INTEGER>!)
}
public typealias RSA_PSS_PARAMS = rsa_pss_params_st

public func RSA_PSS_PARAMS_new() -> UnsafeMutablePointer<RSA_PSS_PARAMS>!

public func RSA_PSS_PARAMS_free(_ a: UnsafeMutablePointer<RSA_PSS_PARAMS>!)

public func d2i_RSA_PSS_PARAMS(_ a: UnsafeMutablePointer<UnsafeMutablePointer<RSA_PSS_PARAMS>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<RSA_PSS_PARAMS>!

public func i2d_RSA_PSS_PARAMS(_ a: UnsafeMutablePointer<RSA_PSS_PARAMS>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public struct rsa_oaep_params_st {

    public var hashFunc: UnsafeMutablePointer<X509_ALGOR>!

    public var maskGenFunc: UnsafeMutablePointer<X509_ALGOR>!

    public var pSourceFunc: UnsafeMutablePointer<X509_ALGOR>!

    public init()

    public init(hashFunc: UnsafeMutablePointer<X509_ALGOR>!, maskGenFunc: UnsafeMutablePointer<X509_ALGOR>!, pSourceFunc: UnsafeMutablePointer<X509_ALGOR>!)
}
public typealias RSA_OAEP_PARAMS = rsa_oaep_params_st

public func RSA_OAEP_PARAMS_new() -> UnsafeMutablePointer<RSA_OAEP_PARAMS>!

public func RSA_OAEP_PARAMS_free(_ a: UnsafeMutablePointer<RSA_OAEP_PARAMS>!)

public func d2i_RSA_OAEP_PARAMS(_ a: UnsafeMutablePointer<UnsafeMutablePointer<RSA_OAEP_PARAMS>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<RSA_OAEP_PARAMS>!

public func i2d_RSA_OAEP_PARAMS(_ a: UnsafeMutablePointer<RSA_OAEP_PARAMS>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func RSA_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ r: UnsafePointer<RSA>!, _ offset: Int32) -> Int32

public func RSA_print(_ bp: UnsafeMutablePointer<BIO>!, _ r: UnsafePointer<RSA>!, _ offset: Int32) -> Int32

public func i2d_RSA_NET(_ a: UnsafePointer<RSA>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, UnsafePointer<Int8>?, Int32) -> Int32)!, _ sgckey: Int32) -> Int32
public func d2i_RSA_NET(_ a: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, UnsafePointer<Int8>?, Int32) -> Int32)!, _ sgckey: Int32) -> UnsafeMutablePointer<RSA>!

public func i2d_Netscape_RSA(_ a: UnsafePointer<RSA>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, UnsafePointer<Int8>?, Int32) -> Int32)!) -> Int32
public func d2i_Netscape_RSA(_ a: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, UnsafePointer<Int8>?, Int32) -> Int32)!) -> UnsafeMutablePointer<RSA>!

/*
 * The following 2 functions sign and verify a X509_SIG ASN1 object inside
 * PKCS#1 padded RSA encryption
 */
public func RSA_sign(_ type: Int32, _ m: UnsafePointer<UInt8>!, _ m_length: UInt32, _ sigret: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<UInt32>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32
public func RSA_verify(_ type: Int32, _ m: UnsafePointer<UInt8>!, _ m_length: UInt32, _ sigbuf: UnsafePointer<UInt8>!, _ siglen: UInt32, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32

/*
 * The following 2 function sign and verify a ASN1_OCTET_STRING object inside
 * PKCS#1 padded RSA encryption
 */
public func RSA_sign_ASN1_OCTET_STRING(_ type: Int32, _ m: UnsafePointer<UInt8>!, _ m_length: UInt32, _ sigret: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<UInt32>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32
public func RSA_verify_ASN1_OCTET_STRING(_ type: Int32, _ m: UnsafePointer<UInt8>!, _ m_length: UInt32, _ sigbuf: UnsafeMutablePointer<UInt8>!, _ siglen: UInt32, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32

public func RSA_blinding_on(_ rsa: UnsafeMutablePointer<RSA>!, _ ctx: OpaquePointer!) -> Int32
public func RSA_blinding_off(_ rsa: UnsafeMutablePointer<RSA>!)
public func RSA_setup_blinding(_ rsa: UnsafeMutablePointer<RSA>!, _ ctx: OpaquePointer!) -> OpaquePointer!

public func RSA_padding_add_PKCS1_type_1(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32) -> Int32
public func RSA_padding_check_PKCS1_type_1(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32, _ rsa_len: Int32) -> Int32
public func RSA_padding_add_PKCS1_type_2(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32) -> Int32
public func RSA_padding_check_PKCS1_type_2(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32, _ rsa_len: Int32) -> Int32
public func PKCS1_MGF1(_ mask: UnsafeMutablePointer<UInt8>!, _ len: Int, _ seed: UnsafePointer<UInt8>!, _ seedlen: Int, _ dgst: UnsafePointer<EVP_MD>!) -> Int32
public func RSA_padding_add_PKCS1_OAEP(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32, _ p: UnsafePointer<UInt8>!, _ pl: Int32) -> Int32
public func RSA_padding_check_PKCS1_OAEP(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32, _ rsa_len: Int32, _ p: UnsafePointer<UInt8>!, _ pl: Int32) -> Int32
public func RSA_padding_add_PKCS1_OAEP_mgf1(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ from: UnsafePointer<UInt8>!, _ flen: Int32, _ param: UnsafePointer<UInt8>!, _ plen: Int32, _ md: UnsafePointer<EVP_MD>!, _ mgf1md: UnsafePointer<EVP_MD>!) -> Int32
public func RSA_padding_check_PKCS1_OAEP_mgf1(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ from: UnsafePointer<UInt8>!, _ flen: Int32, _ num: Int32, _ param: UnsafePointer<UInt8>!, _ plen: Int32, _ md: UnsafePointer<EVP_MD>!, _ mgf1md: UnsafePointer<EVP_MD>!) -> Int32
public func RSA_padding_add_SSLv23(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32) -> Int32
public func RSA_padding_check_SSLv23(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32, _ rsa_len: Int32) -> Int32
public func RSA_padding_add_none(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32) -> Int32
public func RSA_padding_check_none(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32, _ rsa_len: Int32) -> Int32
public func RSA_padding_add_X931(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32) -> Int32
public func RSA_padding_check_X931(_ to: UnsafeMutablePointer<UInt8>!, _ tlen: Int32, _ f: UnsafePointer<UInt8>!, _ fl: Int32, _ rsa_len: Int32) -> Int32
public func RSA_X931_hash_id(_ nid: Int32) -> Int32

public func RSA_verify_PKCS1_PSS(_ rsa: UnsafeMutablePointer<RSA>!, _ mHash: UnsafePointer<UInt8>!, _ Hash: UnsafePointer<EVP_MD>!, _ EM: UnsafePointer<UInt8>!, _ sLen: Int32) -> Int32
public func RSA_padding_add_PKCS1_PSS(_ rsa: UnsafeMutablePointer<RSA>!, _ EM: UnsafeMutablePointer<UInt8>!, _ mHash: UnsafePointer<UInt8>!, _ Hash: UnsafePointer<EVP_MD>!, _ sLen: Int32) -> Int32

public func RSA_verify_PKCS1_PSS_mgf1(_ rsa: UnsafeMutablePointer<RSA>!, _ mHash: UnsafePointer<UInt8>!, _ Hash: UnsafePointer<EVP_MD>!, _ mgf1Hash: UnsafePointer<EVP_MD>!, _ EM: UnsafePointer<UInt8>!, _ sLen: Int32) -> Int32

public func RSA_padding_add_PKCS1_PSS_mgf1(_ rsa: UnsafeMutablePointer<RSA>!, _ EM: UnsafeMutablePointer<UInt8>!, _ mHash: UnsafePointer<UInt8>!, _ Hash: UnsafePointer<EVP_MD>!, _ mgf1Hash: UnsafePointer<EVP_MD>!, _ sLen: Int32) -> Int32

public func RSA_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func RSA_set_ex_data(_ r: UnsafeMutablePointer<RSA>!, _ idx: Int32, _ arg: UnsafeMutableRawPointer!) -> Int32
public func RSA_get_ex_data(_ r: UnsafePointer<RSA>!, _ idx: Int32) -> UnsafeMutableRawPointer!

public func RSAPublicKey_dup(_ rsa: UnsafeMutablePointer<RSA>!) -> UnsafeMutablePointer<RSA>!
public func RSAPrivateKey_dup(_ rsa: UnsafeMutablePointer<RSA>!) -> UnsafeMutablePointer<RSA>!

/*
 * If this flag is set the RSA method is FIPS compliant and can be used in
 * FIPS mode. This is set in the validated module method. If an application
 * sets this flag in its own methods it is its responsibility to ensure the
 * result is compliant.
 */

public var RSA_FLAG_FIPS_METHOD: Int32 { get }

/*
 * If this flag is set the operations normally disabled in FIPS mode are
 * permitted it is then the applications responsibility to ensure that the
 * usage is compliant.
 */

public var RSA_FLAG_NON_FIPS_ALLOW: Int32 { get }
/*
 * Application has decided PRNG is good enough to generate a key: don't
 * check.
 */
public var RSA_FLAG_CHECKED: Int32 { get }

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_RSA_strings()

/* Error codes for the RSA functions. */

/* Function codes. */
public var RSA_F_CHECK_PADDING_MD: Int32 { get }
public var RSA_F_DO_RSA_PRINT: Int32 { get }
public var RSA_F_INT_RSA_VERIFY: Int32 { get }
public var RSA_F_MEMORY_LOCK: Int32 { get }
public var RSA_F_OLD_RSA_PRIV_DECODE: Int32 { get }
public var RSA_F_PKEY_RSA_CTRL: Int32 { get }
public var RSA_F_PKEY_RSA_CTRL_STR: Int32 { get }
public var RSA_F_PKEY_RSA_SIGN: Int32 { get }
public var RSA_F_PKEY_RSA_VERIFY: Int32 { get }
public var RSA_F_PKEY_RSA_VERIFYRECOVER: Int32 { get }
public var RSA_F_RSA_ALGOR_TO_MD: Int32 { get }
public var RSA_F_RSA_BUILTIN_KEYGEN: Int32 { get }
public var RSA_F_RSA_CHECK_KEY: Int32 { get }
public var RSA_F_RSA_CMS_DECRYPT: Int32 { get }
public var RSA_F_RSA_EAY_PRIVATE_DECRYPT: Int32 { get }
public var RSA_F_RSA_EAY_PRIVATE_ENCRYPT: Int32 { get }
public var RSA_F_RSA_EAY_PUBLIC_DECRYPT: Int32 { get }
public var RSA_F_RSA_EAY_PUBLIC_ENCRYPT: Int32 { get }
public var RSA_F_RSA_GENERATE_KEY: Int32 { get }
public var RSA_F_RSA_GENERATE_KEY_EX: Int32 { get }
public var RSA_F_RSA_ITEM_VERIFY: Int32 { get }
public var RSA_F_RSA_MEMORY_LOCK: Int32 { get }
public var RSA_F_RSA_MGF1_TO_MD: Int32 { get }
public var RSA_F_RSA_NEW_METHOD: Int32 { get }
public var RSA_F_RSA_NULL: Int32 { get }
public var RSA_F_RSA_NULL_MOD_EXP: Int32 { get }
public var RSA_F_RSA_NULL_PRIVATE_DECRYPT: Int32 { get }
public var RSA_F_RSA_NULL_PRIVATE_ENCRYPT: Int32 { get }
public var RSA_F_RSA_NULL_PUBLIC_DECRYPT: Int32 { get }
public var RSA_F_RSA_NULL_PUBLIC_ENCRYPT: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_NONE: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_PKCS1_OAEP: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_PKCS1_OAEP_MGF1: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_PKCS1_PSS: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_SSLV23: Int32 { get }
public var RSA_F_RSA_PADDING_ADD_X931: Int32 { get }
public var RSA_F_RSA_PADDING_CHECK_NONE: Int32 { get }
public var RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP: Int32 { get }
public var RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP_MGF1: Int32 { get }
public var RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1: Int32 { get }
public var RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2: Int32 { get }
public var RSA_F_RSA_PADDING_CHECK_SSLV23: Int32 { get }
public var RSA_F_RSA_PADDING_CHECK_X931: Int32 { get }
public var RSA_F_RSA_PRINT: Int32 { get }
public var RSA_F_RSA_PRINT_FP: Int32 { get }
public var RSA_F_RSA_PRIVATE_DECRYPT: Int32 { get }
public var RSA_F_RSA_PRIVATE_ENCRYPT: Int32 { get }
public var RSA_F_RSA_PRIV_DECODE: Int32 { get }
public var RSA_F_RSA_PRIV_ENCODE: Int32 { get }
public var RSA_F_RSA_PSS_TO_CTX: Int32 { get }
public var RSA_F_RSA_PUBLIC_DECRYPT: Int32 { get }
public var RSA_F_RSA_PUBLIC_ENCRYPT: Int32 { get }
public var RSA_F_RSA_PUB_DECODE: Int32 { get }
public var RSA_F_RSA_SETUP_BLINDING: Int32 { get }
public var RSA_F_RSA_SIGN: Int32 { get }
public var RSA_F_RSA_SIGN_ASN1_OCTET_STRING: Int32 { get }
public var RSA_F_RSA_VERIFY: Int32 { get }
public var RSA_F_RSA_VERIFY_ASN1_OCTET_STRING: Int32 { get }
public var RSA_F_RSA_VERIFY_PKCS1_PSS: Int32 { get }
public var RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1: Int32 { get }

/* Reason codes. */
public var RSA_R_ALGORITHM_MISMATCH: Int32 { get }
public var RSA_R_BAD_E_VALUE: Int32 { get }
public var RSA_R_BAD_FIXED_HEADER_DECRYPT: Int32 { get }
public var RSA_R_BAD_PAD_BYTE_COUNT: Int32 { get }
public var RSA_R_BAD_SIGNATURE: Int32 { get }
public var RSA_R_BLOCK_TYPE_IS_NOT_01: Int32 { get }
public var RSA_R_BLOCK_TYPE_IS_NOT_02: Int32 { get }
public var RSA_R_DATA_GREATER_THAN_MOD_LEN: Int32 { get }
public var RSA_R_DATA_TOO_LARGE: Int32 { get }
public var RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE: Int32 { get }
public var RSA_R_DATA_TOO_LARGE_FOR_MODULUS: Int32 { get }
public var RSA_R_DATA_TOO_SMALL: Int32 { get }
public var RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE: Int32 { get }
public var RSA_R_DIGEST_DOES_NOT_MATCH: Int32 { get }
public var RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY: Int32 { get }
public var RSA_R_DMP1_NOT_CONGRUENT_TO_D: Int32 { get }
public var RSA_R_DMQ1_NOT_CONGRUENT_TO_D: Int32 { get }
public var RSA_R_D_E_NOT_CONGRUENT_TO_1: Int32 { get }
public var RSA_R_FIRST_OCTET_INVALID: Int32 { get }
public var RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE: Int32 { get }
public var RSA_R_INVALID_DIGEST: Int32 { get }
public var RSA_R_INVALID_DIGEST_LENGTH: Int32 { get }
public var RSA_R_INVALID_HEADER: Int32 { get }
public var RSA_R_INVALID_KEYBITS: Int32 { get }
public var RSA_R_INVALID_LABEL: Int32 { get }
public var RSA_R_INVALID_MESSAGE_LENGTH: Int32 { get }
public var RSA_R_INVALID_MGF1_MD: Int32 { get }
public var RSA_R_INVALID_OAEP_PARAMETERS: Int32 { get }
public var RSA_R_INVALID_PADDING: Int32 { get }
public var RSA_R_INVALID_PADDING_MODE: Int32 { get }
public var RSA_R_INVALID_PSS_PARAMETERS: Int32 { get }
public var RSA_R_INVALID_PSS_SALTLEN: Int32 { get }
public var RSA_R_INVALID_SALT_LENGTH: Int32 { get }
public var RSA_R_INVALID_TRAILER: Int32 { get }
public var RSA_R_INVALID_X931_DIGEST: Int32 { get }
public var RSA_R_IQMP_NOT_INVERSE_OF_Q: Int32 { get }
public var RSA_R_KEY_SIZE_TOO_SMALL: Int32 { get }
public var RSA_R_LAST_OCTET_INVALID: Int32 { get }
public var RSA_R_MODULUS_TOO_LARGE: Int32 { get }
public var RSA_R_NON_FIPS_RSA_METHOD: Int32 { get }
public var RSA_R_NO_PUBLIC_EXPONENT: Int32 { get }
public var RSA_R_NULL_BEFORE_BLOCK_MISSING: Int32 { get }
public var RSA_R_N_DOES_NOT_EQUAL_P_Q: Int32 { get }
public var RSA_R_OAEP_DECODING_ERROR: Int32 { get }
public var RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE: Int32 { get }
public var RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE: Int32 { get }
public var RSA_R_PADDING_CHECK_FAILED: Int32 { get }
public var RSA_R_PKCS_DECODING_ERROR: Int32 { get }
public var RSA_R_P_NOT_PRIME: Int32 { get }
public var RSA_R_Q_NOT_PRIME: Int32 { get }
public var RSA_R_RSA_OPERATIONS_NOT_SUPPORTED: Int32 { get }
public var RSA_R_SLEN_CHECK_FAILED: Int32 { get }
public var RSA_R_SLEN_RECOVERY_FAILED: Int32 { get }
public var RSA_R_SSLV3_ROLLBACK_ATTACK: Int32 { get }
public var RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD: Int32 { get }
public var RSA_R_UNKNOWN_ALGORITHM_TYPE: Int32 { get }
public var RSA_R_UNKNOWN_DIGEST: Int32 { get }
public var RSA_R_UNKNOWN_MASK_DIGEST: Int32 { get }
public var RSA_R_UNKNOWN_PADDING_TYPE: Int32 { get }
public var RSA_R_UNKNOWN_PSS_DIGEST: Int32 { get }
public var RSA_R_UNSUPPORTED_ENCRYPTION_TYPE: Int32 { get }
public var RSA_R_UNSUPPORTED_LABEL_SOURCE: Int32 { get }
public var RSA_R_UNSUPPORTED_MASK_ALGORITHM: Int32 { get }
public var RSA_R_UNSUPPORTED_MASK_PARAMETER: Int32 { get }
public var RSA_R_UNSUPPORTED_SIGNATURE_TYPE: Int32 { get }
public var RSA_R_VALUE_MISSING: Int32 { get }
public var RSA_R_WRONG_SIGNATURE_LENGTH: Int32 { get }
/* crypto/dh/dh.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

public var OPENSSL_DH_MAX_MODULUS_BITS: Int32 { get }

public var DH_FLAG_CACHE_MONT_P: Int32 { get }

/*
 * new with 0.9.7h; the built-in DH
 * implementation now uses constant time
 * modular exponentiation for secret exponents
 * by default. This flag causes the
 * faster variable sliding window method to
 * be used for all exponents.
 */
public var DH_FLAG_NO_EXP_CONSTTIME: Int32 { get }

/*
 * If this flag is set the DH method is FIPS compliant and can be used in
 * FIPS mode. This is set in the validated module method. If an application
 * sets this flag in its own methods it is its reposibility to ensure the
 * result is compliant.
 */

public var DH_FLAG_FIPS_METHOD: Int32 { get }

/*
 * If this flag is set the operations normally disabled in FIPS mode are
 * permitted it is then the applications responsibility to ensure that the
 * usage is compliant.
 */

public var DH_FLAG_NON_FIPS_ALLOW: Int32 { get }

/* Already defined in ossl_typ.h */
/* typedef struct dh_st DH; */
/* typedef struct dh_method DH_METHOD; */

public struct dh_method {

    public var name: UnsafePointer<Int8>!

    /* Methods here */
    public var generate_key: (@convention(c) (UnsafeMutablePointer<DH>?) -> Int32)!

    public var compute_key: (@convention(c) (UnsafeMutablePointer<UInt8>?, UnsafePointer<BIGNUM>?, UnsafeMutablePointer<DH>?) -> Int32)!

    /* Can be null */
    public var bn_mod_exp: (@convention(c) (UnsafePointer<DH>?, UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!

    public var `init`: (@convention(c) (UnsafeMutablePointer<DH>?) -> Int32)!

    public var finish: (@convention(c) (UnsafeMutablePointer<DH>?) -> Int32)!

    public var flags: Int32

    public var app_data: UnsafeMutablePointer<Int8>!

    /* If this is non-NULL, it will be used to generate parameters */
    public var generate_params: (@convention(c) (UnsafeMutablePointer<DH>?, Int32, Int32, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!

    public init()

    public init(name: UnsafePointer<Int8>!, generate_key: (@escaping @convention(c) (UnsafeMutablePointer<DH>?) -> Int32)!, compute_key: (@escaping @convention(c) (UnsafeMutablePointer<UInt8>?, UnsafePointer<BIGNUM>?, UnsafeMutablePointer<DH>?) -> Int32)!, bn_mod_exp: (@escaping @convention(c) (UnsafePointer<DH>?, UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!, init: (@escaping @convention(c) (UnsafeMutablePointer<DH>?) -> Int32)!, finish: (@escaping @convention(c) (UnsafeMutablePointer<DH>?) -> Int32)!, flags: Int32, app_data: UnsafeMutablePointer<Int8>!, generate_params: (@escaping @convention(c) (UnsafeMutablePointer<DH>?, Int32, Int32, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!)
}

public struct dh_st {

    /*
     * This first argument is used to pick up errors when a DH is passed
     * instead of a EVP_PKEY
     */
    public var pad: Int32

    public var version: Int32

    public var p: UnsafeMutablePointer<BIGNUM>!

    public var g: UnsafeMutablePointer<BIGNUM>!

    public var length: Int /* optional */

    public var pub_key: UnsafeMutablePointer<BIGNUM>! /* g^x % p */

    public var priv_key: UnsafeMutablePointer<BIGNUM>! /* x */

    public var flags: Int32

    public var method_mont_p: UnsafeMutablePointer<BN_MONT_CTX>!

    /* Place holders if we want to do X9.42 DH */
    public var q: UnsafeMutablePointer<BIGNUM>!

    public var j: UnsafeMutablePointer<BIGNUM>!

    public var seed: UnsafeMutablePointer<UInt8>!

    public var seedlen: Int32

    public var counter: UnsafeMutablePointer<BIGNUM>!

    public var references: Int32

    public var ex_data: CRYPTO_EX_DATA

    public var meth: UnsafePointer<DH_METHOD>!

    public var engine: OpaquePointer!

    public init()

    public init(pad: Int32, version: Int32, p: UnsafeMutablePointer<BIGNUM>!, g: UnsafeMutablePointer<BIGNUM>!, length: Int, pub_key: UnsafeMutablePointer<BIGNUM>!, priv_key: UnsafeMutablePointer<BIGNUM>!, flags: Int32, method_mont_p: UnsafeMutablePointer<BN_MONT_CTX>!, q: UnsafeMutablePointer<BIGNUM>!, j: UnsafeMutablePointer<BIGNUM>!, seed: UnsafeMutablePointer<UInt8>!, seedlen: Int32, counter: UnsafeMutablePointer<BIGNUM>!, references: Int32, ex_data: CRYPTO_EX_DATA, meth: UnsafePointer<DH_METHOD>!, engine: OpaquePointer!)
}

public var DH_GENERATOR_2: Int32 { get }
/* #define DH_GENERATOR_3       3 */
public var DH_GENERATOR_5: Int32 { get }

/* DH_check error codes */
public var DH_CHECK_P_NOT_PRIME: Int32 { get }
public var DH_CHECK_P_NOT_SAFE_PRIME: Int32 { get }
public var DH_UNABLE_TO_CHECK_GENERATOR: Int32 { get }
public var DH_NOT_SUITABLE_GENERATOR: Int32 { get }
public var DH_CHECK_Q_NOT_PRIME: Int32 { get }
public var DH_CHECK_INVALID_Q_VALUE: Int32 { get }
public var DH_CHECK_INVALID_J_VALUE: Int32 { get }

/* DH_check_pub_key error codes */
public var DH_CHECK_PUBKEY_TOO_SMALL: Int32 { get }
public var DH_CHECK_PUBKEY_TOO_LARGE: Int32 { get }
public var DH_CHECK_PUBKEY_INVALID: Int32 { get }

/*
 * primes p where (p-1)/2 is prime too are called "safe"; we define this for
 * backward compatibility:
 */
public var DH_CHECK_P_NOT_STRONG_PRIME: Int32 { get }

public func DHparams_dup(_: UnsafeMutablePointer<DH>!) -> UnsafeMutablePointer<DH>!

public func DH_OpenSSL() -> UnsafePointer<DH_METHOD>!

public func DH_set_default_method(_ meth: UnsafePointer<DH_METHOD>!)
public func DH_get_default_method() -> UnsafePointer<DH_METHOD>!
public func DH_set_method(_ dh: UnsafeMutablePointer<DH>!, _ meth: UnsafePointer<DH_METHOD>!) -> Int32
public func DH_new_method(_ engine: OpaquePointer!) -> UnsafeMutablePointer<DH>!

public func DH_new() -> UnsafeMutablePointer<DH>!
public func DH_free(_ dh: UnsafeMutablePointer<DH>!)
public func DH_up_ref(_ dh: UnsafeMutablePointer<DH>!) -> Int32
public func DH_size(_ dh: UnsafePointer<DH>!) -> Int32
public func DH_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func DH_set_ex_data(_ d: UnsafeMutablePointer<DH>!, _ idx: Int32, _ arg: UnsafeMutableRawPointer!) -> Int32
public func DH_get_ex_data(_ d: UnsafeMutablePointer<DH>!, _ idx: Int32) -> UnsafeMutableRawPointer!

/* Deprecated version */

public func DH_generate_parameters(_ prime_len: Int32, _ generator: Int32, _ callback: (@escaping @convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!, _ cb_arg: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DH>!
/* !defined(OPENSSL_NO_DEPRECATED) */

/* New version */
public func DH_generate_parameters_ex(_ dh: UnsafeMutablePointer<DH>!, _ prime_len: Int32, _ generator: Int32, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32

public func DH_check(_ dh: UnsafePointer<DH>!, _ codes: UnsafeMutablePointer<Int32>!) -> Int32
public func DH_check_pub_key(_ dh: UnsafePointer<DH>!, _ pub_key: UnsafePointer<BIGNUM>!, _ codes: UnsafeMutablePointer<Int32>!) -> Int32
public func DH_generate_key(_ dh: UnsafeMutablePointer<DH>!) -> Int32
public func DH_compute_key(_ key: UnsafeMutablePointer<UInt8>!, _ pub_key: UnsafePointer<BIGNUM>!, _ dh: UnsafeMutablePointer<DH>!) -> Int32
public func DH_compute_key_padded(_ key: UnsafeMutablePointer<UInt8>!, _ pub_key: UnsafePointer<BIGNUM>!, _ dh: UnsafeMutablePointer<DH>!) -> Int32
public func d2i_DHparams(_ a: UnsafeMutablePointer<UnsafeMutablePointer<DH>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<DH>!
public func i2d_DHparams(_ a: UnsafePointer<DH>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_DHxparams(_ a: UnsafeMutablePointer<UnsafeMutablePointer<DH>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<DH>!
public func i2d_DHxparams(_ a: UnsafePointer<DH>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func DHparams_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafePointer<DH>!) -> Int32

public func DHparams_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafePointer<DH>!) -> Int32

/* RFC 5114 parameters */
public func DH_get_1024_160() -> UnsafeMutablePointer<DH>!
public func DH_get_2048_224() -> UnsafeMutablePointer<DH>!
public func DH_get_2048_256() -> UnsafeMutablePointer<DH>!

/* RFC2631 KDF */
public func DH_KDF_X9_42(_ out: UnsafeMutablePointer<UInt8>!, _ outlen: Int, _ Z: UnsafePointer<UInt8>!, _ Zlen: Int, _ key_oid: UnsafeMutablePointer<ASN1_OBJECT>!, _ ukm: UnsafePointer<UInt8>!, _ ukmlen: Int, _ md: UnsafePointer<EVP_MD>!) -> Int32

/* KDF types */
public var EVP_PKEY_DH_KDF_NONE: Int32 { get }
public var EVP_PKEY_DH_KDF_X9_42: Int32 { get }

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_DH_strings()

/* Error codes for the DH functions. */

/* Function codes. */
public var DH_F_COMPUTE_KEY: Int32 { get }
public var DH_F_DHPARAMS_PRINT_FP: Int32 { get }
public var DH_F_DH_BUILTIN_GENPARAMS: Int32 { get }
public var DH_F_DH_CMS_DECRYPT: Int32 { get }
public var DH_F_DH_CMS_SET_PEERKEY: Int32 { get }
public var DH_F_DH_CMS_SET_SHARED_INFO: Int32 { get }
public var DH_F_DH_COMPUTE_KEY: Int32 { get }
public var DH_F_DH_GENERATE_KEY: Int32 { get }
public var DH_F_DH_GENERATE_PARAMETERS_EX: Int32 { get }
public var DH_F_DH_NEW_METHOD: Int32 { get }
public var DH_F_DH_PARAM_DECODE: Int32 { get }
public var DH_F_DH_PRIV_DECODE: Int32 { get }
public var DH_F_DH_PRIV_ENCODE: Int32 { get }
public var DH_F_DH_PUB_DECODE: Int32 { get }
public var DH_F_DH_PUB_ENCODE: Int32 { get }
public var DH_F_DO_DH_PRINT: Int32 { get }
public var DH_F_GENERATE_KEY: Int32 { get }
public var DH_F_GENERATE_PARAMETERS: Int32 { get }
public var DH_F_PKEY_DH_DERIVE: Int32 { get }
public var DH_F_PKEY_DH_KEYGEN: Int32 { get }

/* Reason codes. */
public var DH_R_BAD_GENERATOR: Int32 { get }
public var DH_R_BN_DECODE_ERROR: Int32 { get }
public var DH_R_BN_ERROR: Int32 { get }
public var DH_R_DECODE_ERROR: Int32 { get }
public var DH_R_INVALID_PUBKEY: Int32 { get }
public var DH_R_KDF_PARAMETER_ERROR: Int32 { get }
public var DH_R_KEYS_NOT_SET: Int32 { get }
public var DH_R_KEY_SIZE_TOO_SMALL: Int32 { get }
public var DH_R_MODULUS_TOO_LARGE: Int32 { get }
public var DH_R_NON_FIPS_METHOD: Int32 { get }
public var DH_R_NO_PARAMETERS_SET: Int32 { get }
public var DH_R_NO_PRIVATE_VALUE: Int32 { get }
public var DH_R_PARAMETER_ENCODING_ERROR: Int32 { get }
public var DH_R_PEER_KEY_ERROR: Int32 { get }
public var DH_R_SHARED_INFO_ERROR: Int32 { get }
/* crypto/dsa/dsa.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*
 * The DSS routines are based on patches supplied by
 * Steven Schoch <schoch@sheba.arc.nasa.gov>.  He basically did the
 * work and I have just tweaked them a little to fit into my
 * stylistic vision for SSLeay :-) */

public var OPENSSL_DSA_MAX_MODULUS_BITS: Int32 { get }

public var DSA_FLAG_CACHE_MONT_P: Int32 { get }
/*
 * new with 0.9.7h; the built-in DSA implementation now uses constant time
 * modular exponentiation for secret exponents by default. This flag causes
 * the faster variable sliding window method to be used for all exponents.
 */
public var DSA_FLAG_NO_EXP_CONSTTIME: Int32 { get }

/*
 * If this flag is set the DSA method is FIPS compliant and can be used in
 * FIPS mode. This is set in the validated module method. If an application
 * sets this flag in its own methods it is its reposibility to ensure the
 * result is compliant.
 */

public var DSA_FLAG_FIPS_METHOD: Int32 { get }

/*
 * If this flag is set the operations normally disabled in FIPS mode are
 * permitted it is then the applications responsibility to ensure that the
 * usage is compliant.
 */

public var DSA_FLAG_NON_FIPS_ALLOW: Int32 { get }

/* Already defined in ossl_typ.h */
/* typedef struct dsa_st DSA; */
/* typedef struct dsa_method DSA_METHOD; */

public struct DSA_SIG_st {

    public var r: UnsafeMutablePointer<BIGNUM>!

    public var s: UnsafeMutablePointer<BIGNUM>!

    public init()

    public init(r: UnsafeMutablePointer<BIGNUM>!, s: UnsafeMutablePointer<BIGNUM>!)
}
public typealias DSA_SIG = DSA_SIG_st

public struct dsa_method {

    public var name: UnsafePointer<Int8>!

    public var dsa_do_sign: (@convention(c) (UnsafePointer<UInt8>?, Int32, UnsafeMutablePointer<DSA>?) -> UnsafeMutablePointer<DSA_SIG>?)!

    public var dsa_sign_setup: (@convention(c) (UnsafeMutablePointer<DSA>?, OpaquePointer?, UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>?, UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>?) -> Int32)!

    public var dsa_do_verify: (@convention(c) (UnsafePointer<UInt8>?, Int32, UnsafeMutablePointer<DSA_SIG>?, UnsafeMutablePointer<DSA>?) -> Int32)!

    public var dsa_mod_exp: (@convention(c) (UnsafeMutablePointer<DSA>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!

    /* Can be null */
    public var bn_mod_exp: (@convention(c) (UnsafeMutablePointer<DSA>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!

    public var `init`: (@convention(c) (UnsafeMutablePointer<DSA>?) -> Int32)!

    public var finish: (@convention(c) (UnsafeMutablePointer<DSA>?) -> Int32)!

    public var flags: Int32

    public var app_data: UnsafeMutablePointer<Int8>!

    /* If this is non-NULL, it is used to generate DSA parameters */
    public var dsa_paramgen: (@convention(c) (UnsafeMutablePointer<DSA>?, Int32, UnsafePointer<UInt8>?, Int32, UnsafeMutablePointer<Int32>?, UnsafeMutablePointer<UInt>?, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!

    /* If this is non-NULL, it is used to generate DSA keys */
    public var dsa_keygen: (@convention(c) (UnsafeMutablePointer<DSA>?) -> Int32)!

    public init()

    public init(name: UnsafePointer<Int8>!, dsa_do_sign: (@escaping @convention(c) (UnsafePointer<UInt8>?, Int32, UnsafeMutablePointer<DSA>?) -> UnsafeMutablePointer<DSA_SIG>?)!, dsa_sign_setup: (@escaping @convention(c) (UnsafeMutablePointer<DSA>?, OpaquePointer?, UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>?, UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>?) -> Int32)!, dsa_do_verify: (@escaping @convention(c) (UnsafePointer<UInt8>?, Int32, UnsafeMutablePointer<DSA_SIG>?, UnsafeMutablePointer<DSA>?) -> Int32)!, dsa_mod_exp: (@escaping @convention(c) (UnsafeMutablePointer<DSA>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!, bn_mod_exp: (@escaping @convention(c) (UnsafeMutablePointer<DSA>?, UnsafeMutablePointer<BIGNUM>?, UnsafeMutablePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, UnsafePointer<BIGNUM>?, OpaquePointer?, UnsafeMutablePointer<BN_MONT_CTX>?) -> Int32)!, init: (@escaping @convention(c) (UnsafeMutablePointer<DSA>?) -> Int32)!, finish: (@escaping @convention(c) (UnsafeMutablePointer<DSA>?) -> Int32)!, flags: Int32, app_data: UnsafeMutablePointer<Int8>!, dsa_paramgen: (@escaping @convention(c) (UnsafeMutablePointer<DSA>?, Int32, UnsafePointer<UInt8>?, Int32, UnsafeMutablePointer<Int32>?, UnsafeMutablePointer<UInt>?, UnsafeMutablePointer<BN_GENCB>?) -> Int32)!, dsa_keygen: (@escaping @convention(c) (UnsafeMutablePointer<DSA>?) -> Int32)!)
}

public struct dsa_st {

    /*
     * This first variable is used to pick up errors where a DSA is passed
     * instead of of a EVP_PKEY
     */
    public var pad: Int32

    public var version: Int

    public var write_params: Int32

    public var p: UnsafeMutablePointer<BIGNUM>!

    public var q: UnsafeMutablePointer<BIGNUM>! /* == 20 */

    public var g: UnsafeMutablePointer<BIGNUM>!

    public var pub_key: UnsafeMutablePointer<BIGNUM>! /* y public key */

    public var priv_key: UnsafeMutablePointer<BIGNUM>! /* x private key */

    public var kinv: UnsafeMutablePointer<BIGNUM>! /* Signing pre-calc */

    public var r: UnsafeMutablePointer<BIGNUM>! /* Signing pre-calc */

    public var flags: Int32

    /* Normally used to cache montgomery values */
    public var method_mont_p: UnsafeMutablePointer<BN_MONT_CTX>!

    public var references: Int32

    public var ex_data: CRYPTO_EX_DATA

    public var meth: UnsafePointer<DSA_METHOD>!

    /* functional reference if 'meth' is ENGINE-provided */
    public var engine: OpaquePointer!

    public init()

    public init(pad: Int32, version: Int, write_params: Int32, p: UnsafeMutablePointer<BIGNUM>!, q: UnsafeMutablePointer<BIGNUM>!, g: UnsafeMutablePointer<BIGNUM>!, pub_key: UnsafeMutablePointer<BIGNUM>!, priv_key: UnsafeMutablePointer<BIGNUM>!, kinv: UnsafeMutablePointer<BIGNUM>!, r: UnsafeMutablePointer<BIGNUM>!, flags: Int32, method_mont_p: UnsafeMutablePointer<BN_MONT_CTX>!, references: Int32, ex_data: CRYPTO_EX_DATA, meth: UnsafePointer<DSA_METHOD>!, engine: OpaquePointer!)
}

public func DSAparams_dup(_ x: UnsafeMutablePointer<DSA>!) -> UnsafeMutablePointer<DSA>!
public func DSA_SIG_new() -> UnsafeMutablePointer<DSA_SIG>!
public func DSA_SIG_free(_ a: UnsafeMutablePointer<DSA_SIG>!)
public func i2d_DSA_SIG(_ a: UnsafePointer<DSA_SIG>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_DSA_SIG(_ v: UnsafeMutablePointer<UnsafeMutablePointer<DSA_SIG>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<DSA_SIG>!

public func DSA_do_sign(_ dgst: UnsafePointer<UInt8>!, _ dlen: Int32, _ dsa: UnsafeMutablePointer<DSA>!) -> UnsafeMutablePointer<DSA_SIG>!
public func DSA_do_verify(_ dgst: UnsafePointer<UInt8>!, _ dgst_len: Int32, _ sig: UnsafeMutablePointer<DSA_SIG>!, _ dsa: UnsafeMutablePointer<DSA>!) -> Int32

public func DSA_OpenSSL() -> UnsafePointer<DSA_METHOD>!

public func DSA_set_default_method(_: UnsafePointer<DSA_METHOD>!)
public func DSA_get_default_method() -> UnsafePointer<DSA_METHOD>!
public func DSA_set_method(_ dsa: UnsafeMutablePointer<DSA>!, _: UnsafePointer<DSA_METHOD>!) -> Int32

public func DSA_new() -> UnsafeMutablePointer<DSA>!
public func DSA_new_method(_ engine: OpaquePointer!) -> UnsafeMutablePointer<DSA>!
public func DSA_free(_ r: UnsafeMutablePointer<DSA>!)
/* "up" the DSA object's reference count */
public func DSA_up_ref(_ r: UnsafeMutablePointer<DSA>!) -> Int32
public func DSA_size(_: UnsafePointer<DSA>!) -> Int32
/* next 4 return -1 on error */
public func DSA_sign_setup(_ dsa: UnsafeMutablePointer<DSA>!, _ ctx_in: OpaquePointer!, _ kinvp: UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>!, _ rp: UnsafeMutablePointer<UnsafeMutablePointer<BIGNUM>?>!) -> Int32
public func DSA_sign(_ type: Int32, _ dgst: UnsafePointer<UInt8>!, _ dlen: Int32, _ sig: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<UInt32>!, _ dsa: UnsafeMutablePointer<DSA>!) -> Int32
public func DSA_verify(_ type: Int32, _ dgst: UnsafePointer<UInt8>!, _ dgst_len: Int32, _ sigbuf: UnsafePointer<UInt8>!, _ siglen: Int32, _ dsa: UnsafeMutablePointer<DSA>!) -> Int32
public func DSA_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func DSA_set_ex_data(_ d: UnsafeMutablePointer<DSA>!, _ idx: Int32, _ arg: UnsafeMutableRawPointer!) -> Int32
public func DSA_get_ex_data(_ d: UnsafeMutablePointer<DSA>!, _ idx: Int32) -> UnsafeMutableRawPointer!

public func d2i_DSAPublicKey(_ a: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<DSA>!
public func d2i_DSAPrivateKey(_ a: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<DSA>!
public func d2i_DSAparams(_ a: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<DSA>!

/* Deprecated version */

public func DSA_generate_parameters(_ bits: Int32, _ seed: UnsafeMutablePointer<UInt8>!, _ seed_len: Int32, _ counter_ret: UnsafeMutablePointer<Int32>!, _ h_ret: UnsafeMutablePointer<UInt>!, _ callback: (@escaping @convention(c) (Int32, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!, _ cb_arg: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DSA>!
/* !defined(OPENSSL_NO_DEPRECATED) */

/* New version */
public func DSA_generate_parameters_ex(_ dsa: UnsafeMutablePointer<DSA>!, _ bits: Int32, _ seed: UnsafePointer<UInt8>!, _ seed_len: Int32, _ counter_ret: UnsafeMutablePointer<Int32>!, _ h_ret: UnsafeMutablePointer<UInt>!, _ cb: UnsafeMutablePointer<BN_GENCB>!) -> Int32

public func DSA_generate_key(_ a: UnsafeMutablePointer<DSA>!) -> Int32
public func i2d_DSAPublicKey(_ a: UnsafePointer<DSA>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func i2d_DSAPrivateKey(_ a: UnsafePointer<DSA>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func i2d_DSAparams(_ a: UnsafePointer<DSA>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func DSAparams_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafePointer<DSA>!) -> Int32
public func DSA_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafePointer<DSA>!, _ off: Int32) -> Int32

public func DSAparams_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafePointer<DSA>!) -> Int32
public func DSA_print_fp(_ bp: UnsafeMutablePointer<FILE>!, _ x: UnsafePointer<DSA>!, _ off: Int32) -> Int32

public var DSS_prime_checks: Int32 { get }
/*
 * Primality test according to FIPS PUB 186[-1], Appendix 2.1: 50 rounds of
 * Rabin-Miller
 */

/*
 * Convert DSA structure (key or just parameters) into DH structure (be
 * careful to avoid small subgroup attacks when using this!)
 */
public func DSA_dup_DH(_ r: UnsafePointer<DSA>!) -> UnsafeMutablePointer<DH>!

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_DSA_strings()

/* Error codes for the DSA functions. */

/* Function codes. */
public var DSA_F_D2I_DSA_SIG: Int32 { get }
public var DSA_F_DO_DSA_PRINT: Int32 { get }
public var DSA_F_DSAPARAMS_PRINT: Int32 { get }
public var DSA_F_DSAPARAMS_PRINT_FP: Int32 { get }
public var DSA_F_DSA_BUILTIN_PARAMGEN2: Int32 { get }
public var DSA_F_DSA_DO_SIGN: Int32 { get }
public var DSA_F_DSA_DO_VERIFY: Int32 { get }
public var DSA_F_DSA_GENERATE_KEY: Int32 { get }
public var DSA_F_DSA_GENERATE_PARAMETERS_EX: Int32 { get }
public var DSA_F_DSA_NEW_METHOD: Int32 { get }
public var DSA_F_DSA_PARAM_DECODE: Int32 { get }
public var DSA_F_DSA_PRINT_FP: Int32 { get }
public var DSA_F_DSA_PRIV_DECODE: Int32 { get }
public var DSA_F_DSA_PRIV_ENCODE: Int32 { get }
public var DSA_F_DSA_PUB_DECODE: Int32 { get }
public var DSA_F_DSA_PUB_ENCODE: Int32 { get }
public var DSA_F_DSA_SIGN: Int32 { get }
public var DSA_F_DSA_SIGN_SETUP: Int32 { get }
public var DSA_F_DSA_SIG_NEW: Int32 { get }
public var DSA_F_DSA_SIG_PRINT: Int32 { get }
public var DSA_F_DSA_VERIFY: Int32 { get }
public var DSA_F_I2D_DSA_SIG: Int32 { get }
public var DSA_F_OLD_DSA_PRIV_DECODE: Int32 { get }
public var DSA_F_PKEY_DSA_CTRL: Int32 { get }
public var DSA_F_PKEY_DSA_KEYGEN: Int32 { get }
public var DSA_F_SIG_CB: Int32 { get }

/* Reason codes. */
public var DSA_R_BAD_Q_VALUE: Int32 { get }
public var DSA_R_BN_DECODE_ERROR: Int32 { get }
public var DSA_R_BN_ERROR: Int32 { get }
public var DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE: Int32 { get }
public var DSA_R_DECODE_ERROR: Int32 { get }
public var DSA_R_INVALID_DIGEST_TYPE: Int32 { get }
public var DSA_R_INVALID_PARAMETERS: Int32 { get }
public var DSA_R_MISSING_PARAMETERS: Int32 { get }
public var DSA_R_MODULUS_TOO_LARGE: Int32 { get }
public var DSA_R_NEED_NEW_SETUP_VALUES: Int32 { get }
public var DSA_R_NON_FIPS_DSA_METHOD: Int32 { get }
public var DSA_R_NO_PARAMETERS_SET: Int32 { get }
public var DSA_R_PARAMETER_ENCODING_ERROR: Int32 { get }
public var DSA_R_Q_NOT_PRIME: Int32 { get }
/* crypto/sha/sha.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*-
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * ! SHA_LONG has to be at least 32 bits wide. If it's wider, then !
 * ! SHA_LONG_LOG2 has to be defined along.                        !
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

public var SHA_LBLOCK: Int32 { get }
/* SHA treats input data as a
 * contiguous array of 32 bit wide
 * big-endian values. */

public var SHA_DIGEST_LENGTH: Int32 { get }

public struct SHAstate_st {

    public var h0: UInt32

    public var h1: UInt32

    public var h2: UInt32

    public var h3: UInt32

    public var h4: UInt32

    public var Nl: UInt32

    public var Nh: UInt32

    public var data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)

    public var num: UInt32

    public init()

    public init(h0: UInt32, h1: UInt32, h2: UInt32, h3: UInt32, h4: UInt32, Nl: UInt32, Nh: UInt32, data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32), num: UInt32)
}
public typealias SHA_CTX = SHAstate_st

public func SHA_Init(_ c: UnsafeMutablePointer<SHA_CTX>!) -> Int32
public func SHA_Update(_ c: UnsafeMutablePointer<SHA_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func SHA_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<SHA_CTX>!) -> Int32
public func SHA(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func SHA_Transform(_ c: UnsafeMutablePointer<SHA_CTX>!, _ data: UnsafePointer<UInt8>!)

public func SHA1_Init(_ c: UnsafeMutablePointer<SHA_CTX>!) -> Int32
public func SHA1_Update(_ c: UnsafeMutablePointer<SHA_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func SHA1_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<SHA_CTX>!) -> Int32
public func SHA1(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func SHA1_Transform(_ c: UnsafeMutablePointer<SHA_CTX>!, _ data: UnsafePointer<UInt8>!)

/* SHA-256 treats input data as a
 * contiguous array of 32 bit wide
 * big-endian values. */
public var SHA224_DIGEST_LENGTH: Int32 { get }
public var SHA256_DIGEST_LENGTH: Int32 { get }

public struct SHA256state_st {

    public var h: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)

    public var Nl: UInt32

    public var Nh: UInt32

    public var data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)

    public var num: UInt32

    public var md_len: UInt32

    public init()

    public init(h: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32), Nl: UInt32, Nh: UInt32, data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32), num: UInt32, md_len: UInt32)
}
public typealias SHA256_CTX = SHA256state_st

public func SHA224_Init(_ c: UnsafeMutablePointer<SHA256_CTX>!) -> Int32
public func SHA224_Update(_ c: UnsafeMutablePointer<SHA256_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func SHA224_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<SHA256_CTX>!) -> Int32
public func SHA224(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func SHA256_Init(_ c: UnsafeMutablePointer<SHA256_CTX>!) -> Int32
public func SHA256_Update(_ c: UnsafeMutablePointer<SHA256_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func SHA256_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<SHA256_CTX>!) -> Int32
public func SHA256(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func SHA256_Transform(_ c: UnsafeMutablePointer<SHA256_CTX>!, _ data: UnsafePointer<UInt8>!)

public var SHA384_DIGEST_LENGTH: Int32 { get }
public var SHA512_DIGEST_LENGTH: Int32 { get }

/*
 * Unlike 32-bit digest algorithms, SHA-512 *relies* on SHA_LONG64
 * being exactly 64-bit wide. See Implementation Notes in sha512.c
 * for further details.
 */
/*
 * SHA-512 treats input data as a
 * contiguous array of 64 bit
 * wide big-endian values.
 */

public struct SHA512state_st {

    
    public struct __Unnamed_union_u {

        public var d: (UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64)

        public var p: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

        public init(d: (UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64))

        public init(p: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))

        public init()
    }

    public var h: (UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64)

    public var Nl: UInt64

    public var Nh: UInt64

    public var u: SHA512state_st.__Unnamed_union_u

    public var num: UInt32

    public var md_len: UInt32

    public init()

    public init(h: (UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64), Nl: UInt64, Nh: UInt64, u: SHA512state_st.__Unnamed_union_u, num: UInt32, md_len: UInt32)
}
public typealias SHA512_CTX = SHA512state_st

public func SHA384_Init(_ c: UnsafeMutablePointer<SHA512_CTX>!) -> Int32
public func SHA384_Update(_ c: UnsafeMutablePointer<SHA512_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func SHA384_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<SHA512_CTX>!) -> Int32
public func SHA384(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func SHA512_Init(_ c: UnsafeMutablePointer<SHA512_CTX>!) -> Int32
public func SHA512_Update(_ c: UnsafeMutablePointer<SHA512_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func SHA512_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<SHA512_CTX>!) -> Int32
public func SHA512(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func SHA512_Transform(_ c: UnsafeMutablePointer<SHA512_CTX>!, _ data: UnsafePointer<UInt8>!)
/* crypto/x509/x509.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECDH support in OpenSSL originally developed by
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */

/* Under Win32 these are defined in wincrypt.h */

public var X509_FILETYPE_PEM: Int32 { get }
public var X509_FILETYPE_ASN1: Int32 { get }
public var X509_FILETYPE_DEFAULT: Int32 { get }

public var X509v3_KU_DIGITAL_SIGNATURE: Int32 { get }
public var X509v3_KU_NON_REPUDIATION: Int32 { get }
public var X509v3_KU_KEY_ENCIPHERMENT: Int32 { get }
public var X509v3_KU_DATA_ENCIPHERMENT: Int32 { get }
public var X509v3_KU_KEY_AGREEMENT: Int32 { get }
public var X509v3_KU_KEY_CERT_SIGN: Int32 { get }
public var X509v3_KU_CRL_SIGN: Int32 { get }
public var X509v3_KU_ENCIPHER_ONLY: Int32 { get }
public var X509v3_KU_DECIPHER_ONLY: Int32 { get }
public var X509v3_KU_UNDEF: Int32 { get }

public struct X509_objects_st {

    public var nid: Int32

    public var a2i: (@convention(c) () -> Int32)!

    public var i2a: (@convention(c) () -> Int32)!

    public init()

    public init(nid: Int32, a2i: (@escaping @convention(c) () -> Int32)!, i2a: (@escaping @convention(c) () -> Int32)!)
}
public typealias X509_OBJECTS = X509_objects_st

public struct X509_algor_st {

    public var algorithm: UnsafeMutablePointer<ASN1_OBJECT>!

    public var parameter: UnsafeMutablePointer<ASN1_TYPE>!

    public init()

    public init(algorithm: UnsafeMutablePointer<ASN1_OBJECT>!, parameter: UnsafeMutablePointer<ASN1_TYPE>!)
}
/* X509_ALGOR */

public typealias X509_ALGORS = stack_st_X509_ALGOR

public struct X509_val_st {

    public var notBefore: UnsafeMutablePointer<ASN1_TIME>!

    public var notAfter: UnsafeMutablePointer<ASN1_TIME>!

    public init()

    public init(notBefore: UnsafeMutablePointer<ASN1_TIME>!, notAfter: UnsafeMutablePointer<ASN1_TIME>!)
}
public typealias X509_VAL = X509_val_st

public struct X509_pubkey_st {

    public var algor: UnsafeMutablePointer<X509_ALGOR>!

    public var public_key: UnsafeMutablePointer<ASN1_BIT_STRING>!

    public var pkey: UnsafeMutablePointer<EVP_PKEY>!

    public init()

    public init(algor: UnsafeMutablePointer<X509_ALGOR>!, public_key: UnsafeMutablePointer<ASN1_BIT_STRING>!, pkey: UnsafeMutablePointer<EVP_PKEY>!)
}

public struct X509_sig_st {

    public var algor: UnsafeMutablePointer<X509_ALGOR>!

    public var digest: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public init()

    public init(algor: UnsafeMutablePointer<X509_ALGOR>!, digest: UnsafeMutablePointer<ASN1_OCTET_STRING>!)
}
public typealias X509_SIG = X509_sig_st

public struct X509_name_entry_st {

    public var object: UnsafeMutablePointer<ASN1_OBJECT>!

    public var value: UnsafeMutablePointer<ASN1_STRING>!

    public var set: Int32

    public var size: Int32 /* temp variable */

    public init()

    public init(object: UnsafeMutablePointer<ASN1_OBJECT>!, value: UnsafeMutablePointer<ASN1_STRING>!, set: Int32, size: Int32)
}
public typealias X509_NAME_ENTRY = X509_name_entry_st

public struct stack_st_X509_NAME_ENTRY {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* we always keep X509_NAMEs in 2 forms. */
public struct X509_name_st {

    public var entries: UnsafeMutablePointer<stack_st_X509_NAME_ENTRY>!

    public var modified: Int32 /* true if 'bytes' needs to be built */

    
    public var bytes: UnsafeMutablePointer<BUF_MEM>!

    
    /*      unsigned long hash; Keep the hash around for lookups */
    public var canon_enc: UnsafeMutablePointer<UInt8>!

    public var canon_enclen: Int32

    public init()

    public init(entries: UnsafeMutablePointer<stack_st_X509_NAME_ENTRY>!, modified: Int32, bytes: UnsafeMutablePointer<BUF_MEM>!, canon_enc: UnsafeMutablePointer<UInt8>!, canon_enclen: Int32)
}
/* X509_NAME */

public struct stack_st_X509_NAME {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public var X509_EX_V_NETSCAPE_HACK: Int32 { get }
public var X509_EX_V_INIT: Int32 { get }
public struct X509_extension_st {

    public var object: UnsafeMutablePointer<ASN1_OBJECT>!

    public var critical: ASN1_BOOLEAN

    public var value: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public init()

    public init(object: UnsafeMutablePointer<ASN1_OBJECT>!, critical: ASN1_BOOLEAN, value: UnsafeMutablePointer<ASN1_OCTET_STRING>!)
}
public typealias X509_EXTENSION = X509_extension_st

public typealias X509_EXTENSIONS = stack_st_X509_EXTENSION

public struct stack_st_X509_EXTENSION {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* a sequence of these are used */
public struct x509_attributes_st {

    
    /* 0 for a set, 1 for a single item (which is
     * wrong) */
    public struct __Unnamed_union_value {

        public var ptr: UnsafeMutablePointer<Int8>!

        /*
         * 0
         */
        public var set: UnsafeMutablePointer<stack_st_ASN1_TYPE>!

        /*
         * 1
         */
        public var single: UnsafeMutablePointer<ASN1_TYPE>!

        public init(ptr: UnsafeMutablePointer<Int8>!)

        public init(set: UnsafeMutablePointer<stack_st_ASN1_TYPE>!)

        public init(single: UnsafeMutablePointer<ASN1_TYPE>!)

        public init()
    }

    public var object: UnsafeMutablePointer<ASN1_OBJECT>!

    public var single: Int32

    public var value: x509_attributes_st.__Unnamed_union_value

    public init()

    public init(object: UnsafeMutablePointer<ASN1_OBJECT>!, single: Int32, value: x509_attributes_st.__Unnamed_union_value)
}
public typealias X509_ATTRIBUTE = x509_attributes_st

public struct stack_st_X509_ATTRIBUTE {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct X509_req_info_st {

    public var enc: ASN1_ENCODING

    public var version: UnsafeMutablePointer<ASN1_INTEGER>!

    public var subject: UnsafeMutablePointer<X509_NAME>!

    public var pubkey: UnsafeMutablePointer<X509_PUBKEY>!

    /*  d=2 hl=2 l=  0 cons: cont: 00 */
    public var attributes: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>! /* [ 0 ] */

    public init()

    public init(enc: ASN1_ENCODING, version: UnsafeMutablePointer<ASN1_INTEGER>!, subject: UnsafeMutablePointer<X509_NAME>!, pubkey: UnsafeMutablePointer<X509_PUBKEY>!, attributes: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!)
}
public typealias X509_REQ_INFO = X509_req_info_st

public struct X509_req_st {

    public var req_info: UnsafeMutablePointer<X509_REQ_INFO>!

    public var sig_alg: UnsafeMutablePointer<X509_ALGOR>!

    public var signature: UnsafeMutablePointer<ASN1_BIT_STRING>!

    public var references: Int32

    public init()

    public init(req_info: UnsafeMutablePointer<X509_REQ_INFO>!, sig_alg: UnsafeMutablePointer<X509_ALGOR>!, signature: UnsafeMutablePointer<ASN1_BIT_STRING>!, references: Int32)
}
public typealias X509_REQ = X509_req_st

public struct x509_cinf_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* [ 0 ] default of v1 */

    public var serialNumber: UnsafeMutablePointer<ASN1_INTEGER>!

    public var signature: UnsafeMutablePointer<X509_ALGOR>!

    public var issuer: UnsafeMutablePointer<X509_NAME>!

    public var validity: UnsafeMutablePointer<X509_VAL>!

    public var subject: UnsafeMutablePointer<X509_NAME>!

    public var key: UnsafeMutablePointer<X509_PUBKEY>!

    public var issuerUID: UnsafeMutablePointer<ASN1_BIT_STRING>! /* [ 1 ] optional in v2 */

    public var subjectUID: UnsafeMutablePointer<ASN1_BIT_STRING>! /* [ 2 ] optional in v2 */

    public var extensions: UnsafeMutablePointer<stack_st_X509_EXTENSION>! /* [ 3 ] optional in v3 */

    public var enc: ASN1_ENCODING

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, serialNumber: UnsafeMutablePointer<ASN1_INTEGER>!, signature: UnsafeMutablePointer<X509_ALGOR>!, issuer: UnsafeMutablePointer<X509_NAME>!, validity: UnsafeMutablePointer<X509_VAL>!, subject: UnsafeMutablePointer<X509_NAME>!, key: UnsafeMutablePointer<X509_PUBKEY>!, issuerUID: UnsafeMutablePointer<ASN1_BIT_STRING>!, subjectUID: UnsafeMutablePointer<ASN1_BIT_STRING>!, extensions: UnsafeMutablePointer<stack_st_X509_EXTENSION>!, enc: ASN1_ENCODING)
}
public typealias X509_CINF = x509_cinf_st

/*
 * This stuff is certificate "auxiliary info" it contains details which are
 * useful in certificate stores and databases. When used this is tagged onto
 * the end of the certificate itself
 */

public struct x509_cert_aux_st {

    public var trust: UnsafeMutablePointer<stack_st_ASN1_OBJECT>! /* trusted uses */

    public var reject: UnsafeMutablePointer<stack_st_ASN1_OBJECT>! /* rejected uses */

    public var alias: UnsafeMutablePointer<ASN1_UTF8STRING>! /* "friendly name" */

    public var keyid: UnsafeMutablePointer<ASN1_OCTET_STRING>! /* key id of private key */

    public var other: UnsafeMutablePointer<stack_st_X509_ALGOR>! /* other unspecified info */

    public init()

    public init(trust: UnsafeMutablePointer<stack_st_ASN1_OBJECT>!, reject: UnsafeMutablePointer<stack_st_ASN1_OBJECT>!, alias: UnsafeMutablePointer<ASN1_UTF8STRING>!, keyid: UnsafeMutablePointer<ASN1_OCTET_STRING>!, other: UnsafeMutablePointer<stack_st_X509_ALGOR>!)
}
public typealias X509_CERT_AUX = x509_cert_aux_st

public struct x509_st {

    public var cert_info: UnsafeMutablePointer<X509_CINF>!

    public var sig_alg: UnsafeMutablePointer<X509_ALGOR>!

    public var signature: UnsafeMutablePointer<ASN1_BIT_STRING>!

    public var valid: Int32

    public var references: Int32

    public var name: UnsafeMutablePointer<Int8>!

    public var ex_data: CRYPTO_EX_DATA

    /* These contain copies of various extension values */
    public var ex_pathlen: Int

    public var ex_pcpathlen: Int

    public var ex_flags: UInt

    public var ex_kusage: UInt

    public var ex_xkusage: UInt

    public var ex_nscert: UInt

    public var skid: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public var akid: OpaquePointer!

    public var policy_cache: OpaquePointer!

    public var crldp: OpaquePointer!

    public var altname: OpaquePointer!

    public var nc: OpaquePointer!

    
    public var sha1_hash: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    
    public var aux: UnsafeMutablePointer<X509_CERT_AUX>!

    public init()
}
/* X509 */

public struct stack_st_X509 {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* This is used for a table of trust checking functions */

public struct x509_trust_st {

    public var trust: Int32

    public var flags: Int32

    public var check_trust: (@convention(c) (UnsafeMutablePointer<x509_trust_st>?, UnsafeMutablePointer<X509>?, Int32) -> Int32)!

    public var name: UnsafeMutablePointer<Int8>!

    public var arg1: Int32

    public var arg2: UnsafeMutableRawPointer!

    public init()

    public init(trust: Int32, flags: Int32, check_trust: (@escaping @convention(c) (UnsafeMutablePointer<x509_trust_st>?, UnsafeMutablePointer<X509>?, Int32) -> Int32)!, name: UnsafeMutablePointer<Int8>!, arg1: Int32, arg2: UnsafeMutableRawPointer!)
}
public typealias X509_TRUST = x509_trust_st

public struct stack_st_X509_TRUST {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct x509_cert_pair_st {

    public var forward: UnsafeMutablePointer<X509>!

    public var reverse: UnsafeMutablePointer<X509>!

    public init()

    public init(forward: UnsafeMutablePointer<X509>!, reverse: UnsafeMutablePointer<X509>!)
}
public typealias X509_CERT_PAIR = x509_cert_pair_st

/* standard trust ids */

public var X509_TRUST_DEFAULT: Int32 { get } /* Only valid in purpose settings */

public var X509_TRUST_COMPAT: Int32 { get }
public var X509_TRUST_SSL_CLIENT: Int32 { get }
public var X509_TRUST_SSL_SERVER: Int32 { get }
public var X509_TRUST_EMAIL: Int32 { get }
public var X509_TRUST_OBJECT_SIGN: Int32 { get }
public var X509_TRUST_OCSP_SIGN: Int32 { get }
public var X509_TRUST_OCSP_REQUEST: Int32 { get }
public var X509_TRUST_TSA: Int32 { get }

/* Keep these up to date! */
public var X509_TRUST_MIN: Int32 { get }
public var X509_TRUST_MAX: Int32 { get }

/* trust_flags values */
public var X509_TRUST_DYNAMIC: Int32 { get }
public var X509_TRUST_DYNAMIC_NAME: Int32 { get }

/* check_trust return codes */

public var X509_TRUST_TRUSTED: Int32 { get }
public var X509_TRUST_REJECTED: Int32 { get }
public var X509_TRUST_UNTRUSTED: Int32 { get }

/* Flags for X509_print_ex() */

public var X509_FLAG_COMPAT: Int32 { get }
public var X509_FLAG_NO_HEADER: Int { get }
public var X509_FLAG_NO_VERSION: Int { get }
public var X509_FLAG_NO_SERIAL: Int { get }
public var X509_FLAG_NO_SIGNAME: Int { get }
public var X509_FLAG_NO_ISSUER: Int { get }
public var X509_FLAG_NO_VALIDITY: Int { get }
public var X509_FLAG_NO_SUBJECT: Int { get }
public var X509_FLAG_NO_PUBKEY: Int { get }
public var X509_FLAG_NO_EXTENSIONS: Int { get }
public var X509_FLAG_NO_SIGDUMP: Int { get }
public var X509_FLAG_NO_AUX: Int { get }
public var X509_FLAG_NO_ATTRIBUTES: Int { get }
public var X509_FLAG_NO_IDS: Int { get }

/* Flags specific to X509_NAME_print_ex() */

/* The field separator information */

public var XN_FLAG_SEP_MASK: Int32 { get }

public var XN_FLAG_COMPAT: Int32 { get } /* Traditional SSLeay: use old
                                   * X509_NAME_print */

public var XN_FLAG_SEP_COMMA_PLUS: Int32 { get } /* RFC2253 ,+ */
public var XN_FLAG_SEP_CPLUS_SPC: Int32 { get } /* ,+ spaced: more readable */
public var XN_FLAG_SEP_SPLUS_SPC: Int32 { get } /* ;+ spaced */
public var XN_FLAG_SEP_MULTILINE: Int32 { get } /* One line per field */

public var XN_FLAG_DN_REV: Int32 { get } /* Reverse DN order */

/* How the field name is shown */

public var XN_FLAG_FN_MASK: Int32 { get }

public var XN_FLAG_FN_SN: Int32 { get } /* Object short name */
public var XN_FLAG_FN_LN: Int32 { get } /* Object long name */
public var XN_FLAG_FN_OID: Int32 { get } /* Always use OIDs */
public var XN_FLAG_FN_NONE: Int32 { get } /* No field names */

public var XN_FLAG_SPC_EQ: Int32 { get } /* Put spaces round '=' */

/*
 * This determines if we dump fields we don't recognise: RFC2253 requires
 * this.
 */

public var XN_FLAG_DUMP_UNKNOWN_FIELDS: Int32 { get }

public var XN_FLAG_FN_ALIGN: Int32 { get } /* Align field names to 20
                                           * characters */

/* Complete set of RFC2253 flags */

/* readable oneline form */

/* readable multiline form */

public struct x509_revoked_st {

    public var serialNumber: UnsafeMutablePointer<ASN1_INTEGER>!

    public var revocationDate: UnsafeMutablePointer<ASN1_TIME>!

    public var extensions: UnsafeMutablePointer<stack_st_X509_EXTENSION>! /* optional */

    /* Set up if indirect CRL */
    public var issuer: OpaquePointer!

    /* Revocation reason */
    public var reason: Int32

    public var sequence: Int32 /* load sequence */

    public init()

    public init(serialNumber: UnsafeMutablePointer<ASN1_INTEGER>!, revocationDate: UnsafeMutablePointer<ASN1_TIME>!, extensions: UnsafeMutablePointer<stack_st_X509_EXTENSION>!, issuer: OpaquePointer!, reason: Int32, sequence: Int32)
}

public struct stack_st_X509_REVOKED {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct X509_crl_info_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>!

    public var sig_alg: UnsafeMutablePointer<X509_ALGOR>!

    public var issuer: UnsafeMutablePointer<X509_NAME>!

    public var lastUpdate: UnsafeMutablePointer<ASN1_TIME>!

    public var nextUpdate: UnsafeMutablePointer<ASN1_TIME>!

    public var revoked: UnsafeMutablePointer<stack_st_X509_REVOKED>!

    public var extensions: UnsafeMutablePointer<stack_st_X509_EXTENSION>! /* [0] */

    public var enc: ASN1_ENCODING

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, sig_alg: UnsafeMutablePointer<X509_ALGOR>!, issuer: UnsafeMutablePointer<X509_NAME>!, lastUpdate: UnsafeMutablePointer<ASN1_TIME>!, nextUpdate: UnsafeMutablePointer<ASN1_TIME>!, revoked: UnsafeMutablePointer<stack_st_X509_REVOKED>!, extensions: UnsafeMutablePointer<stack_st_X509_EXTENSION>!, enc: ASN1_ENCODING)
}
public typealias X509_CRL_INFO = X509_crl_info_st

public struct X509_crl_st {

    /* actual signature */
    public var crl: UnsafeMutablePointer<X509_CRL_INFO>!

    public var sig_alg: UnsafeMutablePointer<X509_ALGOR>!

    public var signature: UnsafeMutablePointer<ASN1_BIT_STRING>!

    public var references: Int32

    public var flags: Int32

    /* Copies of various extensions */
    public var akid: OpaquePointer!

    public var idp: OpaquePointer!

    /* Convenient breakdown of IDP */
    public var idp_flags: Int32

    public var idp_reasons: Int32

    /* CRL and base CRL numbers for delta processing */
    public var crl_number: UnsafeMutablePointer<ASN1_INTEGER>!

    public var base_crl_number: UnsafeMutablePointer<ASN1_INTEGER>!

    
    public var sha1_hash: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    
    public var issuers: OpaquePointer!

    public var meth: OpaquePointer!

    public var meth_data: UnsafeMutableRawPointer!

    public init()
}
/* X509_CRL */

public struct stack_st_X509_CRL {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct private_key_st {

    public var version: Int32

    /* The PKCS#8 data types */
    public var enc_algor: UnsafeMutablePointer<X509_ALGOR>!

    public var enc_pkey: UnsafeMutablePointer<ASN1_OCTET_STRING>! /* encrypted pub key */

    /* When decrypted, the following will not be NULL */
    public var dec_pkey: UnsafeMutablePointer<EVP_PKEY>!

    /* used to encrypt and decrypt */
    public var key_length: Int32

    public var key_data: UnsafeMutablePointer<Int8>!

    public var key_free: Int32 /* true if we should auto free key_data */

    /* expanded version of 'enc_algor' */
    public var cipher: EVP_CIPHER_INFO

    public var references: Int32

    public init()

    public init(version: Int32, enc_algor: UnsafeMutablePointer<X509_ALGOR>!, enc_pkey: UnsafeMutablePointer<ASN1_OCTET_STRING>!, dec_pkey: UnsafeMutablePointer<EVP_PKEY>!, key_length: Int32, key_data: UnsafeMutablePointer<Int8>!, key_free: Int32, cipher: EVP_CIPHER_INFO, references: Int32)
}
public typealias X509_PKEY = private_key_st

public struct X509_info_st {

    public var x509: UnsafeMutablePointer<X509>!

    public var crl: UnsafeMutablePointer<X509_CRL>!

    public var x_pkey: UnsafeMutablePointer<X509_PKEY>!

    public var enc_cipher: EVP_CIPHER_INFO

    public var enc_len: Int32

    public var enc_data: UnsafeMutablePointer<Int8>!

    public var references: Int32

    public init()

    public init(x509: UnsafeMutablePointer<X509>!, crl: UnsafeMutablePointer<X509_CRL>!, x_pkey: UnsafeMutablePointer<X509_PKEY>!, enc_cipher: EVP_CIPHER_INFO, enc_len: Int32, enc_data: UnsafeMutablePointer<Int8>!, references: Int32)
}
public typealias X509_INFO = X509_info_st

public struct stack_st_X509_INFO {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/*
 * The next 2 structures and their 8 routines were sent to me by Pat Richard
 * <patr@x509.com> and are used to manipulate Netscapes spki structures -
 * useful if you are writing a CA web page
 */
public struct Netscape_spkac_st {

    public var pubkey: UnsafeMutablePointer<X509_PUBKEY>!

    public var challenge: UnsafeMutablePointer<ASN1_IA5STRING>! /* challenge sent in atlas >= PR2 */

    public init()

    public init(pubkey: UnsafeMutablePointer<X509_PUBKEY>!, challenge: UnsafeMutablePointer<ASN1_IA5STRING>!)
}
public typealias NETSCAPE_SPKAC = Netscape_spkac_st

public struct Netscape_spki_st {

    public var spkac: UnsafeMutablePointer<NETSCAPE_SPKAC>! /* signed public key and challenge */

    public var sig_algor: UnsafeMutablePointer<X509_ALGOR>!

    public var signature: UnsafeMutablePointer<ASN1_BIT_STRING>!

    public init()

    public init(spkac: UnsafeMutablePointer<NETSCAPE_SPKAC>!, sig_algor: UnsafeMutablePointer<X509_ALGOR>!, signature: UnsafeMutablePointer<ASN1_BIT_STRING>!)
}
public typealias NETSCAPE_SPKI = Netscape_spki_st

/* Netscape certificate sequence structure */
public struct Netscape_certificate_sequence {

    public var type: UnsafeMutablePointer<ASN1_OBJECT>!

    public var certs: UnsafeMutablePointer<stack_st_X509>!

    public init()

    public init(type: UnsafeMutablePointer<ASN1_OBJECT>!, certs: UnsafeMutablePointer<stack_st_X509>!)
}
public typealias NETSCAPE_CERT_SEQUENCE = Netscape_certificate_sequence

/*- Unused (and iv length is wrong)
typedef struct CBCParameter_st
        {
        unsigned char iv[8];
        } CBC_PARAM;
*/

/* Password based encryption structure */

public struct PBEPARAM_st {

    public var salt: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public var iter: UnsafeMutablePointer<ASN1_INTEGER>!

    public init()

    public init(salt: UnsafeMutablePointer<ASN1_OCTET_STRING>!, iter: UnsafeMutablePointer<ASN1_INTEGER>!)
}
public typealias PBEPARAM = PBEPARAM_st

/* Password based encryption V2 structures */

public struct PBE2PARAM_st {

    public var keyfunc: UnsafeMutablePointer<X509_ALGOR>!

    public var encryption: UnsafeMutablePointer<X509_ALGOR>!

    public init()

    public init(keyfunc: UnsafeMutablePointer<X509_ALGOR>!, encryption: UnsafeMutablePointer<X509_ALGOR>!)
}
public typealias PBE2PARAM = PBE2PARAM_st

public struct PBKDF2PARAM_st {

    /* Usually OCTET STRING but could be anything */
    public var salt: UnsafeMutablePointer<ASN1_TYPE>!

    public var iter: UnsafeMutablePointer<ASN1_INTEGER>!

    public var keylength: UnsafeMutablePointer<ASN1_INTEGER>!

    public var prf: UnsafeMutablePointer<X509_ALGOR>!

    public init()

    public init(salt: UnsafeMutablePointer<ASN1_TYPE>!, iter: UnsafeMutablePointer<ASN1_INTEGER>!, keylength: UnsafeMutablePointer<ASN1_INTEGER>!, prf: UnsafeMutablePointer<X509_ALGOR>!)
}
public typealias PBKDF2PARAM = PBKDF2PARAM_st

/* PKCS#8 private key info structure */

public struct pkcs8_priv_key_info_st {

    /* Flag for various broken formats */
    public var broken: Int32

    
    public var version: UnsafeMutablePointer<ASN1_INTEGER>!

    public var pkeyalg: UnsafeMutablePointer<X509_ALGOR>!

    /* Should be OCTET STRING but some are broken */
    public var pkey: UnsafeMutablePointer<ASN1_TYPE>!

    public var attributes: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!

    public init()

    public init(broken: Int32, version: UnsafeMutablePointer<ASN1_INTEGER>!, pkeyalg: UnsafeMutablePointer<X509_ALGOR>!, pkey: UnsafeMutablePointer<ASN1_TYPE>!, attributes: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!)
}
public var PKCS8_OK: Int32 { get }
public var PKCS8_NO_OCTET: Int32 { get }
public var PKCS8_EMBEDDED_PARAM: Int32 { get }
public var PKCS8_NS_DB: Int32 { get }
public var PKCS8_NEG_PRIVKEY: Int32 { get }
/* crypto/x509/x509_vfy.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*
 * openssl/x509.h ends up #include-ing this file at about the only
 * appropriate moment.
 */

/* Outer object */

public struct x509_file_st {

    public var num_paths: Int32 /* number of paths to files or directories */

    public var num_alloced: Int32

    public var paths: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>! /* the list of paths or directories */

    public var path_type: UnsafeMutablePointer<Int32>!

    public init()

    public init(num_paths: Int32, num_alloced: Int32, paths: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, path_type: UnsafeMutablePointer<Int32>!)
}
public typealias X509_CERT_FILE_CTX = x509_file_st

/*******************************/
/*-
SSL_CTX -> X509_STORE
                -> X509_LOOKUP
                        ->X509_LOOKUP_METHOD
                -> X509_LOOKUP
                        ->X509_LOOKUP_METHOD

SSL     -> X509_STORE_CTX
                ->X509_STORE

The X509_STORE holds the tables etc for verification stuff.
A X509_STORE_CTX is used while validating a single certificate.
The X509_STORE has X509_LOOKUPs for looking up certs.
The X509_STORE then calls a function to actually verify the
certificate chain.
*/

public var X509_LU_RETRY: Int32 { get }
public var X509_LU_FAIL: Int32 { get }
public var X509_LU_X509: Int32 { get }
public var X509_LU_CRL: Int32 { get }
public var X509_LU_PKEY: Int32 { get }

public struct x509_object_st {

    /* one of the above types */
    
    public struct __Unnamed_union_data {

        public var ptr: UnsafeMutablePointer<Int8>!

        public var x509: UnsafeMutablePointer<X509>!

        public var crl: UnsafeMutablePointer<X509_CRL>!

        public var pkey: UnsafeMutablePointer<EVP_PKEY>!

        public init(ptr: UnsafeMutablePointer<Int8>!)

        public init(x509: UnsafeMutablePointer<X509>!)

        public init(crl: UnsafeMutablePointer<X509_CRL>!)

        public init(pkey: UnsafeMutablePointer<EVP_PKEY>!)

        public init()
    }

    public var type: Int32

    public var data: x509_object_st.__Unnamed_union_data

    public init()

    public init(type: Int32, data: x509_object_st.__Unnamed_union_data)
}
public typealias X509_OBJECT = x509_object_st

public typealias X509_LOOKUP = x509_lookup_st

public struct stack_st_X509_LOOKUP {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct stack_st_X509_OBJECT {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* This is a static that defines the function interface */
public struct x509_lookup_method_st {

    public var name: UnsafePointer<Int8>!

    public var new_item: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Int32)!

    public var free: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Swift.Void)!

    public var `init`: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Int32)!

    public var shutdown: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Int32)!

    public var ctrl: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafePointer<Int8>?, Int, UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>?) -> Int32)!

    public var get_by_subject: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<X509_NAME>?, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!

    public var get_by_issuer_serial: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<X509_NAME>?, UnsafeMutablePointer<ASN1_INTEGER>?, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!

    public var get_by_fingerprint: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<UInt8>?, Int32, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!

    public var get_by_alias: (@convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<Int8>?, Int32, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!

    public init()

    public init(name: UnsafePointer<Int8>!, new_item: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Int32)!, free: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Swift.Void)!, init: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Int32)!, shutdown: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?) -> Int32)!, ctrl: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafePointer<Int8>?, Int, UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>?) -> Int32)!, get_by_subject: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<X509_NAME>?, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!, get_by_issuer_serial: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<X509_NAME>?, UnsafeMutablePointer<ASN1_INTEGER>?, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!, get_by_fingerprint: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<UInt8>?, Int32, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!, get_by_alias: (@escaping @convention(c) (UnsafeMutablePointer<X509_LOOKUP>?, Int32, UnsafeMutablePointer<Int8>?, Int32, UnsafeMutablePointer<X509_OBJECT>?) -> Int32)!)
}
public typealias X509_LOOKUP_METHOD = x509_lookup_method_st

/*
 * This structure hold all parameters associated with a verify operation by
 * including an X509_VERIFY_PARAM structure in related structures the
 * parameters used can be customized
 */

public struct X509_VERIFY_PARAM_st {

    public var name: UnsafeMutablePointer<Int8>!

    public var check_time: time_t /* Time to use */

    public var inh_flags: UInt /* Inheritance flags */

    public var flags: UInt /* Various verify flags */

    public var purpose: Int32 /* purpose to check untrusted certificates */

    public var trust: Int32 /* trust setting to check */

    public var depth: Int32 /* Verify depth */

    public var policies: UnsafeMutablePointer<stack_st_ASN1_OBJECT>! /* Permissible policies */

    public var id: OpaquePointer! /* opaque ID data */

    public init()

    public init(name: UnsafeMutablePointer<Int8>!, check_time: time_t, inh_flags: UInt, flags: UInt, purpose: Int32, trust: Int32, depth: Int32, policies: UnsafeMutablePointer<stack_st_ASN1_OBJECT>!, id: OpaquePointer!)
}
public typealias X509_VERIFY_PARAM = X509_VERIFY_PARAM_st

public struct stack_st_X509_VERIFY_PARAM {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/*
 * This is used to hold everything.  It is used for all certificate
 * validation.  Once we have a certificate chain, the 'verify' function is
 * then called to actually check the cert chain.
 */
public struct x509_store_st {

    /* The following is a cache of trusted certs */
    public var cache: Int32 /* if true, stash any hits */

    public var objs: UnsafeMutablePointer<stack_st_X509_OBJECT>! /* Cache of all objects */

    /* These are external lookup methods */
    public var get_cert_methods: UnsafeMutablePointer<stack_st_X509_LOOKUP>!

    public var param: UnsafeMutablePointer<X509_VERIFY_PARAM>!

    /* Callbacks for various operations */
    /* called to verify a certificate */
    public var verify: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* error callback */
    public var verify_cb: (@convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* get issuers cert from ctx */
    public var get_issuer: (@convention(c) (UnsafeMutablePointer<UnsafeMutablePointer<X509>?>?, UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?) -> Int32)!

    /* check issued */
    public var check_issued: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?, UnsafeMutablePointer<X509>?) -> Int32)!

    /* Check revocation status of chain */
    public var check_revocation: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* retrieve CRL */
    public var get_crl: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>?, UnsafeMutablePointer<X509>?) -> Int32)!

    /* Check CRL validity */
    public var check_crl: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?) -> Int32)!

    /* Check certificate against CRL */
    public var cert_crl: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?, UnsafeMutablePointer<X509>?) -> Int32)!

    public var lookup_certs: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509>?)!

    public var lookup_crls: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509_CRL>?)!

    public var cleanup: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    public var ex_data: CRYPTO_EX_DATA

    public var references: Int32

    public init()

    public init(cache: Int32, objs: UnsafeMutablePointer<stack_st_X509_OBJECT>!, get_cert_methods: UnsafeMutablePointer<stack_st_X509_LOOKUP>!, param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, verify: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, verify_cb: (@escaping @convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, get_issuer: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutablePointer<X509>?>?, UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?) -> Int32)!, check_issued: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?, UnsafeMutablePointer<X509>?) -> Int32)!, check_revocation: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, get_crl: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>?, UnsafeMutablePointer<X509>?) -> Int32)!, check_crl: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?) -> Int32)!, cert_crl: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?, UnsafeMutablePointer<X509>?) -> Int32)!, lookup_certs: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509>?)!, lookup_crls: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509_CRL>?)!, cleanup: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, ex_data: CRYPTO_EX_DATA, references: Int32)
}
/* X509_STORE */

public func X509_STORE_set_depth(_ store: UnsafeMutablePointer<X509_STORE>!, _ depth: Int32) -> Int32

/* This is the functions plus an instance of the local variables. */
public struct x509_lookup_st {

    public var `init`: Int32 /* have we been started */

    public var skip: Int32 /* don't use us. */

    public var method: UnsafeMutablePointer<X509_LOOKUP_METHOD>! /* the functions */

    public var method_data: UnsafeMutablePointer<Int8>! /* method data */

    public var store_ctx: UnsafeMutablePointer<X509_STORE>! /* who owns us */

    public init()

    public init(init: Int32, skip: Int32, method: UnsafeMutablePointer<X509_LOOKUP_METHOD>!, method_data: UnsafeMutablePointer<Int8>!, store_ctx: UnsafeMutablePointer<X509_STORE>!)
}
/* X509_LOOKUP */

/*
 * This is a used when verifying cert chains.  Since the gathering of the
 * cert chain can take some time (and have to be 'retried', this needs to be
 * kept and passed around.
 */
public struct x509_store_ctx_st {

    public var ctx: UnsafeMutablePointer<X509_STORE>! /* X509_STORE_CTX */

    /* used when looking up certs */
    public var current_method: Int32

    /* The following are set by the caller */
    /* The cert to check */
    public var cert: UnsafeMutablePointer<X509>!

    /* chain of X509s - untrusted - passed in */
    public var untrusted: UnsafeMutablePointer<stack_st_X509>!

    /* set of CRLs passed in */
    public var crls: UnsafeMutablePointer<stack_st_X509_CRL>!

    public var param: UnsafeMutablePointer<X509_VERIFY_PARAM>!

    /* Other info for use with get_issuer() */
    public var other_ctx: UnsafeMutableRawPointer!

    /* Callbacks for various operations */
    /* called to verify a certificate */
    public var verify: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* error callback */
    public var verify_cb: (@convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* get issuers cert from ctx */
    public var get_issuer: (@convention(c) (UnsafeMutablePointer<UnsafeMutablePointer<X509>?>?, UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?) -> Int32)!

    /* check issued */
    public var check_issued: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?, UnsafeMutablePointer<X509>?) -> Int32)!

    /* Check revocation status of chain */
    public var check_revocation: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* retrieve CRL */
    public var get_crl: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>?, UnsafeMutablePointer<X509>?) -> Int32)!

    /* Check CRL validity */
    public var check_crl: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?) -> Int32)!

    /* Check certificate against CRL */
    public var cert_crl: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?, UnsafeMutablePointer<X509>?) -> Int32)!

    public var check_policy: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    public var lookup_certs: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509>?)!

    public var lookup_crls: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509_CRL>?)!

    public var cleanup: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* The following is built up */
    /* if 0, rebuild chain */
    public var valid: Int32

    /* index of last untrusted cert */
    public var last_untrusted: Int32

    /* chain of X509s - built up and trusted */
    public var chain: UnsafeMutablePointer<stack_st_X509>!

    /* Valid policy tree */
    public var tree: OpaquePointer!

    /* Require explicit policy value */
    public var explicit_policy: Int32

    /* When something goes wrong, this is why */
    public var error_depth: Int32

    public var error: Int32

    public var current_cert: UnsafeMutablePointer<X509>!

    /* cert currently being tested as valid issuer */
    public var current_issuer: UnsafeMutablePointer<X509>!

    /* current CRL */
    public var current_crl: UnsafeMutablePointer<X509_CRL>!

    /* score of current CRL */
    public var current_crl_score: Int32

    /* Reason mask */
    public var current_reasons: UInt32

    /* For CRL path validation: parent context */
    public var parent: UnsafeMutablePointer<X509_STORE_CTX>!

    public var ex_data: CRYPTO_EX_DATA

    public init()

    public init(ctx: UnsafeMutablePointer<X509_STORE>!, current_method: Int32, cert: UnsafeMutablePointer<X509>!, untrusted: UnsafeMutablePointer<stack_st_X509>!, crls: UnsafeMutablePointer<stack_st_X509_CRL>!, param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, other_ctx: UnsafeMutableRawPointer!, verify: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, verify_cb: (@escaping @convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, get_issuer: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutablePointer<X509>?>?, UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?) -> Int32)!, check_issued: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509>?, UnsafeMutablePointer<X509>?) -> Int32)!, check_revocation: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, get_crl: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>?, UnsafeMutablePointer<X509>?) -> Int32)!, check_crl: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?) -> Int32)!, cert_crl: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_CRL>?, UnsafeMutablePointer<X509>?) -> Int32)!, check_policy: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, lookup_certs: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509>?)!, lookup_crls: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509_CRL>?)!, cleanup: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!, valid: Int32, last_untrusted: Int32, chain: UnsafeMutablePointer<stack_st_X509>!, tree: OpaquePointer!, explicit_policy: Int32, error_depth: Int32, error: Int32, current_cert: UnsafeMutablePointer<X509>!, current_issuer: UnsafeMutablePointer<X509>!, current_crl: UnsafeMutablePointer<X509_CRL>!, current_crl_score: Int32, current_reasons: UInt32, parent: UnsafeMutablePointer<X509_STORE_CTX>!, ex_data: CRYPTO_EX_DATA)
}
/* X509_STORE_CTX */

public func X509_STORE_CTX_set_depth(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ depth: Int32)

public var X509_L_FILE_LOAD: Int32 { get }
public var X509_L_ADD_DIR: Int32 { get }

public var X509_V_OK: Int32 { get }
public var X509_V_ERR_UNSPECIFIED: Int32 { get }

public var X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: Int32 { get }
public var X509_V_ERR_UNABLE_TO_GET_CRL: Int32 { get }
public var X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: Int32 { get }
public var X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: Int32 { get }
public var X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: Int32 { get }
public var X509_V_ERR_CERT_SIGNATURE_FAILURE: Int32 { get }
public var X509_V_ERR_CRL_SIGNATURE_FAILURE: Int32 { get }
public var X509_V_ERR_CERT_NOT_YET_VALID: Int32 { get }
public var X509_V_ERR_CERT_HAS_EXPIRED: Int32 { get }
public var X509_V_ERR_CRL_NOT_YET_VALID: Int32 { get }
public var X509_V_ERR_CRL_HAS_EXPIRED: Int32 { get }
public var X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: Int32 { get }
public var X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: Int32 { get }
public var X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: Int32 { get }
public var X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: Int32 { get }
public var X509_V_ERR_OUT_OF_MEM: Int32 { get }
public var X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: Int32 { get }
public var X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: Int32 { get }
public var X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: Int32 { get }
public var X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: Int32 { get }
public var X509_V_ERR_CERT_CHAIN_TOO_LONG: Int32 { get }
public var X509_V_ERR_CERT_REVOKED: Int32 { get }
public var X509_V_ERR_INVALID_CA: Int32 { get }
public var X509_V_ERR_PATH_LENGTH_EXCEEDED: Int32 { get }
public var X509_V_ERR_INVALID_PURPOSE: Int32 { get }
public var X509_V_ERR_CERT_UNTRUSTED: Int32 { get }
public var X509_V_ERR_CERT_REJECTED: Int32 { get }
/* These are 'informational' when looking for issuer cert */
public var X509_V_ERR_SUBJECT_ISSUER_MISMATCH: Int32 { get }
public var X509_V_ERR_AKID_SKID_MISMATCH: Int32 { get }
public var X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: Int32 { get }
public var X509_V_ERR_KEYUSAGE_NO_CERTSIGN: Int32 { get }

public var X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER: Int32 { get }
public var X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION: Int32 { get }
public var X509_V_ERR_KEYUSAGE_NO_CRL_SIGN: Int32 { get }
public var X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION: Int32 { get }
public var X509_V_ERR_INVALID_NON_CA: Int32 { get }
public var X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED: Int32 { get }
public var X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE: Int32 { get }
public var X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED: Int32 { get }

public var X509_V_ERR_INVALID_EXTENSION: Int32 { get }
public var X509_V_ERR_INVALID_POLICY_EXTENSION: Int32 { get }
public var X509_V_ERR_NO_EXPLICIT_POLICY: Int32 { get }
public var X509_V_ERR_DIFFERENT_CRL_SCOPE: Int32 { get }
public var X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE: Int32 { get }

public var X509_V_ERR_UNNESTED_RESOURCE: Int32 { get }

public var X509_V_ERR_PERMITTED_VIOLATION: Int32 { get }
public var X509_V_ERR_EXCLUDED_VIOLATION: Int32 { get }
public var X509_V_ERR_SUBTREE_MINMAX: Int32 { get }
public var X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE: Int32 { get }
public var X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX: Int32 { get }
public var X509_V_ERR_UNSUPPORTED_NAME_SYNTAX: Int32 { get }
public var X509_V_ERR_CRL_PATH_VALIDATION_ERROR: Int32 { get }

/* Suite B mode algorithm violation */
public var X509_V_ERR_SUITE_B_INVALID_VERSION: Int32 { get }
public var X509_V_ERR_SUITE_B_INVALID_ALGORITHM: Int32 { get }
public var X509_V_ERR_SUITE_B_INVALID_CURVE: Int32 { get }
public var X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM: Int32 { get }
public var X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED: Int32 { get }
public var X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256: Int32 { get }

/* Host, email and IP check errors */
public var X509_V_ERR_HOSTNAME_MISMATCH: Int32 { get }
public var X509_V_ERR_EMAIL_MISMATCH: Int32 { get }
public var X509_V_ERR_IP_ADDRESS_MISMATCH: Int32 { get }

/* The application is not happy */
public var X509_V_ERR_APPLICATION_VERIFICATION: Int32 { get }

/* Certificate verify flags */

/* Send issuer+subject checks to verify_cb */
public var X509_V_FLAG_CB_ISSUER_CHECK: Int32 { get }
/* Use check time instead of current time */
public var X509_V_FLAG_USE_CHECK_TIME: Int32 { get }
/* Lookup CRLs */
public var X509_V_FLAG_CRL_CHECK: Int32 { get }
/* Lookup CRLs for whole chain */
public var X509_V_FLAG_CRL_CHECK_ALL: Int32 { get }
/* Ignore unhandled critical extensions */
public var X509_V_FLAG_IGNORE_CRITICAL: Int32 { get }
/* Disable workarounds for broken certificates */
public var X509_V_FLAG_X509_STRICT: Int32 { get }
/* Enable proxy certificate validation */
public var X509_V_FLAG_ALLOW_PROXY_CERTS: Int32 { get }
/* Enable policy checking */
public var X509_V_FLAG_POLICY_CHECK: Int32 { get }
/* Policy variable require-explicit-policy */
public var X509_V_FLAG_EXPLICIT_POLICY: Int32 { get }
/* Policy variable inhibit-any-policy */
public var X509_V_FLAG_INHIBIT_ANY: Int32 { get }
/* Policy variable inhibit-policy-mapping */
public var X509_V_FLAG_INHIBIT_MAP: Int32 { get }
/* Notify callback that policy is OK */
public var X509_V_FLAG_NOTIFY_POLICY: Int32 { get }
/* Extended CRL features such as indirect CRLs, alternate CRL signing keys */
public var X509_V_FLAG_EXTENDED_CRL_SUPPORT: Int32 { get }
/* Delta CRL support */
public var X509_V_FLAG_USE_DELTAS: Int32 { get }
/* Check selfsigned CA signature */
public var X509_V_FLAG_CHECK_SS_SIGNATURE: Int32 { get }
/* Use trusted store first */
public var X509_V_FLAG_TRUSTED_FIRST: Int32 { get }
/* Suite B 128 bit only mode: not normally used */
public var X509_V_FLAG_SUITEB_128_LOS_ONLY: Int32 { get }
/* Suite B 192 bit only mode */
public var X509_V_FLAG_SUITEB_192_LOS: Int32 { get }
/* Suite B 128 bit mode allowing 192 bit algorithms */
public var X509_V_FLAG_SUITEB_128_LOS: Int32 { get }

/* Allow partial chains if at least one certificate is in trusted store */
public var X509_V_FLAG_PARTIAL_CHAIN: Int32 { get }
/*
 * If the initial chain is not trusted, do not attempt to build an alternative
 * chain. Alternate chain checking was introduced in 1.0.2b. Setting this flag
 * will force the behaviour to match that of previous versions.
 */
public var X509_V_FLAG_NO_ALT_CHAINS: Int32 { get }

public var X509_VP_FLAG_DEFAULT: Int32 { get }
public var X509_VP_FLAG_OVERWRITE: Int32 { get }
public var X509_VP_FLAG_RESET_FLAGS: Int32 { get }
public var X509_VP_FLAG_LOCKED: Int32 { get }
public var X509_VP_FLAG_ONCE: Int32 { get }

/* Internal use: mask of policy related options */

public func X509_OBJECT_idx_by_subject(_ h: UnsafeMutablePointer<stack_st_X509_OBJECT>!, _ type: Int32, _ name: UnsafeMutablePointer<X509_NAME>!) -> Int32
public func X509_OBJECT_retrieve_by_subject(_ h: UnsafeMutablePointer<stack_st_X509_OBJECT>!, _ type: Int32, _ name: UnsafeMutablePointer<X509_NAME>!) -> UnsafeMutablePointer<X509_OBJECT>!
public func X509_OBJECT_retrieve_match(_ h: UnsafeMutablePointer<stack_st_X509_OBJECT>!, _ x: UnsafeMutablePointer<X509_OBJECT>!) -> UnsafeMutablePointer<X509_OBJECT>!
public func X509_OBJECT_up_ref_count(_ a: UnsafeMutablePointer<X509_OBJECT>!)
public func X509_OBJECT_free_contents(_ a: UnsafeMutablePointer<X509_OBJECT>!)
public func X509_STORE_new() -> UnsafeMutablePointer<X509_STORE>!
public func X509_STORE_free(_ v: UnsafeMutablePointer<X509_STORE>!)

public func X509_STORE_get1_certs(_ st: UnsafeMutablePointer<X509_STORE_CTX>!, _ nm: UnsafeMutablePointer<X509_NAME>!) -> UnsafeMutablePointer<stack_st_X509>!
public func X509_STORE_get1_crls(_ st: UnsafeMutablePointer<X509_STORE_CTX>!, _ nm: UnsafeMutablePointer<X509_NAME>!) -> UnsafeMutablePointer<stack_st_X509_CRL>!
public func X509_STORE_set_flags(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ flags: UInt) -> Int32
public func X509_STORE_set_purpose(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ purpose: Int32) -> Int32
public func X509_STORE_set_trust(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ trust: Int32) -> Int32
public func X509_STORE_set1_param(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ pm: UnsafeMutablePointer<X509_VERIFY_PARAM>!) -> Int32

public func X509_STORE_set_verify_cb(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ verify_cb: (@escaping @convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!)

public func X509_STORE_set_lookup_crls_cb(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutablePointer<X509_NAME>?) -> UnsafeMutablePointer<stack_st_X509_CRL>?)!)

public func X509_STORE_CTX_new() -> UnsafeMutablePointer<X509_STORE_CTX>!

public func X509_STORE_CTX_get1_issuer(_ issuer: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!, _ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ x: UnsafeMutablePointer<X509>!) -> Int32

public func X509_STORE_CTX_free(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!)
public func X509_STORE_CTX_init(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ store: UnsafeMutablePointer<X509_STORE>!, _ x509: UnsafeMutablePointer<X509>!, _ chain: UnsafeMutablePointer<stack_st_X509>!) -> Int32
public func X509_STORE_CTX_trusted_stack(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ sk: UnsafeMutablePointer<stack_st_X509>!)
public func X509_STORE_CTX_cleanup(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!)

public func X509_STORE_CTX_get0_store(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<X509_STORE>!

public func X509_STORE_add_lookup(_ v: UnsafeMutablePointer<X509_STORE>!, _ m: UnsafeMutablePointer<X509_LOOKUP_METHOD>!) -> UnsafeMutablePointer<X509_LOOKUP>!

public func X509_LOOKUP_hash_dir() -> UnsafeMutablePointer<X509_LOOKUP_METHOD>!
public func X509_LOOKUP_file() -> UnsafeMutablePointer<X509_LOOKUP_METHOD>!

public func X509_STORE_add_cert(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ x: UnsafeMutablePointer<X509>!) -> Int32
public func X509_STORE_add_crl(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ x: UnsafeMutablePointer<X509_CRL>!) -> Int32

public func X509_STORE_get_by_subject(_ vs: UnsafeMutablePointer<X509_STORE_CTX>!, _ type: Int32, _ name: UnsafeMutablePointer<X509_NAME>!, _ ret: UnsafeMutablePointer<X509_OBJECT>!) -> Int32

public func X509_LOOKUP_ctrl(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ cmd: Int32, _ argc: UnsafePointer<Int8>!, _ argl: Int, _ ret: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!) -> Int32

public func X509_load_cert_file(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func X509_load_crl_file(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func X509_load_cert_crl_file(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32

public func X509_LOOKUP_new(_ method: UnsafeMutablePointer<X509_LOOKUP_METHOD>!) -> UnsafeMutablePointer<X509_LOOKUP>!
public func X509_LOOKUP_free(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!)
public func X509_LOOKUP_init(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!) -> Int32
public func X509_LOOKUP_by_subject(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ type: Int32, _ name: UnsafeMutablePointer<X509_NAME>!, _ ret: UnsafeMutablePointer<X509_OBJECT>!) -> Int32
public func X509_LOOKUP_by_issuer_serial(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ type: Int32, _ name: UnsafeMutablePointer<X509_NAME>!, _ serial: UnsafeMutablePointer<ASN1_INTEGER>!, _ ret: UnsafeMutablePointer<X509_OBJECT>!) -> Int32
public func X509_LOOKUP_by_fingerprint(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ type: Int32, _ bytes: UnsafeMutablePointer<UInt8>!, _ len: Int32, _ ret: UnsafeMutablePointer<X509_OBJECT>!) -> Int32
public func X509_LOOKUP_by_alias(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!, _ type: Int32, _ str: UnsafeMutablePointer<Int8>!, _ len: Int32, _ ret: UnsafeMutablePointer<X509_OBJECT>!) -> Int32
public func X509_LOOKUP_shutdown(_ ctx: UnsafeMutablePointer<X509_LOOKUP>!) -> Int32

public func X509_STORE_load_locations(_ ctx: UnsafeMutablePointer<X509_STORE>!, _ file: UnsafePointer<Int8>!, _ dir: UnsafePointer<Int8>!) -> Int32
public func X509_STORE_set_default_paths(_ ctx: UnsafeMutablePointer<X509_STORE>!) -> Int32

public func X509_STORE_CTX_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func X509_STORE_CTX_set_ex_data(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ idx: Int32, _ data: UnsafeMutableRawPointer!) -> Int32
public func X509_STORE_CTX_get_ex_data(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ idx: Int32) -> UnsafeMutableRawPointer!
public func X509_STORE_CTX_get_error(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> Int32
public func X509_STORE_CTX_set_error(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ s: Int32)
public func X509_STORE_CTX_get_error_depth(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> Int32
public func X509_STORE_CTX_get_current_cert(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<X509>!
public func X509_STORE_CTX_get0_current_issuer(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<X509>!
public func X509_STORE_CTX_get0_current_crl(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<X509_CRL>!
public func X509_STORE_CTX_get0_parent_ctx(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<X509_STORE_CTX>!
public func X509_STORE_CTX_get_chain(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<stack_st_X509>!
public func X509_STORE_CTX_get1_chain(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<stack_st_X509>!
public func X509_STORE_CTX_set_cert(_ c: UnsafeMutablePointer<X509_STORE_CTX>!, _ x: UnsafeMutablePointer<X509>!)
public func X509_STORE_CTX_set_chain(_ c: UnsafeMutablePointer<X509_STORE_CTX>!, _ sk: UnsafeMutablePointer<stack_st_X509>!)
public func X509_STORE_CTX_set0_crls(_ c: UnsafeMutablePointer<X509_STORE_CTX>!, _ sk: UnsafeMutablePointer<stack_st_X509_CRL>!)
public func X509_STORE_CTX_set_purpose(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ purpose: Int32) -> Int32
public func X509_STORE_CTX_set_trust(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ trust: Int32) -> Int32
public func X509_STORE_CTX_purpose_inherit(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ def_purpose: Int32, _ purpose: Int32, _ trust: Int32) -> Int32
public func X509_STORE_CTX_set_flags(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ flags: UInt)
public func X509_STORE_CTX_set_time(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ flags: UInt, _ t: time_t)
public func X509_STORE_CTX_set_verify_cb(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ verify_cb: (@escaping @convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!)

public func X509_STORE_CTX_get0_policy_tree(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> OpaquePointer!
public func X509_STORE_CTX_get_explicit_policy(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> Int32

public func X509_STORE_CTX_get0_param(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> UnsafeMutablePointer<X509_VERIFY_PARAM>!
public func X509_STORE_CTX_set0_param(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!)
public func X509_STORE_CTX_set_default(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ name: UnsafePointer<Int8>!) -> Int32

/* X509_VERIFY_PARAM functions */

public func X509_VERIFY_PARAM_new() -> UnsafeMutablePointer<X509_VERIFY_PARAM>!
public func X509_VERIFY_PARAM_free(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!)
public func X509_VERIFY_PARAM_inherit(_ to: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ from: UnsafePointer<X509_VERIFY_PARAM>!) -> Int32
public func X509_VERIFY_PARAM_set1(_ to: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ from: UnsafePointer<X509_VERIFY_PARAM>!) -> Int32
public func X509_VERIFY_PARAM_set1_name(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ name: UnsafePointer<Int8>!) -> Int32
public func X509_VERIFY_PARAM_set_flags(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ flags: UInt) -> Int32
public func X509_VERIFY_PARAM_clear_flags(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ flags: UInt) -> Int32
public func X509_VERIFY_PARAM_get_flags(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!) -> UInt
public func X509_VERIFY_PARAM_set_purpose(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ purpose: Int32) -> Int32
public func X509_VERIFY_PARAM_set_trust(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ trust: Int32) -> Int32
public func X509_VERIFY_PARAM_set_depth(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ depth: Int32)
public func X509_VERIFY_PARAM_set_time(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ t: time_t)
public func X509_VERIFY_PARAM_add0_policy(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ policy: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32
public func X509_VERIFY_PARAM_set1_policies(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ policies: UnsafeMutablePointer<stack_st_ASN1_OBJECT>!) -> Int32

public func X509_VERIFY_PARAM_set1_host(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ name: UnsafePointer<Int8>!, _ namelen: Int) -> Int32
public func X509_VERIFY_PARAM_add1_host(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ name: UnsafePointer<Int8>!, _ namelen: Int) -> Int32
public func X509_VERIFY_PARAM_set_hostflags(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ flags: UInt32)
public func X509_VERIFY_PARAM_get0_peername(_: UnsafeMutablePointer<X509_VERIFY_PARAM>!) -> UnsafeMutablePointer<Int8>!
public func X509_VERIFY_PARAM_set1_email(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ email: UnsafePointer<Int8>!, _ emaillen: Int) -> Int32
public func X509_VERIFY_PARAM_set1_ip(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ ip: UnsafePointer<UInt8>!, _ iplen: Int) -> Int32
public func X509_VERIFY_PARAM_set1_ip_asc(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!, _ ipasc: UnsafePointer<Int8>!) -> Int32

public func X509_VERIFY_PARAM_get_depth(_ param: UnsafePointer<X509_VERIFY_PARAM>!) -> Int32
public func X509_VERIFY_PARAM_get0_name(_ param: UnsafePointer<X509_VERIFY_PARAM>!) -> UnsafePointer<Int8>!

public func X509_VERIFY_PARAM_add0_table(_ param: UnsafeMutablePointer<X509_VERIFY_PARAM>!) -> Int32
public func X509_VERIFY_PARAM_get_count() -> Int32
public func X509_VERIFY_PARAM_get0(_ id: Int32) -> UnsafePointer<X509_VERIFY_PARAM>!
public func X509_VERIFY_PARAM_lookup(_ name: UnsafePointer<Int8>!) -> UnsafePointer<X509_VERIFY_PARAM>!
public func X509_VERIFY_PARAM_table_cleanup()

public func X509_policy_check(_ ptree: UnsafeMutablePointer<OpaquePointer?>!, _ pexplicit_policy: UnsafeMutablePointer<Int32>!, _ certs: UnsafeMutablePointer<stack_st_X509>!, _ policy_oids: UnsafeMutablePointer<stack_st_ASN1_OBJECT>!, _ flags: UInt32) -> Int32

public func X509_policy_tree_free(_ tree: OpaquePointer!)

public func X509_policy_tree_level_count(_ tree: OpaquePointer!) -> Int32
public func X509_policy_tree_get0_level(_ tree: OpaquePointer!, _ i: Int32) -> OpaquePointer!

public func X509_policy_tree_get0_policies(_ tree: OpaquePointer!) -> OpaquePointer!

public func X509_policy_tree_get0_user_policies(_ tree: OpaquePointer!) -> OpaquePointer!

public func X509_policy_level_node_count(_ level: OpaquePointer!) -> Int32

public func X509_policy_level_get0_node(_ level: OpaquePointer!, _ i: Int32) -> OpaquePointer!

public func X509_policy_node_get0_policy(_ node: OpaquePointer!) -> UnsafePointer<ASN1_OBJECT>!

public func X509_policy_node_get0_qualifiers(_ node: OpaquePointer!) -> OpaquePointer!
public func X509_policy_node_get0_parent(_ node: OpaquePointer!) -> OpaquePointer!
/* crypto/pkcs7/pkcs7.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Under Win32 thes are defined in wincrypt.h */

/*-
Encryption_ID           DES-CBC
Digest_ID               MD5
Digest_Encryption_ID    rsaEncryption
Key_Encryption_ID       rsaEncryption
*/

public struct pkcs7_issuer_and_serial_st {

    public var issuer: UnsafeMutablePointer<X509_NAME>!

    public var serial: UnsafeMutablePointer<ASN1_INTEGER>!

    public init()

    public init(issuer: UnsafeMutablePointer<X509_NAME>!, serial: UnsafeMutablePointer<ASN1_INTEGER>!)
}
public typealias PKCS7_ISSUER_AND_SERIAL = pkcs7_issuer_and_serial_st

public struct pkcs7_signer_info_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* version 1 */

    public var issuer_and_serial: UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!

    public var digest_alg: UnsafeMutablePointer<X509_ALGOR>!

    public var auth_attr: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>! /* [ 0 ] */

    public var digest_enc_alg: UnsafeMutablePointer<X509_ALGOR>!

    public var enc_digest: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public var unauth_attr: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>! /* [ 1 ] */

    /* The private key to sign with */
    public var pkey: UnsafeMutablePointer<EVP_PKEY>!

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, issuer_and_serial: UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!, digest_alg: UnsafeMutablePointer<X509_ALGOR>!, auth_attr: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!, digest_enc_alg: UnsafeMutablePointer<X509_ALGOR>!, enc_digest: UnsafeMutablePointer<ASN1_OCTET_STRING>!, unauth_attr: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!, pkey: UnsafeMutablePointer<EVP_PKEY>!)
}
public typealias PKCS7_SIGNER_INFO = pkcs7_signer_info_st

public struct stack_st_PKCS7_SIGNER_INFO {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct pkcs7_recip_info_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* version 0 */

    public var issuer_and_serial: UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!

    public var key_enc_algor: UnsafeMutablePointer<X509_ALGOR>!

    public var enc_key: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public var cert: UnsafeMutablePointer<X509>! /* get the pub-key from this */

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, issuer_and_serial: UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!, key_enc_algor: UnsafeMutablePointer<X509_ALGOR>!, enc_key: UnsafeMutablePointer<ASN1_OCTET_STRING>!, cert: UnsafeMutablePointer<X509>!)
}
public typealias PKCS7_RECIP_INFO = pkcs7_recip_info_st

public struct stack_st_PKCS7_RECIP_INFO {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct pkcs7_signed_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* version 1 */

    public var md_algs: UnsafeMutablePointer<stack_st_X509_ALGOR>! /* md used */

    public var cert: UnsafeMutablePointer<stack_st_X509>! /* [ 0 ] */

    public var crl: UnsafeMutablePointer<stack_st_X509_CRL>! /* [ 1 ] */

    public var signer_info: UnsafeMutablePointer<stack_st_PKCS7_SIGNER_INFO>!

    public var contents: UnsafeMutablePointer<pkcs7_st>!

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, md_algs: UnsafeMutablePointer<stack_st_X509_ALGOR>!, cert: UnsafeMutablePointer<stack_st_X509>!, crl: UnsafeMutablePointer<stack_st_X509_CRL>!, signer_info: UnsafeMutablePointer<stack_st_PKCS7_SIGNER_INFO>!, contents: UnsafeMutablePointer<pkcs7_st>!)
}
public typealias PKCS7_SIGNED = pkcs7_signed_st
/*
 * The above structure is very very similar to PKCS7_SIGN_ENVELOPE. How about
 * merging the two
 */

public struct pkcs7_enc_content_st {

    public var content_type: UnsafeMutablePointer<ASN1_OBJECT>!

    public var algorithm: UnsafeMutablePointer<X509_ALGOR>!

    public var enc_data: UnsafeMutablePointer<ASN1_OCTET_STRING>! /* [ 0 ] */

    public var cipher: UnsafePointer<EVP_CIPHER>!

    public init()

    public init(content_type: UnsafeMutablePointer<ASN1_OBJECT>!, algorithm: UnsafeMutablePointer<X509_ALGOR>!, enc_data: UnsafeMutablePointer<ASN1_OCTET_STRING>!, cipher: UnsafePointer<EVP_CIPHER>!)
}
public typealias PKCS7_ENC_CONTENT = pkcs7_enc_content_st

public struct pkcs7_enveloped_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* version 0 */

    public var recipientinfo: UnsafeMutablePointer<stack_st_PKCS7_RECIP_INFO>!

    public var enc_data: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, recipientinfo: UnsafeMutablePointer<stack_st_PKCS7_RECIP_INFO>!, enc_data: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!)
}
public typealias PKCS7_ENVELOPE = pkcs7_enveloped_st

public struct pkcs7_signedandenveloped_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* version 1 */

    public var md_algs: UnsafeMutablePointer<stack_st_X509_ALGOR>! /* md used */

    public var cert: UnsafeMutablePointer<stack_st_X509>! /* [ 0 ] */

    public var crl: UnsafeMutablePointer<stack_st_X509_CRL>! /* [ 1 ] */

    public var signer_info: UnsafeMutablePointer<stack_st_PKCS7_SIGNER_INFO>!

    public var enc_data: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!

    public var recipientinfo: UnsafeMutablePointer<stack_st_PKCS7_RECIP_INFO>!

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, md_algs: UnsafeMutablePointer<stack_st_X509_ALGOR>!, cert: UnsafeMutablePointer<stack_st_X509>!, crl: UnsafeMutablePointer<stack_st_X509_CRL>!, signer_info: UnsafeMutablePointer<stack_st_PKCS7_SIGNER_INFO>!, enc_data: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!, recipientinfo: UnsafeMutablePointer<stack_st_PKCS7_RECIP_INFO>!)
}
public typealias PKCS7_SIGN_ENVELOPE = pkcs7_signedandenveloped_st

public struct pkcs7_digest_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* version 0 */

    public var md: UnsafeMutablePointer<X509_ALGOR>! /* md used */

    public var contents: UnsafeMutablePointer<pkcs7_st>!

    public var digest: UnsafeMutablePointer<ASN1_OCTET_STRING>!

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, md: UnsafeMutablePointer<X509_ALGOR>!, contents: UnsafeMutablePointer<pkcs7_st>!, digest: UnsafeMutablePointer<ASN1_OCTET_STRING>!)
}
public typealias PKCS7_DIGEST = pkcs7_digest_st

public struct pkcs7_encrypted_st {

    public var version: UnsafeMutablePointer<ASN1_INTEGER>! /* version 0 */

    public var enc_data: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!

    public init()

    public init(version: UnsafeMutablePointer<ASN1_INTEGER>!, enc_data: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!)
}
public typealias PKCS7_ENCRYPT = pkcs7_encrypted_st

public struct pkcs7_st {

    /*
     * The following is non NULL if it contains ASN1 encoding of this
     * structure
     */
    
    /* used during processing */
    
    /* content as defined by the type */
    /*
     * all encryption/message digests are applied to the 'contents', leaving
     * out the 'type' field.
     */
    public struct __Unnamed_union_d {

        public var ptr: UnsafeMutablePointer<Int8>!

        /* NID_pkcs7_data */
        public var data: UnsafeMutablePointer<ASN1_OCTET_STRING>!

        /* NID_pkcs7_signed */
        public var sign: UnsafeMutablePointer<PKCS7_SIGNED>!

        /* NID_pkcs7_enveloped */
        public var enveloped: UnsafeMutablePointer<PKCS7_ENVELOPE>!

        /* NID_pkcs7_signedAndEnveloped */
        public var signed_and_enveloped: UnsafeMutablePointer<PKCS7_SIGN_ENVELOPE>!

        /* NID_pkcs7_digest */
        public var digest: UnsafeMutablePointer<PKCS7_DIGEST>!

        /* NID_pkcs7_encrypted */
        public var encrypted: UnsafeMutablePointer<PKCS7_ENCRYPT>!

        /* Anything else */
        public var other: UnsafeMutablePointer<ASN1_TYPE>!

        public init(ptr: UnsafeMutablePointer<Int8>!)

        public init(data: UnsafeMutablePointer<ASN1_OCTET_STRING>!)

        public init(sign: UnsafeMutablePointer<PKCS7_SIGNED>!)

        public init(enveloped: UnsafeMutablePointer<PKCS7_ENVELOPE>!)

        public init(signed_and_enveloped: UnsafeMutablePointer<PKCS7_SIGN_ENVELOPE>!)

        public init(digest: UnsafeMutablePointer<PKCS7_DIGEST>!)

        public init(encrypted: UnsafeMutablePointer<PKCS7_ENCRYPT>!)

        public init(other: UnsafeMutablePointer<ASN1_TYPE>!)

        public init()
    }

    public var asn1: UnsafeMutablePointer<UInt8>!

    public var length: Int

    public var state: Int32

    public var detached: Int32

    public var type: UnsafeMutablePointer<ASN1_OBJECT>!

    public var d: pkcs7_st.__Unnamed_union_d

    public init()

    public init(asn1: UnsafeMutablePointer<UInt8>!, length: Int, state: Int32, detached: Int32, type: UnsafeMutablePointer<ASN1_OBJECT>!, d: pkcs7_st.__Unnamed_union_d)
}
public var PKCS7_S_HEADER: Int32 { get }
public var PKCS7_S_BODY: Int32 { get }
public var PKCS7_S_TAIL: Int32 { get }
public typealias PKCS7 = pkcs7_st

public struct stack_st_PKCS7 {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public var PKCS7_OP_SET_DETACHED_SIGNATURE: Int32 { get }
public var PKCS7_OP_GET_DETACHED_SIGNATURE: Int32 { get }

/* S/MIME related flags */

public var PKCS7_TEXT: Int32 { get }
public var PKCS7_NOCERTS: Int32 { get }
public var PKCS7_NOSIGS: Int32 { get }
public var PKCS7_NOCHAIN: Int32 { get }
public var PKCS7_NOINTERN: Int32 { get }
public var PKCS7_NOVERIFY: Int32 { get }
public var PKCS7_DETACHED: Int32 { get }
public var PKCS7_BINARY: Int32 { get }
public var PKCS7_NOATTR: Int32 { get }
public var PKCS7_NOSMIMECAP: Int32 { get }
public var PKCS7_NOOLDMIMETYPE: Int32 { get }
public var PKCS7_CRLFEOL: Int32 { get }
public var PKCS7_STREAM: Int32 { get }
public var PKCS7_NOCRL: Int32 { get }
public var PKCS7_PARTIAL: Int32 { get }
public var PKCS7_REUSE_DIGEST: Int32 { get }

/* Flags: for compatibility with older code */

public var SMIME_TEXT: Int32 { get }
public var SMIME_NOCERTS: Int32 { get }
public var SMIME_NOSIGS: Int32 { get }
public var SMIME_NOCHAIN: Int32 { get }
public var SMIME_NOINTERN: Int32 { get }
public var SMIME_NOVERIFY: Int32 { get }
public var SMIME_DETACHED: Int32 { get }
public var SMIME_BINARY: Int32 { get }
public var SMIME_NOATTR: Int32 { get }

public func PKCS7_ISSUER_AND_SERIAL_new() -> UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!

public func PKCS7_ISSUER_AND_SERIAL_free(_ a: UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!)

public func d2i_PKCS7_ISSUER_AND_SERIAL(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!

public func i2d_PKCS7_ISSUER_AND_SERIAL(_ a: UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_ISSUER_AND_SERIAL_digest(_ data: UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!, _ type: UnsafePointer<EVP_MD>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32

public func d2i_PKCS7_fp(_ fp: UnsafeMutablePointer<FILE>!, _ p7: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7>?>!) -> UnsafeMutablePointer<PKCS7>!
public func i2d_PKCS7_fp(_ fp: UnsafeMutablePointer<FILE>!, _ p7: UnsafeMutablePointer<PKCS7>!) -> Int32

public func PKCS7_dup(_ p7: UnsafeMutablePointer<PKCS7>!) -> UnsafeMutablePointer<PKCS7>!
public func d2i_PKCS7_bio(_ bp: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7>?>!) -> UnsafeMutablePointer<PKCS7>!
public func i2d_PKCS7_bio(_ bp: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<PKCS7>!) -> Int32
public func i2d_PKCS7_bio_stream(_ out: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<PKCS7>!, _ in: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> Int32
public func PEM_write_bio_PKCS7_stream(_ out: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<PKCS7>!, _ in: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> Int32

public func PKCS7_SIGNER_INFO_new() -> UnsafeMutablePointer<PKCS7_SIGNER_INFO>!

public func PKCS7_SIGNER_INFO_free(_ a: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!)

public func d2i_PKCS7_SIGNER_INFO(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_SIGNER_INFO>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_SIGNER_INFO>!

public func i2d_PKCS7_SIGNER_INFO(_ a: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_RECIP_INFO_new() -> UnsafeMutablePointer<PKCS7_RECIP_INFO>!

public func PKCS7_RECIP_INFO_free(_ a: UnsafeMutablePointer<PKCS7_RECIP_INFO>!)

public func d2i_PKCS7_RECIP_INFO(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_RECIP_INFO>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_RECIP_INFO>!

public func i2d_PKCS7_RECIP_INFO(_ a: UnsafeMutablePointer<PKCS7_RECIP_INFO>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_SIGNED_new() -> UnsafeMutablePointer<PKCS7_SIGNED>!

public func PKCS7_SIGNED_free(_ a: UnsafeMutablePointer<PKCS7_SIGNED>!)

public func d2i_PKCS7_SIGNED(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_SIGNED>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_SIGNED>!

public func i2d_PKCS7_SIGNED(_ a: UnsafeMutablePointer<PKCS7_SIGNED>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_ENC_CONTENT_new() -> UnsafeMutablePointer<PKCS7_ENC_CONTENT>!

public func PKCS7_ENC_CONTENT_free(_ a: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!)

public func d2i_PKCS7_ENC_CONTENT(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_ENC_CONTENT>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_ENC_CONTENT>!

public func i2d_PKCS7_ENC_CONTENT(_ a: UnsafeMutablePointer<PKCS7_ENC_CONTENT>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_ENVELOPE_new() -> UnsafeMutablePointer<PKCS7_ENVELOPE>!

public func PKCS7_ENVELOPE_free(_ a: UnsafeMutablePointer<PKCS7_ENVELOPE>!)

public func d2i_PKCS7_ENVELOPE(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_ENVELOPE>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_ENVELOPE>!

public func i2d_PKCS7_ENVELOPE(_ a: UnsafeMutablePointer<PKCS7_ENVELOPE>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_SIGN_ENVELOPE_new() -> UnsafeMutablePointer<PKCS7_SIGN_ENVELOPE>!

public func PKCS7_SIGN_ENVELOPE_free(_ a: UnsafeMutablePointer<PKCS7_SIGN_ENVELOPE>!)

public func d2i_PKCS7_SIGN_ENVELOPE(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_SIGN_ENVELOPE>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_SIGN_ENVELOPE>!

public func i2d_PKCS7_SIGN_ENVELOPE(_ a: UnsafeMutablePointer<PKCS7_SIGN_ENVELOPE>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_DIGEST_new() -> UnsafeMutablePointer<PKCS7_DIGEST>!

public func PKCS7_DIGEST_free(_ a: UnsafeMutablePointer<PKCS7_DIGEST>!)

public func d2i_PKCS7_DIGEST(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_DIGEST>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_DIGEST>!

public func i2d_PKCS7_DIGEST(_ a: UnsafeMutablePointer<PKCS7_DIGEST>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_ENCRYPT_new() -> UnsafeMutablePointer<PKCS7_ENCRYPT>!

public func PKCS7_ENCRYPT_free(_ a: UnsafeMutablePointer<PKCS7_ENCRYPT>!)

public func d2i_PKCS7_ENCRYPT(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7_ENCRYPT>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7_ENCRYPT>!

public func i2d_PKCS7_ENCRYPT(_ a: UnsafeMutablePointer<PKCS7_ENCRYPT>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_new() -> UnsafeMutablePointer<PKCS7>!

public func PKCS7_free(_ a: UnsafeMutablePointer<PKCS7>!)

public func d2i_PKCS7(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS7>!

public func i2d_PKCS7(_ a: UnsafeMutablePointer<PKCS7>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func i2d_PKCS7_NDEF(_ a: UnsafeMutablePointer<PKCS7>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS7_print_ctx(_ out: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<PKCS7>!, _ indent: Int32, _ pctx: OpaquePointer!) -> Int32

public func PKCS7_ctrl(_ p7: UnsafeMutablePointer<PKCS7>!, _ cmd: Int32, _ larg: Int, _ parg: UnsafeMutablePointer<Int8>!) -> Int

public func PKCS7_set_type(_ p7: UnsafeMutablePointer<PKCS7>!, _ type: Int32) -> Int32
public func PKCS7_set0_type_other(_ p7: UnsafeMutablePointer<PKCS7>!, _ type: Int32, _ other: UnsafeMutablePointer<ASN1_TYPE>!) -> Int32
public func PKCS7_set_content(_ p7: UnsafeMutablePointer<PKCS7>!, _ p7_data: UnsafeMutablePointer<PKCS7>!) -> Int32
public func PKCS7_SIGNER_INFO_set(_ p7i: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ x509: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ dgst: UnsafePointer<EVP_MD>!) -> Int32
public func PKCS7_SIGNER_INFO_sign(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!) -> Int32
public func PKCS7_add_signer(_ p7: UnsafeMutablePointer<PKCS7>!, _ p7i: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!) -> Int32
public func PKCS7_add_certificate(_ p7: UnsafeMutablePointer<PKCS7>!, _ x509: UnsafeMutablePointer<X509>!) -> Int32
public func PKCS7_add_crl(_ p7: UnsafeMutablePointer<PKCS7>!, _ x509: UnsafeMutablePointer<X509_CRL>!) -> Int32
public func PKCS7_content_new(_ p7: UnsafeMutablePointer<PKCS7>!, _ nid: Int32) -> Int32
public func PKCS7_dataVerify(_ cert_store: UnsafeMutablePointer<X509_STORE>!, _ ctx: UnsafeMutablePointer<X509_STORE_CTX>!, _ bio: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<PKCS7>!, _ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!) -> Int32
public func PKCS7_signatureVerify(_ bio: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<PKCS7>!, _ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ x509: UnsafeMutablePointer<X509>!) -> Int32

public func PKCS7_dataInit(_ p7: UnsafeMutablePointer<PKCS7>!, _ bio: UnsafeMutablePointer<BIO>!) -> UnsafeMutablePointer<BIO>!
public func PKCS7_dataFinal(_ p7: UnsafeMutablePointer<PKCS7>!, _ bio: UnsafeMutablePointer<BIO>!) -> Int32
public func PKCS7_dataDecode(_ p7: UnsafeMutablePointer<PKCS7>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ in_bio: UnsafeMutablePointer<BIO>!, _ pcert: UnsafeMutablePointer<X509>!) -> UnsafeMutablePointer<BIO>!

public func PKCS7_add_signature(_ p7: UnsafeMutablePointer<PKCS7>!, _ x509: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ dgst: UnsafePointer<EVP_MD>!) -> UnsafeMutablePointer<PKCS7_SIGNER_INFO>!
public func PKCS7_cert_from_signer_info(_ p7: UnsafeMutablePointer<PKCS7>!, _ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!) -> UnsafeMutablePointer<X509>!
public func PKCS7_set_digest(_ p7: UnsafeMutablePointer<PKCS7>!, _ md: UnsafePointer<EVP_MD>!) -> Int32
public func PKCS7_get_signer_info(_ p7: UnsafeMutablePointer<PKCS7>!) -> UnsafeMutablePointer<stack_st_PKCS7_SIGNER_INFO>!

public func PKCS7_add_recipient(_ p7: UnsafeMutablePointer<PKCS7>!, _ x509: UnsafeMutablePointer<X509>!) -> UnsafeMutablePointer<PKCS7_RECIP_INFO>!
public func PKCS7_SIGNER_INFO_get0_algs(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ pk: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ pdig: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGOR>?>!, _ psig: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGOR>?>!)
public func PKCS7_RECIP_INFO_get0_alg(_ ri: UnsafeMutablePointer<PKCS7_RECIP_INFO>!, _ penc: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGOR>?>!)
public func PKCS7_add_recipient_info(_ p7: UnsafeMutablePointer<PKCS7>!, _ ri: UnsafeMutablePointer<PKCS7_RECIP_INFO>!) -> Int32
public func PKCS7_RECIP_INFO_set(_ p7i: UnsafeMutablePointer<PKCS7_RECIP_INFO>!, _ x509: UnsafeMutablePointer<X509>!) -> Int32
public func PKCS7_set_cipher(_ p7: UnsafeMutablePointer<PKCS7>!, _ cipher: UnsafePointer<EVP_CIPHER>!) -> Int32
public func PKCS7_stream(_ boundary: UnsafeMutablePointer<UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?>!, _ p7: UnsafeMutablePointer<PKCS7>!) -> Int32

public func PKCS7_get_issuer_and_serial(_ p7: UnsafeMutablePointer<PKCS7>!, _ idx: Int32) -> UnsafeMutablePointer<PKCS7_ISSUER_AND_SERIAL>!
public func PKCS7_digest_from_attributes(_ sk: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!) -> UnsafeMutablePointer<ASN1_OCTET_STRING>!
public func PKCS7_add_signed_attribute(_ p7si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ nid: Int32, _ type: Int32, _ data: UnsafeMutableRawPointer!) -> Int32
public func PKCS7_add_attribute(_ p7si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ nid: Int32, _ atrtype: Int32, _ value: UnsafeMutableRawPointer!) -> Int32
public func PKCS7_get_attribute(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ nid: Int32) -> UnsafeMutablePointer<ASN1_TYPE>!
public func PKCS7_get_signed_attribute(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ nid: Int32) -> UnsafeMutablePointer<ASN1_TYPE>!
public func PKCS7_set_signed_attributes(_ p7si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ sk: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!) -> Int32
public func PKCS7_set_attributes(_ p7si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ sk: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!) -> Int32

public func PKCS7_sign(_ signcert: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ certs: UnsafeMutablePointer<stack_st_X509>!, _ data: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> UnsafeMutablePointer<PKCS7>!

public func PKCS7_sign_add_signer(_ p7: UnsafeMutablePointer<PKCS7>!, _ signcert: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ md: UnsafePointer<EVP_MD>!, _ flags: Int32) -> UnsafeMutablePointer<PKCS7_SIGNER_INFO>!

public func PKCS7_final(_ p7: UnsafeMutablePointer<PKCS7>!, _ data: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> Int32
public func PKCS7_verify(_ p7: UnsafeMutablePointer<PKCS7>!, _ certs: UnsafeMutablePointer<stack_st_X509>!, _ store: UnsafeMutablePointer<X509_STORE>!, _ indata: UnsafeMutablePointer<BIO>!, _ out: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> Int32
public func PKCS7_get0_signers(_ p7: UnsafeMutablePointer<PKCS7>!, _ certs: UnsafeMutablePointer<stack_st_X509>!, _ flags: Int32) -> UnsafeMutablePointer<stack_st_X509>!
public func PKCS7_encrypt(_ certs: UnsafeMutablePointer<stack_st_X509>!, _ in: UnsafeMutablePointer<BIO>!, _ cipher: UnsafePointer<EVP_CIPHER>!, _ flags: Int32) -> UnsafeMutablePointer<PKCS7>!
public func PKCS7_decrypt(_ p7: UnsafeMutablePointer<PKCS7>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ cert: UnsafeMutablePointer<X509>!, _ data: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> Int32

public func PKCS7_add_attrib_smimecap(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ cap: UnsafeMutablePointer<stack_st_X509_ALGOR>!) -> Int32
public func PKCS7_get_smimecap(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!) -> UnsafeMutablePointer<stack_st_X509_ALGOR>!
public func PKCS7_simple_smimecap(_ sk: UnsafeMutablePointer<stack_st_X509_ALGOR>!, _ nid: Int32, _ arg: Int32) -> Int32

public func PKCS7_add_attrib_content_type(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ coid: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32
public func PKCS7_add0_attrib_signing_time(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ t: UnsafeMutablePointer<ASN1_TIME>!) -> Int32
public func PKCS7_add1_attrib_digest(_ si: UnsafeMutablePointer<PKCS7_SIGNER_INFO>!, _ md: UnsafePointer<UInt8>!, _ mdlen: Int32) -> Int32

public func SMIME_write_PKCS7(_ bio: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<PKCS7>!, _ data: UnsafeMutablePointer<BIO>!, _ flags: Int32) -> Int32
public func SMIME_read_PKCS7(_ bio: UnsafeMutablePointer<BIO>!, _ bcont: UnsafeMutablePointer<UnsafeMutablePointer<BIO>?>!) -> UnsafeMutablePointer<PKCS7>!

public func BIO_new_PKCS7(_ out: UnsafeMutablePointer<BIO>!, _ p7: UnsafeMutablePointer<PKCS7>!) -> UnsafeMutablePointer<BIO>!

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_PKCS7_strings()

/* Error codes for the PKCS7 functions. */

/* Function codes. */
public var PKCS7_F_B64_READ_PKCS7: Int32 { get }
public var PKCS7_F_B64_WRITE_PKCS7: Int32 { get }
public var PKCS7_F_DO_PKCS7_SIGNED_ATTRIB: Int32 { get }
public var PKCS7_F_I2D_PKCS7_BIO_STREAM: Int32 { get }
public var PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME: Int32 { get }
public var PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP: Int32 { get }
public var PKCS7_F_PKCS7_ADD_CERTIFICATE: Int32 { get }
public var PKCS7_F_PKCS7_ADD_CRL: Int32 { get }
public var PKCS7_F_PKCS7_ADD_RECIPIENT_INFO: Int32 { get }
public var PKCS7_F_PKCS7_ADD_SIGNATURE: Int32 { get }
public var PKCS7_F_PKCS7_ADD_SIGNER: Int32 { get }
public var PKCS7_F_PKCS7_BIO_ADD_DIGEST: Int32 { get }
public var PKCS7_F_PKCS7_COPY_EXISTING_DIGEST: Int32 { get }
public var PKCS7_F_PKCS7_CTRL: Int32 { get }
public var PKCS7_F_PKCS7_DATADECODE: Int32 { get }
public var PKCS7_F_PKCS7_DATAFINAL: Int32 { get }
public var PKCS7_F_PKCS7_DATAINIT: Int32 { get }
public var PKCS7_F_PKCS7_DATASIGN: Int32 { get }
public var PKCS7_F_PKCS7_DATAVERIFY: Int32 { get }
public var PKCS7_F_PKCS7_DECRYPT: Int32 { get }
public var PKCS7_F_PKCS7_DECRYPT_RINFO: Int32 { get }
public var PKCS7_F_PKCS7_ENCODE_RINFO: Int32 { get }
public var PKCS7_F_PKCS7_ENCRYPT: Int32 { get }
public var PKCS7_F_PKCS7_FINAL: Int32 { get }
public var PKCS7_F_PKCS7_FIND_DIGEST: Int32 { get }
public var PKCS7_F_PKCS7_GET0_SIGNERS: Int32 { get }
public var PKCS7_F_PKCS7_RECIP_INFO_SET: Int32 { get }
public var PKCS7_F_PKCS7_SET_CIPHER: Int32 { get }
public var PKCS7_F_PKCS7_SET_CONTENT: Int32 { get }
public var PKCS7_F_PKCS7_SET_DIGEST: Int32 { get }
public var PKCS7_F_PKCS7_SET_TYPE: Int32 { get }
public var PKCS7_F_PKCS7_SIGN: Int32 { get }
public var PKCS7_F_PKCS7_SIGNATUREVERIFY: Int32 { get }
public var PKCS7_F_PKCS7_SIGNER_INFO_SET: Int32 { get }
public var PKCS7_F_PKCS7_SIGNER_INFO_SIGN: Int32 { get }
public var PKCS7_F_PKCS7_SIGN_ADD_SIGNER: Int32 { get }
public var PKCS7_F_PKCS7_SIMPLE_SMIMECAP: Int32 { get }
public var PKCS7_F_PKCS7_VERIFY: Int32 { get }
public var PKCS7_F_SMIME_READ_PKCS7: Int32 { get }
public var PKCS7_F_SMIME_TEXT: Int32 { get }

/* Reason codes. */
public var PKCS7_R_CERTIFICATE_VERIFY_ERROR: Int32 { get }
public var PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER: Int32 { get }
public var PKCS7_R_CIPHER_NOT_INITIALIZED: Int32 { get }
public var PKCS7_R_CONTENT_AND_DATA_PRESENT: Int32 { get }
public var PKCS7_R_CTRL_ERROR: Int32 { get }
public var PKCS7_R_DECODE_ERROR: Int32 { get }
public var PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH: Int32 { get }
public var PKCS7_R_DECRYPT_ERROR: Int32 { get }
public var PKCS7_R_DIGEST_FAILURE: Int32 { get }
public var PKCS7_R_ENCRYPTION_CTRL_FAILURE: Int32 { get }
public var PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE: Int32 { get }
public var PKCS7_R_ERROR_ADDING_RECIPIENT: Int32 { get }
public var PKCS7_R_ERROR_SETTING_CIPHER: Int32 { get }
public var PKCS7_R_INVALID_MIME_TYPE: Int32 { get }
public var PKCS7_R_INVALID_NULL_POINTER: Int32 { get }
public var PKCS7_R_INVALID_SIGNED_DATA_TYPE: Int32 { get }
public var PKCS7_R_MIME_NO_CONTENT_TYPE: Int32 { get }
public var PKCS7_R_MIME_PARSE_ERROR: Int32 { get }
public var PKCS7_R_MIME_SIG_PARSE_ERROR: Int32 { get }
public var PKCS7_R_MISSING_CERIPEND_INFO: Int32 { get }
public var PKCS7_R_NO_CONTENT: Int32 { get }
public var PKCS7_R_NO_CONTENT_TYPE: Int32 { get }
public var PKCS7_R_NO_DEFAULT_DIGEST: Int32 { get }
public var PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND: Int32 { get }
public var PKCS7_R_NO_MULTIPART_BODY_FAILURE: Int32 { get }
public var PKCS7_R_NO_MULTIPART_BOUNDARY: Int32 { get }
public var PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE: Int32 { get }
public var PKCS7_R_NO_RECIPIENT_MATCHES_KEY: Int32 { get }
public var PKCS7_R_NO_SIGNATURES_ON_DATA: Int32 { get }
public var PKCS7_R_NO_SIGNERS: Int32 { get }
public var PKCS7_R_NO_SIG_CONTENT_TYPE: Int32 { get }
public var PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE: Int32 { get }
public var PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR: Int32 { get }
public var PKCS7_R_PKCS7_ADD_SIGNER_ERROR: Int32 { get }
public var PKCS7_R_PKCS7_DATAFINAL: Int32 { get }
public var PKCS7_R_PKCS7_DATAFINAL_ERROR: Int32 { get }
public var PKCS7_R_PKCS7_DATASIGN: Int32 { get }
public var PKCS7_R_PKCS7_PARSE_ERROR: Int32 { get }
public var PKCS7_R_PKCS7_SIG_PARSE_ERROR: Int32 { get }
public var PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE: Int32 { get }
public var PKCS7_R_SIGNATURE_FAILURE: Int32 { get }
public var PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND: Int32 { get }
public var PKCS7_R_SIGNING_CTRL_FAILURE: Int32 { get }
public var PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE: Int32 { get }
public var PKCS7_R_SIG_INVALID_MIME_TYPE: Int32 { get }
public var PKCS7_R_SMIME_TEXT_ERROR: Int32 { get }
public var PKCS7_R_UNABLE_TO_FIND_CERTIFICATE: Int32 { get }
public var PKCS7_R_UNABLE_TO_FIND_MEM_BIO: Int32 { get }
public var PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST: Int32 { get }
public var PKCS7_R_UNKNOWN_DIGEST_TYPE: Int32 { get }
public var PKCS7_R_UNKNOWN_OPERATION: Int32 { get }
public var PKCS7_R_UNSUPPORTED_CIPHER_TYPE: Int32 { get }
public var PKCS7_R_UNSUPPORTED_CONTENT_TYPE: Int32 { get }
public var PKCS7_R_WRONG_CONTENT_TYPE: Int32 { get }
public var PKCS7_R_WRONG_PKCS7_TYPE: Int32 { get }

public var X509_EXT_PACK_UNKNOWN: Int32 { get }
public var X509_EXT_PACK_STRING: Int32 { get }

/* #define      X509_get_serialNumber(x) ((x)->cert_info->serialNumber) */

/*****/

public func X509_CRL_set_default_method(_ meth: OpaquePointer!)
public func X509_CRL_METHOD_new(_ crl_init: (@escaping @convention(c) (UnsafeMutablePointer<X509_CRL>?) -> Int32)!, _ crl_free: (@escaping @convention(c) (UnsafeMutablePointer<X509_CRL>?) -> Int32)!, _ crl_lookup: (@escaping @convention(c) (UnsafeMutablePointer<X509_CRL>?, UnsafeMutablePointer<UnsafeMutablePointer<X509_REVOKED>?>?, UnsafeMutablePointer<ASN1_INTEGER>?, UnsafeMutablePointer<X509_NAME>?) -> Int32)!, _ crl_verify: (@escaping @convention(c) (UnsafeMutablePointer<X509_CRL>?, UnsafeMutablePointer<EVP_PKEY>?) -> Int32)!) -> OpaquePointer!
public func X509_CRL_METHOD_free(_ m: OpaquePointer!)

public func X509_CRL_set_meth_data(_ crl: UnsafeMutablePointer<X509_CRL>!, _ dat: UnsafeMutableRawPointer!)
public func X509_CRL_get_meth_data(_ crl: UnsafeMutablePointer<X509_CRL>!) -> UnsafeMutableRawPointer!

/*
 * This one is only used so that a binary form can output, as in
 * i2d_X509_NAME(X509_get_X509_PUBKEY(x),&buf)
 */

public func X509_verify_cert_error_string(_ n: Int) -> UnsafePointer<Int8>!

public func X509_verify(_ a: UnsafeMutablePointer<X509>!, _ r: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func X509_REQ_verify(_ a: UnsafeMutablePointer<X509_REQ>!, _ r: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func X509_CRL_verify(_ a: UnsafeMutablePointer<X509_CRL>!, _ r: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func NETSCAPE_SPKI_verify(_ a: UnsafeMutablePointer<NETSCAPE_SPKI>!, _ r: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func NETSCAPE_SPKI_b64_decode(_ str: UnsafePointer<Int8>!, _ len: Int32) -> UnsafeMutablePointer<NETSCAPE_SPKI>!
public func NETSCAPE_SPKI_b64_encode(_ x: UnsafeMutablePointer<NETSCAPE_SPKI>!) -> UnsafeMutablePointer<Int8>!
public func NETSCAPE_SPKI_get_pubkey(_ x: UnsafeMutablePointer<NETSCAPE_SPKI>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func NETSCAPE_SPKI_set_pubkey(_ x: UnsafeMutablePointer<NETSCAPE_SPKI>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func NETSCAPE_SPKI_print(_ out: UnsafeMutablePointer<BIO>!, _ spki: UnsafeMutablePointer<NETSCAPE_SPKI>!) -> Int32

public func X509_signature_dump(_ bp: UnsafeMutablePointer<BIO>!, _ sig: UnsafePointer<ASN1_STRING>!, _ indent: Int32) -> Int32
public func X509_signature_print(_ bp: UnsafeMutablePointer<BIO>!, _ alg: UnsafeMutablePointer<X509_ALGOR>!, _ sig: UnsafeMutablePointer<ASN1_STRING>!) -> Int32

public func X509_sign(_ x: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ md: UnsafePointer<EVP_MD>!) -> Int32
public func X509_sign_ctx(_ x: UnsafeMutablePointer<X509>!, _ ctx: UnsafeMutablePointer<EVP_MD_CTX>!) -> Int32
public func X509_http_nbio(_ rctx: OpaquePointer!, _ pcert: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!) -> Int32
public func X509_REQ_sign(_ x: UnsafeMutablePointer<X509_REQ>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ md: UnsafePointer<EVP_MD>!) -> Int32
public func X509_REQ_sign_ctx(_ x: UnsafeMutablePointer<X509_REQ>!, _ ctx: UnsafeMutablePointer<EVP_MD_CTX>!) -> Int32
public func X509_CRL_sign(_ x: UnsafeMutablePointer<X509_CRL>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ md: UnsafePointer<EVP_MD>!) -> Int32
public func X509_CRL_sign_ctx(_ x: UnsafeMutablePointer<X509_CRL>!, _ ctx: UnsafeMutablePointer<EVP_MD_CTX>!) -> Int32
public func X509_CRL_http_nbio(_ rctx: OpaquePointer!, _ pcrl: UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>!) -> Int32
public func NETSCAPE_SPKI_sign(_ x: UnsafeMutablePointer<NETSCAPE_SPKI>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ md: UnsafePointer<EVP_MD>!) -> Int32

public func X509_pubkey_digest(_ data: UnsafePointer<X509>!, _ type: UnsafePointer<EVP_MD>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32
public func X509_digest(_ data: UnsafePointer<X509>!, _ type: UnsafePointer<EVP_MD>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32
public func X509_CRL_digest(_ data: UnsafePointer<X509_CRL>!, _ type: UnsafePointer<EVP_MD>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32
public func X509_REQ_digest(_ data: UnsafePointer<X509_REQ>!, _ type: UnsafePointer<EVP_MD>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32
public func X509_NAME_digest(_ data: UnsafePointer<X509_NAME>!, _ type: UnsafePointer<EVP_MD>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32

public func d2i_X509_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x509: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!) -> UnsafeMutablePointer<X509>!
public func i2d_X509_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x509: UnsafeMutablePointer<X509>!) -> Int32
public func d2i_X509_CRL_fp(_ fp: UnsafeMutablePointer<FILE>!, _ crl: UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>!) -> UnsafeMutablePointer<X509_CRL>!
public func i2d_X509_CRL_fp(_ fp: UnsafeMutablePointer<FILE>!, _ crl: UnsafeMutablePointer<X509_CRL>!) -> Int32
public func d2i_X509_REQ_fp(_ fp: UnsafeMutablePointer<FILE>!, _ req: UnsafeMutablePointer<UnsafeMutablePointer<X509_REQ>?>!) -> UnsafeMutablePointer<X509_REQ>!
public func i2d_X509_REQ_fp(_ fp: UnsafeMutablePointer<FILE>!, _ req: UnsafeMutablePointer<X509_REQ>!) -> Int32

public func d2i_RSAPrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ rsa: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!) -> UnsafeMutablePointer<RSA>!
public func i2d_RSAPrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32
public func d2i_RSAPublicKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ rsa: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!) -> UnsafeMutablePointer<RSA>!
public func i2d_RSAPublicKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32
public func d2i_RSA_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ rsa: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!) -> UnsafeMutablePointer<RSA>!
public func i2d_RSA_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32

public func d2i_DSA_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ dsa: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!) -> UnsafeMutablePointer<DSA>!
public func i2d_DSA_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ dsa: UnsafeMutablePointer<DSA>!) -> Int32
public func d2i_DSAPrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ dsa: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!) -> UnsafeMutablePointer<DSA>!
public func i2d_DSAPrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ dsa: UnsafeMutablePointer<DSA>!) -> Int32

public func d2i_EC_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ eckey: UnsafeMutablePointer<OpaquePointer?>!) -> OpaquePointer!
public func i2d_EC_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ eckey: OpaquePointer!) -> Int32
public func d2i_ECPrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ eckey: UnsafeMutablePointer<OpaquePointer?>!) -> OpaquePointer!
public func i2d_ECPrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ eckey: OpaquePointer!) -> Int32

public func d2i_PKCS8_fp(_ fp: UnsafeMutablePointer<FILE>!, _ p8: UnsafeMutablePointer<UnsafeMutablePointer<X509_SIG>?>!) -> UnsafeMutablePointer<X509_SIG>!
public func i2d_PKCS8_fp(_ fp: UnsafeMutablePointer<FILE>!, _ p8: UnsafeMutablePointer<X509_SIG>!) -> Int32
public func d2i_PKCS8_PRIV_KEY_INFO_fp(_ fp: UnsafeMutablePointer<FILE>!, _ p8inf: UnsafeMutablePointer<UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>?>!) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!
public func i2d_PKCS8_PRIV_KEY_INFO_fp(_ fp: UnsafeMutablePointer<FILE>!, _ p8inf: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!) -> Int32
public func i2d_PKCS8PrivateKeyInfo_fp(_ fp: UnsafeMutablePointer<FILE>!, _ key: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func i2d_PrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func d2i_PrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func i2d_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func d2i_PUBKEY_fp(_ fp: UnsafeMutablePointer<FILE>!, _ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!) -> UnsafeMutablePointer<EVP_PKEY>!

public func d2i_X509_bio(_ bp: UnsafeMutablePointer<BIO>!, _ x509: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!) -> UnsafeMutablePointer<X509>!
public func i2d_X509_bio(_ bp: UnsafeMutablePointer<BIO>!, _ x509: UnsafeMutablePointer<X509>!) -> Int32
public func d2i_X509_CRL_bio(_ bp: UnsafeMutablePointer<BIO>!, _ crl: UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>!) -> UnsafeMutablePointer<X509_CRL>!
public func i2d_X509_CRL_bio(_ bp: UnsafeMutablePointer<BIO>!, _ crl: UnsafeMutablePointer<X509_CRL>!) -> Int32
public func d2i_X509_REQ_bio(_ bp: UnsafeMutablePointer<BIO>!, _ req: UnsafeMutablePointer<UnsafeMutablePointer<X509_REQ>?>!) -> UnsafeMutablePointer<X509_REQ>!
public func i2d_X509_REQ_bio(_ bp: UnsafeMutablePointer<BIO>!, _ req: UnsafeMutablePointer<X509_REQ>!) -> Int32

public func d2i_RSAPrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ rsa: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!) -> UnsafeMutablePointer<RSA>!
public func i2d_RSAPrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32
public func d2i_RSAPublicKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ rsa: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!) -> UnsafeMutablePointer<RSA>!
public func i2d_RSAPublicKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32
public func d2i_RSA_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ rsa: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!) -> UnsafeMutablePointer<RSA>!
public func i2d_RSA_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32

public func d2i_DSA_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ dsa: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!) -> UnsafeMutablePointer<DSA>!
public func i2d_DSA_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ dsa: UnsafeMutablePointer<DSA>!) -> Int32
public func d2i_DSAPrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ dsa: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!) -> UnsafeMutablePointer<DSA>!
public func i2d_DSAPrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ dsa: UnsafeMutablePointer<DSA>!) -> Int32

public func d2i_EC_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ eckey: UnsafeMutablePointer<OpaquePointer?>!) -> OpaquePointer!
public func i2d_EC_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ eckey: OpaquePointer!) -> Int32
public func d2i_ECPrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ eckey: UnsafeMutablePointer<OpaquePointer?>!) -> OpaquePointer!
public func i2d_ECPrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ eckey: OpaquePointer!) -> Int32

public func d2i_PKCS8_bio(_ bp: UnsafeMutablePointer<BIO>!, _ p8: UnsafeMutablePointer<UnsafeMutablePointer<X509_SIG>?>!) -> UnsafeMutablePointer<X509_SIG>!
public func i2d_PKCS8_bio(_ bp: UnsafeMutablePointer<BIO>!, _ p8: UnsafeMutablePointer<X509_SIG>!) -> Int32
public func d2i_PKCS8_PRIV_KEY_INFO_bio(_ bp: UnsafeMutablePointer<BIO>!, _ p8inf: UnsafeMutablePointer<UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>?>!) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!
public func i2d_PKCS8_PRIV_KEY_INFO_bio(_ bp: UnsafeMutablePointer<BIO>!, _ p8inf: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!) -> Int32
public func i2d_PKCS8PrivateKeyInfo_bio(_ bp: UnsafeMutablePointer<BIO>!, _ key: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func i2d_PrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func d2i_PrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func i2d_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func d2i_PUBKEY_bio(_ bp: UnsafeMutablePointer<BIO>!, _ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!) -> UnsafeMutablePointer<EVP_PKEY>!

public func X509_dup(_ x509: UnsafeMutablePointer<X509>!) -> UnsafeMutablePointer<X509>!
public func X509_ATTRIBUTE_dup(_ xa: UnsafeMutablePointer<X509_ATTRIBUTE>!) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509_EXTENSION_dup(_ ex: UnsafeMutablePointer<X509_EXTENSION>!) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_CRL_dup(_ crl: UnsafeMutablePointer<X509_CRL>!) -> UnsafeMutablePointer<X509_CRL>!
public func X509_REVOKED_dup(_ rev: UnsafeMutablePointer<X509_REVOKED>!) -> UnsafeMutablePointer<X509_REVOKED>!
public func X509_REQ_dup(_ req: UnsafeMutablePointer<X509_REQ>!) -> UnsafeMutablePointer<X509_REQ>!
public func X509_ALGOR_dup(_ xn: UnsafeMutablePointer<X509_ALGOR>!) -> UnsafeMutablePointer<X509_ALGOR>!
public func X509_ALGOR_set0(_ alg: UnsafeMutablePointer<X509_ALGOR>!, _ aobj: UnsafeMutablePointer<ASN1_OBJECT>!, _ ptype: Int32, _ pval: UnsafeMutableRawPointer!) -> Int32
public func X509_ALGOR_get0(_ paobj: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OBJECT>?>!, _ pptype: UnsafeMutablePointer<Int32>!, _ ppval: UnsafeMutablePointer<UnsafeMutableRawPointer?>!, _ algor: UnsafeMutablePointer<X509_ALGOR>!)
public func X509_ALGOR_set_md(_ alg: UnsafeMutablePointer<X509_ALGOR>!, _ md: UnsafePointer<EVP_MD>!)
public func X509_ALGOR_cmp(_ a: UnsafePointer<X509_ALGOR>!, _ b: UnsafePointer<X509_ALGOR>!) -> Int32

public func X509_NAME_dup(_ xn: UnsafeMutablePointer<X509_NAME>!) -> UnsafeMutablePointer<X509_NAME>!
public func X509_NAME_ENTRY_dup(_ ne: UnsafeMutablePointer<X509_NAME_ENTRY>!) -> UnsafeMutablePointer<X509_NAME_ENTRY>!

public func X509_cmp_time(_ s: UnsafePointer<ASN1_TIME>!, _ t: UnsafeMutablePointer<time_t>!) -> Int32
public func X509_cmp_current_time(_ s: UnsafePointer<ASN1_TIME>!) -> Int32
public func X509_time_adj(_ s: UnsafeMutablePointer<ASN1_TIME>!, _ adj: Int, _ t: UnsafeMutablePointer<time_t>!) -> UnsafeMutablePointer<ASN1_TIME>!
public func X509_time_adj_ex(_ s: UnsafeMutablePointer<ASN1_TIME>!, _ offset_day: Int32, _ offset_sec: Int, _ t: UnsafeMutablePointer<time_t>!) -> UnsafeMutablePointer<ASN1_TIME>!
public func X509_gmtime_adj(_ s: UnsafeMutablePointer<ASN1_TIME>!, _ adj: Int) -> UnsafeMutablePointer<ASN1_TIME>!

public func X509_get_default_cert_area() -> UnsafePointer<Int8>!
public func X509_get_default_cert_dir() -> UnsafePointer<Int8>!
public func X509_get_default_cert_file() -> UnsafePointer<Int8>!
public func X509_get_default_cert_dir_env() -> UnsafePointer<Int8>!
public func X509_get_default_cert_file_env() -> UnsafePointer<Int8>!
public func X509_get_default_private_dir() -> UnsafePointer<Int8>!

public func X509_to_X509_REQ(_ x: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ md: UnsafePointer<EVP_MD>!) -> UnsafeMutablePointer<X509_REQ>!
public func X509_REQ_to_X509(_ r: UnsafeMutablePointer<X509_REQ>!, _ days: Int32, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> UnsafeMutablePointer<X509>!

public func X509_ALGOR_new() -> UnsafeMutablePointer<X509_ALGOR>!

public func X509_ALGOR_free(_ a: UnsafeMutablePointer<X509_ALGOR>!)

public func d2i_X509_ALGOR(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGOR>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_ALGOR>!

public func i2d_X509_ALGOR(_ a: UnsafeMutablePointer<X509_ALGOR>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func d2i_X509_ALGORS(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGORS>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_ALGORS>!

public func i2d_X509_ALGORS(_ a: UnsafeMutablePointer<X509_ALGORS>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_VAL_new() -> UnsafeMutablePointer<X509_VAL>!

public func X509_VAL_free(_ a: UnsafeMutablePointer<X509_VAL>!)

public func d2i_X509_VAL(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_VAL>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_VAL>!

public func i2d_X509_VAL(_ a: UnsafeMutablePointer<X509_VAL>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_PUBKEY_new() -> UnsafeMutablePointer<X509_PUBKEY>!

public func X509_PUBKEY_free(_ a: UnsafeMutablePointer<X509_PUBKEY>!)

public func d2i_X509_PUBKEY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_PUBKEY>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_PUBKEY>!

public func i2d_X509_PUBKEY(_ a: UnsafeMutablePointer<X509_PUBKEY>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_PUBKEY_set(_ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_PUBKEY>?>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func X509_PUBKEY_get(_ key: UnsafeMutablePointer<X509_PUBKEY>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func X509_get_pubkey_parameters(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ chain: UnsafeMutablePointer<stack_st_X509>!) -> Int32
public func i2d_PUBKEY(_ a: UnsafeMutablePointer<EVP_PKEY>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_PUBKEY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<EVP_PKEY>!

public func i2d_RSA_PUBKEY(_ a: UnsafeMutablePointer<RSA>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_RSA_PUBKEY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<RSA>!

public func i2d_DSA_PUBKEY(_ a: UnsafeMutablePointer<DSA>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_DSA_PUBKEY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<DSA>!

public func i2d_EC_PUBKEY(_ a: OpaquePointer!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_EC_PUBKEY(_ a: UnsafeMutablePointer<OpaquePointer?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> OpaquePointer!

public func X509_SIG_new() -> UnsafeMutablePointer<X509_SIG>!

public func X509_SIG_free(_ a: UnsafeMutablePointer<X509_SIG>!)

public func d2i_X509_SIG(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_SIG>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_SIG>!

public func i2d_X509_SIG(_ a: UnsafeMutablePointer<X509_SIG>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_REQ_INFO_new() -> UnsafeMutablePointer<X509_REQ_INFO>!

public func X509_REQ_INFO_free(_ a: UnsafeMutablePointer<X509_REQ_INFO>!)

public func d2i_X509_REQ_INFO(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_REQ_INFO>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_REQ_INFO>!

public func i2d_X509_REQ_INFO(_ a: UnsafeMutablePointer<X509_REQ_INFO>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_REQ_new() -> UnsafeMutablePointer<X509_REQ>!

public func X509_REQ_free(_ a: UnsafeMutablePointer<X509_REQ>!)

public func d2i_X509_REQ(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_REQ>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_REQ>!

public func i2d_X509_REQ(_ a: UnsafeMutablePointer<X509_REQ>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_ATTRIBUTE_new() -> UnsafeMutablePointer<X509_ATTRIBUTE>!

public func X509_ATTRIBUTE_free(_ a: UnsafeMutablePointer<X509_ATTRIBUTE>!)

public func d2i_X509_ATTRIBUTE(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_ATTRIBUTE>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_ATTRIBUTE>!

public func i2d_X509_ATTRIBUTE(_ a: UnsafeMutablePointer<X509_ATTRIBUTE>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_ATTRIBUTE_create(_ nid: Int32, _ atrtype: Int32, _ value: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_ATTRIBUTE>!

public func X509_EXTENSION_new() -> UnsafeMutablePointer<X509_EXTENSION>!

public func X509_EXTENSION_free(_ a: UnsafeMutablePointer<X509_EXTENSION>!)

public func d2i_X509_EXTENSION(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_EXTENSION>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_EXTENSION>!

public func i2d_X509_EXTENSION(_ a: UnsafeMutablePointer<X509_EXTENSION>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func d2i_X509_EXTENSIONS(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_EXTENSIONS>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_EXTENSIONS>!

public func i2d_X509_EXTENSIONS(_ a: UnsafeMutablePointer<X509_EXTENSIONS>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_NAME_ENTRY_new() -> UnsafeMutablePointer<X509_NAME_ENTRY>!

public func X509_NAME_ENTRY_free(_ a: UnsafeMutablePointer<X509_NAME_ENTRY>!)

public func d2i_X509_NAME_ENTRY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_NAME_ENTRY>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_NAME_ENTRY>!

public func i2d_X509_NAME_ENTRY(_ a: UnsafeMutablePointer<X509_NAME_ENTRY>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_NAME_new() -> UnsafeMutablePointer<X509_NAME>!

public func X509_NAME_free(_ a: UnsafeMutablePointer<X509_NAME>!)

public func d2i_X509_NAME(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_NAME>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_NAME>!

public func i2d_X509_NAME(_ a: UnsafeMutablePointer<X509_NAME>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_NAME_set(_ xn: UnsafeMutablePointer<UnsafeMutablePointer<X509_NAME>?>!, _ name: UnsafeMutablePointer<X509_NAME>!) -> Int32

public func X509_CINF_new() -> UnsafeMutablePointer<X509_CINF>!

public func X509_CINF_free(_ a: UnsafeMutablePointer<X509_CINF>!)

public func d2i_X509_CINF(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_CINF>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_CINF>!

public func i2d_X509_CINF(_ a: UnsafeMutablePointer<X509_CINF>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_new() -> UnsafeMutablePointer<X509>!

public func X509_free(_ a: UnsafeMutablePointer<X509>!)

public func d2i_X509(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509>!

public func i2d_X509(_ a: UnsafeMutablePointer<X509>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_CERT_AUX_new() -> UnsafeMutablePointer<X509_CERT_AUX>!

public func X509_CERT_AUX_free(_ a: UnsafeMutablePointer<X509_CERT_AUX>!)

public func d2i_X509_CERT_AUX(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_CERT_AUX>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_CERT_AUX>!

public func i2d_X509_CERT_AUX(_ a: UnsafeMutablePointer<X509_CERT_AUX>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_CERT_PAIR_new() -> UnsafeMutablePointer<X509_CERT_PAIR>!

public func X509_CERT_PAIR_free(_ a: UnsafeMutablePointer<X509_CERT_PAIR>!)

public func d2i_X509_CERT_PAIR(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_CERT_PAIR>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_CERT_PAIR>!

public func i2d_X509_CERT_PAIR(_ a: UnsafeMutablePointer<X509_CERT_PAIR>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32
public func X509_set_ex_data(_ r: UnsafeMutablePointer<X509>!, _ idx: Int32, _ arg: UnsafeMutableRawPointer!) -> Int32
public func X509_get_ex_data(_ r: UnsafeMutablePointer<X509>!, _ idx: Int32) -> UnsafeMutableRawPointer!
public func i2d_X509_AUX(_ a: UnsafeMutablePointer<X509>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_X509_AUX(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<X509>!

public func i2d_re_X509_tbs(_ x: UnsafeMutablePointer<X509>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_get0_signature(_ psig: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_BIT_STRING>?>!, _ palg: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGOR>?>!, _ x: UnsafePointer<X509>!)
public func X509_get_signature_nid(_ x: UnsafePointer<X509>!) -> Int32

public func X509_alias_set1(_ x: UnsafeMutablePointer<X509>!, _ name: UnsafeMutablePointer<UInt8>!, _ len: Int32) -> Int32
public func X509_keyid_set1(_ x: UnsafeMutablePointer<X509>!, _ id: UnsafeMutablePointer<UInt8>!, _ len: Int32) -> Int32
public func X509_alias_get0(_ x: UnsafeMutablePointer<X509>!, _ len: UnsafeMutablePointer<Int32>!) -> UnsafeMutablePointer<UInt8>!
public func X509_keyid_get0(_ x: UnsafeMutablePointer<X509>!, _ len: UnsafeMutablePointer<Int32>!) -> UnsafeMutablePointer<UInt8>!
public func X509_TRUST_set_default(_ trust: (@escaping @convention(c) (Int32, UnsafeMutablePointer<X509>?, Int32) -> Int32)!) -> (@convention(c) (Int32, UnsafeMutablePointer<X509>?, Int32) -> Int32)!
public func X509_TRUST_set(_ t: UnsafeMutablePointer<Int32>!, _ trust: Int32) -> Int32
public func X509_add1_trust_object(_ x: UnsafeMutablePointer<X509>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32
public func X509_add1_reject_object(_ x: UnsafeMutablePointer<X509>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32
public func X509_trust_clear(_ x: UnsafeMutablePointer<X509>!)
public func X509_reject_clear(_ x: UnsafeMutablePointer<X509>!)

public func X509_REVOKED_new() -> UnsafeMutablePointer<X509_REVOKED>!

public func X509_REVOKED_free(_ a: UnsafeMutablePointer<X509_REVOKED>!)

public func d2i_X509_REVOKED(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_REVOKED>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_REVOKED>!

public func i2d_X509_REVOKED(_ a: UnsafeMutablePointer<X509_REVOKED>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_CRL_INFO_new() -> UnsafeMutablePointer<X509_CRL_INFO>!

public func X509_CRL_INFO_free(_ a: UnsafeMutablePointer<X509_CRL_INFO>!)

public func d2i_X509_CRL_INFO(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL_INFO>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_CRL_INFO>!

public func i2d_X509_CRL_INFO(_ a: UnsafeMutablePointer<X509_CRL_INFO>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_CRL_new() -> UnsafeMutablePointer<X509_CRL>!

public func X509_CRL_free(_ a: UnsafeMutablePointer<X509_CRL>!)

public func d2i_X509_CRL(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<X509_CRL>!

public func i2d_X509_CRL(_ a: UnsafeMutablePointer<X509_CRL>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_CRL_add0_revoked(_ crl: UnsafeMutablePointer<X509_CRL>!, _ rev: UnsafeMutablePointer<X509_REVOKED>!) -> Int32
public func X509_CRL_get0_by_serial(_ crl: UnsafeMutablePointer<X509_CRL>!, _ ret: UnsafeMutablePointer<UnsafeMutablePointer<X509_REVOKED>?>!, _ serial: UnsafeMutablePointer<ASN1_INTEGER>!) -> Int32
public func X509_CRL_get0_by_cert(_ crl: UnsafeMutablePointer<X509_CRL>!, _ ret: UnsafeMutablePointer<UnsafeMutablePointer<X509_REVOKED>?>!, _ x: UnsafeMutablePointer<X509>!) -> Int32

public func X509_PKEY_new() -> UnsafeMutablePointer<X509_PKEY>!
public func X509_PKEY_free(_ a: UnsafeMutablePointer<X509_PKEY>!)
public func i2d_X509_PKEY(_ a: UnsafeMutablePointer<X509_PKEY>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func d2i_X509_PKEY(_ a: UnsafeMutablePointer<UnsafeMutablePointer<X509_PKEY>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<X509_PKEY>!

public func NETSCAPE_SPKI_new() -> UnsafeMutablePointer<NETSCAPE_SPKI>!

public func NETSCAPE_SPKI_free(_ a: UnsafeMutablePointer<NETSCAPE_SPKI>!)

public func d2i_NETSCAPE_SPKI(_ a: UnsafeMutablePointer<UnsafeMutablePointer<NETSCAPE_SPKI>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<NETSCAPE_SPKI>!

public func i2d_NETSCAPE_SPKI(_ a: UnsafeMutablePointer<NETSCAPE_SPKI>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func NETSCAPE_SPKAC_new() -> UnsafeMutablePointer<NETSCAPE_SPKAC>!

public func NETSCAPE_SPKAC_free(_ a: UnsafeMutablePointer<NETSCAPE_SPKAC>!)

public func d2i_NETSCAPE_SPKAC(_ a: UnsafeMutablePointer<UnsafeMutablePointer<NETSCAPE_SPKAC>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<NETSCAPE_SPKAC>!

public func i2d_NETSCAPE_SPKAC(_ a: UnsafeMutablePointer<NETSCAPE_SPKAC>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func NETSCAPE_CERT_SEQUENCE_new() -> UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!

public func NETSCAPE_CERT_SEQUENCE_free(_ a: UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!)

public func d2i_NETSCAPE_CERT_SEQUENCE(_ a: UnsafeMutablePointer<UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!

public func i2d_NETSCAPE_CERT_SEQUENCE(_ a: UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func X509_INFO_new() -> UnsafeMutablePointer<X509_INFO>!
public func X509_INFO_free(_ a: UnsafeMutablePointer<X509_INFO>!)
public func X509_NAME_oneline(_ a: UnsafeMutablePointer<X509_NAME>!, _ buf: UnsafeMutablePointer<Int8>!, _ size: Int32) -> UnsafeMutablePointer<Int8>!

public func ASN1_verify(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ algor1: UnsafeMutablePointer<X509_ALGOR>!, _ signature: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ data: UnsafeMutablePointer<Int8>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func ASN1_digest(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ type: UnsafePointer<EVP_MD>!, _ data: UnsafeMutablePointer<Int8>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32

public func ASN1_sign(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ algor1: UnsafeMutablePointer<X509_ALGOR>!, _ algor2: UnsafeMutablePointer<X509_ALGOR>!, _ signature: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ data: UnsafeMutablePointer<Int8>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ type: UnsafePointer<EVP_MD>!) -> Int32

public func ASN1_item_digest(_ it: OpaquePointer!, _ type: UnsafePointer<EVP_MD>!, _ data: UnsafeMutableRawPointer!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32

public func ASN1_item_verify(_ it: OpaquePointer!, _ algor1: UnsafeMutablePointer<X509_ALGOR>!, _ signature: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ data: UnsafeMutableRawPointer!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func ASN1_item_sign(_ it: OpaquePointer!, _ algor1: UnsafeMutablePointer<X509_ALGOR>!, _ algor2: UnsafeMutablePointer<X509_ALGOR>!, _ signature: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ data: UnsafeMutableRawPointer!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ type: UnsafePointer<EVP_MD>!) -> Int32
public func ASN1_item_sign_ctx(_ it: OpaquePointer!, _ algor1: UnsafeMutablePointer<X509_ALGOR>!, _ algor2: UnsafeMutablePointer<X509_ALGOR>!, _ signature: UnsafeMutablePointer<ASN1_BIT_STRING>!, _ asn: UnsafeMutableRawPointer!, _ ctx: UnsafeMutablePointer<EVP_MD_CTX>!) -> Int32

public func X509_set_version(_ x: UnsafeMutablePointer<X509>!, _ version: Int) -> Int32
public func X509_set_serialNumber(_ x: UnsafeMutablePointer<X509>!, _ serial: UnsafeMutablePointer<ASN1_INTEGER>!) -> Int32
public func X509_get_serialNumber(_ x: UnsafeMutablePointer<X509>!) -> UnsafeMutablePointer<ASN1_INTEGER>!
public func X509_set_issuer_name(_ x: UnsafeMutablePointer<X509>!, _ name: UnsafeMutablePointer<X509_NAME>!) -> Int32
public func X509_get_issuer_name(_ a: UnsafeMutablePointer<X509>!) -> UnsafeMutablePointer<X509_NAME>!
public func X509_set_subject_name(_ x: UnsafeMutablePointer<X509>!, _ name: UnsafeMutablePointer<X509_NAME>!) -> Int32
public func X509_get_subject_name(_ a: UnsafeMutablePointer<X509>!) -> UnsafeMutablePointer<X509_NAME>!
public func X509_set_notBefore(_ x: UnsafeMutablePointer<X509>!, _ tm: UnsafePointer<ASN1_TIME>!) -> Int32
public func X509_set_notAfter(_ x: UnsafeMutablePointer<X509>!, _ tm: UnsafePointer<ASN1_TIME>!) -> Int32
public func X509_set_pubkey(_ x: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func X509_get_pubkey(_ x: UnsafeMutablePointer<X509>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func X509_get0_pubkey_bitstr(_ x: UnsafePointer<X509>!) -> UnsafeMutablePointer<ASN1_BIT_STRING>!
public func X509_certificate_type(_ x: UnsafeMutablePointer<X509>!, _ pubkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32 /* optional */

public func X509_REQ_set_version(_ x: UnsafeMutablePointer<X509_REQ>!, _ version: Int) -> Int32
public func X509_REQ_set_subject_name(_ req: UnsafeMutablePointer<X509_REQ>!, _ name: UnsafeMutablePointer<X509_NAME>!) -> Int32
public func X509_REQ_set_pubkey(_ x: UnsafeMutablePointer<X509_REQ>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func X509_REQ_get_pubkey(_ req: UnsafeMutablePointer<X509_REQ>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func X509_REQ_extension_nid(_ nid: Int32) -> Int32
public func X509_REQ_get_extension_nids() -> UnsafeMutablePointer<Int32>!
public func X509_REQ_set_extension_nids(_ nids: UnsafeMutablePointer<Int32>!)
public func X509_REQ_get_extensions(_ req: UnsafeMutablePointer<X509_REQ>!) -> UnsafeMutablePointer<stack_st_X509_EXTENSION>!
public func X509_REQ_add_extensions_nid(_ req: UnsafeMutablePointer<X509_REQ>!, _ exts: UnsafeMutablePointer<stack_st_X509_EXTENSION>!, _ nid: Int32) -> Int32
public func X509_REQ_add_extensions(_ req: UnsafeMutablePointer<X509_REQ>!, _ exts: UnsafeMutablePointer<stack_st_X509_EXTENSION>!) -> Int32
public func X509_REQ_get_attr_count(_ req: UnsafePointer<X509_REQ>!) -> Int32
public func X509_REQ_get_attr_by_NID(_ req: UnsafePointer<X509_REQ>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func X509_REQ_get_attr_by_OBJ(_ req: UnsafePointer<X509_REQ>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func X509_REQ_get_attr(_ req: UnsafePointer<X509_REQ>!, _ loc: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509_REQ_delete_attr(_ req: UnsafeMutablePointer<X509_REQ>!, _ loc: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509_REQ_add1_attr(_ req: UnsafeMutablePointer<X509_REQ>!, _ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!) -> Int32
public func X509_REQ_add1_attr_by_OBJ(_ req: UnsafeMutablePointer<X509_REQ>!, _ obj: UnsafePointer<ASN1_OBJECT>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> Int32
public func X509_REQ_add1_attr_by_NID(_ req: UnsafeMutablePointer<X509_REQ>!, _ nid: Int32, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> Int32
public func X509_REQ_add1_attr_by_txt(_ req: UnsafeMutablePointer<X509_REQ>!, _ attrname: UnsafePointer<Int8>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> Int32

public func X509_CRL_set_version(_ x: UnsafeMutablePointer<X509_CRL>!, _ version: Int) -> Int32
public func X509_CRL_set_issuer_name(_ x: UnsafeMutablePointer<X509_CRL>!, _ name: UnsafeMutablePointer<X509_NAME>!) -> Int32
public func X509_CRL_set_lastUpdate(_ x: UnsafeMutablePointer<X509_CRL>!, _ tm: UnsafePointer<ASN1_TIME>!) -> Int32
public func X509_CRL_set_nextUpdate(_ x: UnsafeMutablePointer<X509_CRL>!, _ tm: UnsafePointer<ASN1_TIME>!) -> Int32
public func X509_CRL_sort(_ crl: UnsafeMutablePointer<X509_CRL>!) -> Int32

public func X509_REVOKED_set_serialNumber(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ serial: UnsafeMutablePointer<ASN1_INTEGER>!) -> Int32
public func X509_REVOKED_set_revocationDate(_ r: UnsafeMutablePointer<X509_REVOKED>!, _ tm: UnsafeMutablePointer<ASN1_TIME>!) -> Int32

public func X509_CRL_diff(_ base: UnsafeMutablePointer<X509_CRL>!, _ newer: UnsafeMutablePointer<X509_CRL>!, _ skey: UnsafeMutablePointer<EVP_PKEY>!, _ md: UnsafePointer<EVP_MD>!, _ flags: UInt32) -> UnsafeMutablePointer<X509_CRL>!

public func X509_REQ_check_private_key(_ x509: UnsafeMutablePointer<X509_REQ>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func X509_check_private_key(_ x509: UnsafeMutablePointer<X509>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func X509_chain_check_suiteb(_ perror_depth: UnsafeMutablePointer<Int32>!, _ x: UnsafeMutablePointer<X509>!, _ chain: UnsafeMutablePointer<stack_st_X509>!, _ flags: UInt) -> Int32
public func X509_CRL_check_suiteb(_ crl: UnsafeMutablePointer<X509_CRL>!, _ pk: UnsafeMutablePointer<EVP_PKEY>!, _ flags: UInt) -> Int32
public func X509_chain_up_ref(_ chain: UnsafeMutablePointer<stack_st_X509>!) -> UnsafeMutablePointer<stack_st_X509>!

public func X509_issuer_and_serial_cmp(_ a: UnsafePointer<X509>!, _ b: UnsafePointer<X509>!) -> Int32
public func X509_issuer_and_serial_hash(_ a: UnsafeMutablePointer<X509>!) -> UInt

public func X509_issuer_name_cmp(_ a: UnsafePointer<X509>!, _ b: UnsafePointer<X509>!) -> Int32
public func X509_issuer_name_hash(_ a: UnsafeMutablePointer<X509>!) -> UInt

public func X509_subject_name_cmp(_ a: UnsafePointer<X509>!, _ b: UnsafePointer<X509>!) -> Int32
public func X509_subject_name_hash(_ x: UnsafeMutablePointer<X509>!) -> UInt

public func X509_issuer_name_hash_old(_ a: UnsafeMutablePointer<X509>!) -> UInt
public func X509_subject_name_hash_old(_ x: UnsafeMutablePointer<X509>!) -> UInt

public func X509_cmp(_ a: UnsafePointer<X509>!, _ b: UnsafePointer<X509>!) -> Int32
public func X509_NAME_cmp(_ a: UnsafePointer<X509_NAME>!, _ b: UnsafePointer<X509_NAME>!) -> Int32
public func X509_NAME_hash(_ x: UnsafeMutablePointer<X509_NAME>!) -> UInt
public func X509_NAME_hash_old(_ x: UnsafeMutablePointer<X509_NAME>!) -> UInt

public func X509_CRL_cmp(_ a: UnsafePointer<X509_CRL>!, _ b: UnsafePointer<X509_CRL>!) -> Int32
public func X509_CRL_match(_ a: UnsafePointer<X509_CRL>!, _ b: UnsafePointer<X509_CRL>!) -> Int32

public func X509_print_ex_fp(_ bp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509>!, _ nmflag: UInt, _ cflag: UInt) -> Int32
public func X509_print_fp(_ bp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509>!) -> Int32
public func X509_CRL_print_fp(_ bp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509_CRL>!) -> Int32
public func X509_REQ_print_fp(_ bp: UnsafeMutablePointer<FILE>!, _ req: UnsafeMutablePointer<X509_REQ>!) -> Int32
public func X509_NAME_print_ex_fp(_ fp: UnsafeMutablePointer<FILE>!, _ nm: UnsafeMutablePointer<X509_NAME>!, _ indent: Int32, _ flags: UInt) -> Int32

public func X509_NAME_print(_ bp: UnsafeMutablePointer<BIO>!, _ name: UnsafeMutablePointer<X509_NAME>!, _ obase: Int32) -> Int32
public func X509_NAME_print_ex(_ out: UnsafeMutablePointer<BIO>!, _ nm: UnsafeMutablePointer<X509_NAME>!, _ indent: Int32, _ flags: UInt) -> Int32
public func X509_print_ex(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509>!, _ nmflag: UInt, _ cflag: UInt) -> Int32
public func X509_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509>!) -> Int32
public func X509_ocspid_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509>!) -> Int32
public func X509_CERT_AUX_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_CERT_AUX>!, _ indent: Int32) -> Int32
public func X509_CRL_print(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_CRL>!) -> Int32
public func X509_REQ_print_ex(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_REQ>!, _ nmflag: UInt, _ cflag: UInt) -> Int32
public func X509_REQ_print(_ bp: UnsafeMutablePointer<BIO>!, _ req: UnsafeMutablePointer<X509_REQ>!) -> Int32

public func X509_NAME_entry_count(_ name: UnsafeMutablePointer<X509_NAME>!) -> Int32
public func X509_NAME_get_text_by_NID(_ name: UnsafeMutablePointer<X509_NAME>!, _ nid: Int32, _ buf: UnsafeMutablePointer<Int8>!, _ len: Int32) -> Int32
public func X509_NAME_get_text_by_OBJ(_ name: UnsafeMutablePointer<X509_NAME>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ buf: UnsafeMutablePointer<Int8>!, _ len: Int32) -> Int32

/*
 * NOTE: you should be passsing -1, not 0 as lastpos.  The functions that use
 * lastpos, search after that position on.
 */
public func X509_NAME_get_index_by_NID(_ name: UnsafeMutablePointer<X509_NAME>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func X509_NAME_get_index_by_OBJ(_ name: UnsafeMutablePointer<X509_NAME>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func X509_NAME_get_entry(_ name: UnsafeMutablePointer<X509_NAME>!, _ loc: Int32) -> UnsafeMutablePointer<X509_NAME_ENTRY>!
public func X509_NAME_delete_entry(_ name: UnsafeMutablePointer<X509_NAME>!, _ loc: Int32) -> UnsafeMutablePointer<X509_NAME_ENTRY>!
public func X509_NAME_add_entry(_ name: UnsafeMutablePointer<X509_NAME>!, _ ne: UnsafeMutablePointer<X509_NAME_ENTRY>!, _ loc: Int32, _ set: Int32) -> Int32
public func X509_NAME_add_entry_by_OBJ(_ name: UnsafeMutablePointer<X509_NAME>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ type: Int32, _ bytes: UnsafeMutablePointer<UInt8>!, _ len: Int32, _ loc: Int32, _ set: Int32) -> Int32
public func X509_NAME_add_entry_by_NID(_ name: UnsafeMutablePointer<X509_NAME>!, _ nid: Int32, _ type: Int32, _ bytes: UnsafeMutablePointer<UInt8>!, _ len: Int32, _ loc: Int32, _ set: Int32) -> Int32
public func X509_NAME_ENTRY_create_by_txt(_ ne: UnsafeMutablePointer<UnsafeMutablePointer<X509_NAME_ENTRY>?>!, _ field: UnsafePointer<Int8>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> UnsafeMutablePointer<X509_NAME_ENTRY>!
public func X509_NAME_ENTRY_create_by_NID(_ ne: UnsafeMutablePointer<UnsafeMutablePointer<X509_NAME_ENTRY>?>!, _ nid: Int32, _ type: Int32, _ bytes: UnsafeMutablePointer<UInt8>!, _ len: Int32) -> UnsafeMutablePointer<X509_NAME_ENTRY>!
public func X509_NAME_add_entry_by_txt(_ name: UnsafeMutablePointer<X509_NAME>!, _ field: UnsafePointer<Int8>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32, _ loc: Int32, _ set: Int32) -> Int32
public func X509_NAME_ENTRY_create_by_OBJ(_ ne: UnsafeMutablePointer<UnsafeMutablePointer<X509_NAME_ENTRY>?>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> UnsafeMutablePointer<X509_NAME_ENTRY>!
public func X509_NAME_ENTRY_set_object(_ ne: UnsafeMutablePointer<X509_NAME_ENTRY>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32
public func X509_NAME_ENTRY_set_data(_ ne: UnsafeMutablePointer<X509_NAME_ENTRY>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> Int32
public func X509_NAME_ENTRY_get_object(_ ne: UnsafeMutablePointer<X509_NAME_ENTRY>!) -> UnsafeMutablePointer<ASN1_OBJECT>!
public func X509_NAME_ENTRY_get_data(_ ne: UnsafeMutablePointer<X509_NAME_ENTRY>!) -> UnsafeMutablePointer<ASN1_STRING>!

public func X509v3_get_ext_count(_ x: UnsafePointer<stack_st_X509_EXTENSION>!) -> Int32
public func X509v3_get_ext_by_NID(_ x: UnsafePointer<stack_st_X509_EXTENSION>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func X509v3_get_ext_by_OBJ(_ x: UnsafePointer<stack_st_X509_EXTENSION>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func X509v3_get_ext_by_critical(_ x: UnsafePointer<stack_st_X509_EXTENSION>!, _ crit: Int32, _ lastpos: Int32) -> Int32
public func X509v3_get_ext(_ x: UnsafePointer<stack_st_X509_EXTENSION>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509v3_delete_ext(_ x: UnsafeMutablePointer<stack_st_X509_EXTENSION>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509v3_add_ext(_ x: UnsafeMutablePointer<UnsafeMutablePointer<stack_st_X509_EXTENSION>?>!, _ ex: UnsafeMutablePointer<X509_EXTENSION>!, _ loc: Int32) -> UnsafeMutablePointer<stack_st_X509_EXTENSION>!

public func X509_get_ext_count(_ x: UnsafeMutablePointer<X509>!) -> Int32
public func X509_get_ext_by_NID(_ x: UnsafeMutablePointer<X509>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func X509_get_ext_by_OBJ(_ x: UnsafeMutablePointer<X509>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func X509_get_ext_by_critical(_ x: UnsafeMutablePointer<X509>!, _ crit: Int32, _ lastpos: Int32) -> Int32
public func X509_get_ext(_ x: UnsafeMutablePointer<X509>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_delete_ext(_ x: UnsafeMutablePointer<X509>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_add_ext(_ x: UnsafeMutablePointer<X509>!, _ ex: UnsafeMutablePointer<X509_EXTENSION>!, _ loc: Int32) -> Int32
public func X509_get_ext_d2i(_ x: UnsafeMutablePointer<X509>!, _ nid: Int32, _ crit: UnsafeMutablePointer<Int32>!, _ idx: UnsafeMutablePointer<Int32>!) -> UnsafeMutableRawPointer!
public func X509_add1_ext_i2d(_ x: UnsafeMutablePointer<X509>!, _ nid: Int32, _ value: UnsafeMutableRawPointer!, _ crit: Int32, _ flags: UInt) -> Int32

public func X509_CRL_get_ext_count(_ x: UnsafeMutablePointer<X509_CRL>!) -> Int32
public func X509_CRL_get_ext_by_NID(_ x: UnsafeMutablePointer<X509_CRL>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func X509_CRL_get_ext_by_OBJ(_ x: UnsafeMutablePointer<X509_CRL>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func X509_CRL_get_ext_by_critical(_ x: UnsafeMutablePointer<X509_CRL>!, _ crit: Int32, _ lastpos: Int32) -> Int32
public func X509_CRL_get_ext(_ x: UnsafeMutablePointer<X509_CRL>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_CRL_delete_ext(_ x: UnsafeMutablePointer<X509_CRL>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_CRL_add_ext(_ x: UnsafeMutablePointer<X509_CRL>!, _ ex: UnsafeMutablePointer<X509_EXTENSION>!, _ loc: Int32) -> Int32
public func X509_CRL_get_ext_d2i(_ x: UnsafeMutablePointer<X509_CRL>!, _ nid: Int32, _ crit: UnsafeMutablePointer<Int32>!, _ idx: UnsafeMutablePointer<Int32>!) -> UnsafeMutableRawPointer!
public func X509_CRL_add1_ext_i2d(_ x: UnsafeMutablePointer<X509_CRL>!, _ nid: Int32, _ value: UnsafeMutableRawPointer!, _ crit: Int32, _ flags: UInt) -> Int32

public func X509_REVOKED_get_ext_count(_ x: UnsafeMutablePointer<X509_REVOKED>!) -> Int32
public func X509_REVOKED_get_ext_by_NID(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func X509_REVOKED_get_ext_by_OBJ(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func X509_REVOKED_get_ext_by_critical(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ crit: Int32, _ lastpos: Int32) -> Int32
public func X509_REVOKED_get_ext(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_REVOKED_delete_ext(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ loc: Int32) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_REVOKED_add_ext(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ ex: UnsafeMutablePointer<X509_EXTENSION>!, _ loc: Int32) -> Int32
public func X509_REVOKED_get_ext_d2i(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ nid: Int32, _ crit: UnsafeMutablePointer<Int32>!, _ idx: UnsafeMutablePointer<Int32>!) -> UnsafeMutableRawPointer!
public func X509_REVOKED_add1_ext_i2d(_ x: UnsafeMutablePointer<X509_REVOKED>!, _ nid: Int32, _ value: UnsafeMutableRawPointer!, _ crit: Int32, _ flags: UInt) -> Int32

public func X509_EXTENSION_create_by_NID(_ ex: UnsafeMutablePointer<UnsafeMutablePointer<X509_EXTENSION>?>!, _ nid: Int32, _ crit: Int32, _ data: UnsafeMutablePointer<ASN1_OCTET_STRING>!) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_EXTENSION_create_by_OBJ(_ ex: UnsafeMutablePointer<UnsafeMutablePointer<X509_EXTENSION>?>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ crit: Int32, _ data: UnsafeMutablePointer<ASN1_OCTET_STRING>!) -> UnsafeMutablePointer<X509_EXTENSION>!
public func X509_EXTENSION_set_object(_ ex: UnsafeMutablePointer<X509_EXTENSION>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!) -> Int32
public func X509_EXTENSION_set_critical(_ ex: UnsafeMutablePointer<X509_EXTENSION>!, _ crit: Int32) -> Int32
public func X509_EXTENSION_set_data(_ ex: UnsafeMutablePointer<X509_EXTENSION>!, _ data: UnsafeMutablePointer<ASN1_OCTET_STRING>!) -> Int32
public func X509_EXTENSION_get_object(_ ex: UnsafeMutablePointer<X509_EXTENSION>!) -> UnsafeMutablePointer<ASN1_OBJECT>!
public func X509_EXTENSION_get_data(_ ne: UnsafeMutablePointer<X509_EXTENSION>!) -> UnsafeMutablePointer<ASN1_OCTET_STRING>!
public func X509_EXTENSION_get_critical(_ ex: UnsafeMutablePointer<X509_EXTENSION>!) -> Int32

public func X509at_get_attr_count(_ x: UnsafePointer<stack_st_X509_ATTRIBUTE>!) -> Int32
public func X509at_get_attr_by_NID(_ x: UnsafePointer<stack_st_X509_ATTRIBUTE>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func X509at_get_attr_by_OBJ(_ sk: UnsafePointer<stack_st_X509_ATTRIBUTE>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func X509at_get_attr(_ x: UnsafePointer<stack_st_X509_ATTRIBUTE>!, _ loc: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509at_delete_attr(_ x: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!, _ loc: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509at_add1_attr(_ x: UnsafeMutablePointer<UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>?>!, _ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!) -> UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!
public func X509at_add1_attr_by_OBJ(_ x: UnsafeMutablePointer<UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>?>!, _ obj: UnsafePointer<ASN1_OBJECT>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!
public func X509at_add1_attr_by_NID(_ x: UnsafeMutablePointer<UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>?>!, _ nid: Int32, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!
public func X509at_add1_attr_by_txt(_ x: UnsafeMutablePointer<UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>?>!, _ attrname: UnsafePointer<Int8>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!
public func X509at_get0_data_by_OBJ(_ x: UnsafeMutablePointer<stack_st_X509_ATTRIBUTE>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32, _ type: Int32) -> UnsafeMutableRawPointer!
public func X509_ATTRIBUTE_create_by_NID(_ attr: UnsafeMutablePointer<UnsafeMutablePointer<X509_ATTRIBUTE>?>!, _ nid: Int32, _ atrtype: Int32, _ data: UnsafeRawPointer!, _ len: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509_ATTRIBUTE_create_by_OBJ(_ attr: UnsafeMutablePointer<UnsafeMutablePointer<X509_ATTRIBUTE>?>!, _ obj: UnsafePointer<ASN1_OBJECT>!, _ atrtype: Int32, _ data: UnsafeRawPointer!, _ len: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509_ATTRIBUTE_create_by_txt(_ attr: UnsafeMutablePointer<UnsafeMutablePointer<X509_ATTRIBUTE>?>!, _ atrname: UnsafePointer<Int8>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func X509_ATTRIBUTE_set1_object(_ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!, _ obj: UnsafePointer<ASN1_OBJECT>!) -> Int32
public func X509_ATTRIBUTE_set1_data(_ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!, _ attrtype: Int32, _ data: UnsafeRawPointer!, _ len: Int32) -> Int32
public func X509_ATTRIBUTE_get0_data(_ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!, _ idx: Int32, _ atrtype: Int32, _ data: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func X509_ATTRIBUTE_count(_ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!) -> Int32
public func X509_ATTRIBUTE_get0_object(_ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!) -> UnsafeMutablePointer<ASN1_OBJECT>!
public func X509_ATTRIBUTE_get0_type(_ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!, _ idx: Int32) -> UnsafeMutablePointer<ASN1_TYPE>!

public func EVP_PKEY_get_attr_count(_ key: UnsafePointer<EVP_PKEY>!) -> Int32
public func EVP_PKEY_get_attr_by_NID(_ key: UnsafePointer<EVP_PKEY>!, _ nid: Int32, _ lastpos: Int32) -> Int32
public func EVP_PKEY_get_attr_by_OBJ(_ key: UnsafePointer<EVP_PKEY>!, _ obj: UnsafeMutablePointer<ASN1_OBJECT>!, _ lastpos: Int32) -> Int32
public func EVP_PKEY_get_attr(_ key: UnsafePointer<EVP_PKEY>!, _ loc: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func EVP_PKEY_delete_attr(_ key: UnsafeMutablePointer<EVP_PKEY>!, _ loc: Int32) -> UnsafeMutablePointer<X509_ATTRIBUTE>!
public func EVP_PKEY_add1_attr(_ key: UnsafeMutablePointer<EVP_PKEY>!, _ attr: UnsafeMutablePointer<X509_ATTRIBUTE>!) -> Int32
public func EVP_PKEY_add1_attr_by_OBJ(_ key: UnsafeMutablePointer<EVP_PKEY>!, _ obj: UnsafePointer<ASN1_OBJECT>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> Int32
public func EVP_PKEY_add1_attr_by_NID(_ key: UnsafeMutablePointer<EVP_PKEY>!, _ nid: Int32, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> Int32
public func EVP_PKEY_add1_attr_by_txt(_ key: UnsafeMutablePointer<EVP_PKEY>!, _ attrname: UnsafePointer<Int8>!, _ type: Int32, _ bytes: UnsafePointer<UInt8>!, _ len: Int32) -> Int32

public func X509_verify_cert(_ ctx: UnsafeMutablePointer<X509_STORE_CTX>!) -> Int32

/* lookup a cert from a X509 STACK */
public func X509_find_by_issuer_and_serial(_ sk: UnsafeMutablePointer<stack_st_X509>!, _ name: UnsafeMutablePointer<X509_NAME>!, _ serial: UnsafeMutablePointer<ASN1_INTEGER>!) -> UnsafeMutablePointer<X509>!
public func X509_find_by_subject(_ sk: UnsafeMutablePointer<stack_st_X509>!, _ name: UnsafeMutablePointer<X509_NAME>!) -> UnsafeMutablePointer<X509>!

public func PBEPARAM_new() -> UnsafeMutablePointer<PBEPARAM>!

public func PBEPARAM_free(_ a: UnsafeMutablePointer<PBEPARAM>!)

public func d2i_PBEPARAM(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PBEPARAM>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PBEPARAM>!

public func i2d_PBEPARAM(_ a: UnsafeMutablePointer<PBEPARAM>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PBE2PARAM_new() -> UnsafeMutablePointer<PBE2PARAM>!

public func PBE2PARAM_free(_ a: UnsafeMutablePointer<PBE2PARAM>!)

public func d2i_PBE2PARAM(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PBE2PARAM>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PBE2PARAM>!

public func i2d_PBE2PARAM(_ a: UnsafeMutablePointer<PBE2PARAM>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PBKDF2PARAM_new() -> UnsafeMutablePointer<PBKDF2PARAM>!

public func PBKDF2PARAM_free(_ a: UnsafeMutablePointer<PBKDF2PARAM>!)

public func d2i_PBKDF2PARAM(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PBKDF2PARAM>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PBKDF2PARAM>!

public func i2d_PBKDF2PARAM(_ a: UnsafeMutablePointer<PBKDF2PARAM>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func PKCS5_pbe_set0_algor(_ algor: UnsafeMutablePointer<X509_ALGOR>!, _ alg: Int32, _ iter: Int32, _ salt: UnsafePointer<UInt8>!, _ saltlen: Int32) -> Int32

public func PKCS5_pbe_set(_ alg: Int32, _ iter: Int32, _ salt: UnsafePointer<UInt8>!, _ saltlen: Int32) -> UnsafeMutablePointer<X509_ALGOR>!
public func PKCS5_pbe2_set(_ cipher: UnsafePointer<EVP_CIPHER>!, _ iter: Int32, _ salt: UnsafeMutablePointer<UInt8>!, _ saltlen: Int32) -> UnsafeMutablePointer<X509_ALGOR>!
public func PKCS5_pbe2_set_iv(_ cipher: UnsafePointer<EVP_CIPHER>!, _ iter: Int32, _ salt: UnsafeMutablePointer<UInt8>!, _ saltlen: Int32, _ aiv: UnsafeMutablePointer<UInt8>!, _ prf_nid: Int32) -> UnsafeMutablePointer<X509_ALGOR>!

public func PKCS5_pbkdf2_set(_ iter: Int32, _ salt: UnsafeMutablePointer<UInt8>!, _ saltlen: Int32, _ prf_nid: Int32, _ keylen: Int32) -> UnsafeMutablePointer<X509_ALGOR>!

/* PKCS#8 utilities */

public func PKCS8_PRIV_KEY_INFO_new() -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!

public func PKCS8_PRIV_KEY_INFO_free(_ a: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!)

public func d2i_PKCS8_PRIV_KEY_INFO(_ a: UnsafeMutablePointer<UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>?>!, _ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: Int) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!

public func i2d_PKCS8_PRIV_KEY_INFO(_ a: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!, _ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32

public func EVP_PKCS82PKEY(_ p8: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func EVP_PKEY2PKCS8(_ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!
public func EVP_PKEY2PKCS8_broken(_ pkey: UnsafeMutablePointer<EVP_PKEY>!, _ broken: Int32) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!
public func PKCS8_set_broken(_ p8: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!, _ broken: Int32) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!

public func PKCS8_pkey_set0(_ priv: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!, _ aobj: UnsafeMutablePointer<ASN1_OBJECT>!, _ version: Int32, _ ptype: Int32, _ pval: UnsafeMutableRawPointer!, _ penc: UnsafeMutablePointer<UInt8>!, _ penclen: Int32) -> Int32
public func PKCS8_pkey_get0(_ ppkalg: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OBJECT>?>!, _ pk: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ ppklen: UnsafeMutablePointer<Int32>!, _ pa: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGOR>?>!, _ p8: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!) -> Int32

public func X509_PUBKEY_set0_param(_ pub: UnsafeMutablePointer<X509_PUBKEY>!, _ aobj: UnsafeMutablePointer<ASN1_OBJECT>!, _ ptype: Int32, _ pval: UnsafeMutableRawPointer!, _ penc: UnsafeMutablePointer<UInt8>!, _ penclen: Int32) -> Int32
public func X509_PUBKEY_get0_param(_ ppkalg: UnsafeMutablePointer<UnsafeMutablePointer<ASN1_OBJECT>?>!, _ pk: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ ppklen: UnsafeMutablePointer<Int32>!, _ pa: UnsafeMutablePointer<UnsafeMutablePointer<X509_ALGOR>?>!, _ pub: UnsafeMutablePointer<X509_PUBKEY>!) -> Int32

public func X509_check_trust(_ x: UnsafeMutablePointer<X509>!, _ id: Int32, _ flags: Int32) -> Int32
public func X509_TRUST_get_count() -> Int32
public func X509_TRUST_get0(_ idx: Int32) -> UnsafeMutablePointer<X509_TRUST>!
public func X509_TRUST_get_by_id(_ id: Int32) -> Int32
public func X509_TRUST_add(_ id: Int32, _ flags: Int32, _ ck: (@escaping @convention(c) (UnsafeMutablePointer<X509_TRUST>?, UnsafeMutablePointer<X509>?, Int32) -> Int32)!, _ name: UnsafeMutablePointer<Int8>!, _ arg1: Int32, _ arg2: UnsafeMutableRawPointer!) -> Int32
public func X509_TRUST_cleanup()
public func X509_TRUST_get_flags(_ xp: UnsafeMutablePointer<X509_TRUST>!) -> Int32
public func X509_TRUST_get0_name(_ xp: UnsafeMutablePointer<X509_TRUST>!) -> UnsafeMutablePointer<Int8>!
public func X509_TRUST_get_trust(_ xp: UnsafeMutablePointer<X509_TRUST>!) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_X509_strings()

/* Error codes for the X509 functions. */

/* Function codes. */
public var X509_F_ADD_CERT_DIR: Int32 { get }
public var X509_F_BY_FILE_CTRL: Int32 { get }
public var X509_F_CHECK_POLICY: Int32 { get }
public var X509_F_DIR_CTRL: Int32 { get }
public var X509_F_GET_CERT_BY_SUBJECT: Int32 { get }
public var X509_F_NETSCAPE_SPKI_B64_DECODE: Int32 { get }
public var X509_F_NETSCAPE_SPKI_B64_ENCODE: Int32 { get }
public var X509_F_X509AT_ADD1_ATTR: Int32 { get }
public var X509_F_X509V3_ADD_EXT: Int32 { get }
public var X509_F_X509_ATTRIBUTE_CREATE_BY_NID: Int32 { get }
public var X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ: Int32 { get }
public var X509_F_X509_ATTRIBUTE_CREATE_BY_TXT: Int32 { get }
public var X509_F_X509_ATTRIBUTE_GET0_DATA: Int32 { get }
public var X509_F_X509_ATTRIBUTE_SET1_DATA: Int32 { get }
public var X509_F_X509_CHECK_PRIVATE_KEY: Int32 { get }
public var X509_F_X509_CRL_DIFF: Int32 { get }
public var X509_F_X509_CRL_PRINT_FP: Int32 { get }
public var X509_F_X509_EXTENSION_CREATE_BY_NID: Int32 { get }
public var X509_F_X509_EXTENSION_CREATE_BY_OBJ: Int32 { get }
public var X509_F_X509_GET_PUBKEY_PARAMETERS: Int32 { get }
public var X509_F_X509_LOAD_CERT_CRL_FILE: Int32 { get }
public var X509_F_X509_LOAD_CERT_FILE: Int32 { get }
public var X509_F_X509_LOAD_CRL_FILE: Int32 { get }
public var X509_F_X509_NAME_ADD_ENTRY: Int32 { get }
public var X509_F_X509_NAME_ENTRY_CREATE_BY_NID: Int32 { get }
public var X509_F_X509_NAME_ENTRY_CREATE_BY_TXT: Int32 { get }
public var X509_F_X509_NAME_ENTRY_SET_OBJECT: Int32 { get }
public var X509_F_X509_NAME_ONELINE: Int32 { get }
public var X509_F_X509_NAME_PRINT: Int32 { get }
public var X509_F_X509_PRINT_EX_FP: Int32 { get }
public var X509_F_X509_PUBKEY_GET: Int32 { get }
public var X509_F_X509_PUBKEY_SET: Int32 { get }
public var X509_F_X509_REQ_CHECK_PRIVATE_KEY: Int32 { get }
public var X509_F_X509_REQ_PRINT_EX: Int32 { get }
public var X509_F_X509_REQ_PRINT_FP: Int32 { get }
public var X509_F_X509_REQ_TO_X509: Int32 { get }
public var X509_F_X509_STORE_ADD_CERT: Int32 { get }
public var X509_F_X509_STORE_ADD_CRL: Int32 { get }
public var X509_F_X509_STORE_CTX_GET1_ISSUER: Int32 { get }
public var X509_F_X509_STORE_CTX_INIT: Int32 { get }
public var X509_F_X509_STORE_CTX_NEW: Int32 { get }
public var X509_F_X509_STORE_CTX_PURPOSE_INHERIT: Int32 { get }
public var X509_F_X509_TO_X509_REQ: Int32 { get }
public var X509_F_X509_TRUST_ADD: Int32 { get }
public var X509_F_X509_TRUST_SET: Int32 { get }
public var X509_F_X509_VERIFY_CERT: Int32 { get }

/* Reason codes. */
public var X509_R_AKID_MISMATCH: Int32 { get }
public var X509_R_BAD_X509_FILETYPE: Int32 { get }
public var X509_R_BASE64_DECODE_ERROR: Int32 { get }
public var X509_R_CANT_CHECK_DH_KEY: Int32 { get }
public var X509_R_CERT_ALREADY_IN_HASH_TABLE: Int32 { get }
public var X509_R_CRL_ALREADY_DELTA: Int32 { get }
public var X509_R_CRL_VERIFY_FAILURE: Int32 { get }
public var X509_R_ERR_ASN1_LIB: Int32 { get }
public var X509_R_IDP_MISMATCH: Int32 { get }
public var X509_R_INVALID_DIRECTORY: Int32 { get }
public var X509_R_INVALID_FIELD_NAME: Int32 { get }
public var X509_R_INVALID_TRUST: Int32 { get }
public var X509_R_ISSUER_MISMATCH: Int32 { get }
public var X509_R_KEY_TYPE_MISMATCH: Int32 { get }
public var X509_R_KEY_VALUES_MISMATCH: Int32 { get }
public var X509_R_LOADING_CERT_DIR: Int32 { get }
public var X509_R_LOADING_DEFAULTS: Int32 { get }
public var X509_R_METHOD_NOT_SUPPORTED: Int32 { get }
public var X509_R_NEWER_CRL_NOT_NEWER: Int32 { get }
public var X509_R_NO_CERT_SET_FOR_US_TO_VERIFY: Int32 { get }
public var X509_R_NO_CRL_NUMBER: Int32 { get }
public var X509_R_PUBLIC_KEY_DECODE_ERROR: Int32 { get }
public var X509_R_PUBLIC_KEY_ENCODE_ERROR: Int32 { get }
public var X509_R_SHOULD_RETRY: Int32 { get }
public var X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN: Int32 { get }
public var X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY: Int32 { get }
public var X509_R_UNKNOWN_KEY_TYPE: Int32 { get }
public var X509_R_UNKNOWN_NID: Int32 { get }
public var X509_R_UNKNOWN_PURPOSE_ID: Int32 { get }
public var X509_R_UNKNOWN_TRUST_ID: Int32 { get }
public var X509_R_UNSUPPORTED_ALGORITHM: Int32 { get }
public var X509_R_WRONG_LOOKUP_TYPE: Int32 { get }
public var X509_R_WRONG_TYPE: Int32 { get }
/* crypto/pem/pem.h */
/* Copyright (C) 1995-1997 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

public var PEM_BUFSIZE: Int32 { get }

public var PEM_OBJ_UNDEF: Int32 { get }
public var PEM_OBJ_X509: Int32 { get }
public var PEM_OBJ_X509_REQ: Int32 { get }
public var PEM_OBJ_CRL: Int32 { get }
public var PEM_OBJ_SSL_SESSION: Int32 { get }
public var PEM_OBJ_PRIV_KEY: Int32 { get }
public var PEM_OBJ_PRIV_RSA: Int32 { get }
public var PEM_OBJ_PRIV_DSA: Int32 { get }
public var PEM_OBJ_PRIV_DH: Int32 { get }
public var PEM_OBJ_PUB_RSA: Int32 { get }
public var PEM_OBJ_PUB_DSA: Int32 { get }
public var PEM_OBJ_PUB_DH: Int32 { get }
public var PEM_OBJ_DHPARAMS: Int32 { get }
public var PEM_OBJ_DSAPARAMS: Int32 { get }
public var PEM_OBJ_PRIV_RSA_PUBLIC: Int32 { get }
public var PEM_OBJ_PRIV_ECDSA: Int32 { get }
public var PEM_OBJ_PUB_ECDSA: Int32 { get }
public var PEM_OBJ_ECPARAMETERS: Int32 { get }

public var PEM_ERROR: Int32 { get }
public var PEM_DEK_DES_CBC: Int32 { get }
public var PEM_DEK_IDEA_CBC: Int32 { get }
public var PEM_DEK_DES_EDE: Int32 { get }
public var PEM_DEK_DES_ECB: Int32 { get }
public var PEM_DEK_RSA: Int32 { get }
public var PEM_DEK_RSA_MD2: Int32 { get }
public var PEM_DEK_RSA_MD5: Int32 { get }

public var PEM_MD_MD2: Int32 { get }
public var PEM_MD_MD5: Int32 { get }
public var PEM_MD_SHA: Int32 { get }
public var PEM_MD_MD2_RSA: Int32 { get }
public var PEM_MD_MD5_RSA: Int32 { get }
public var PEM_MD_SHA_RSA: Int32 { get }

public var PEM_STRING_X509_OLD: String { get }
public var PEM_STRING_X509: String { get }
public var PEM_STRING_X509_PAIR: String { get }
public var PEM_STRING_X509_TRUSTED: String { get }
public var PEM_STRING_X509_REQ_OLD: String { get }
public var PEM_STRING_X509_REQ: String { get }
public var PEM_STRING_X509_CRL: String { get }
public var PEM_STRING_EVP_PKEY: String { get }
public var PEM_STRING_PUBLIC: String { get }
public var PEM_STRING_RSA: String { get }
public var PEM_STRING_RSA_PUBLIC: String { get }
public var PEM_STRING_DSA: String { get }
public var PEM_STRING_DSA_PUBLIC: String { get }
public var PEM_STRING_PKCS7: String { get }
public var PEM_STRING_PKCS7_SIGNED: String { get }
public var PEM_STRING_PKCS8: String { get }
public var PEM_STRING_PKCS8INF: String { get }
public var PEM_STRING_DHPARAMS: String { get }
public var PEM_STRING_DHXPARAMS: String { get }
public var PEM_STRING_SSL_SESSION: String { get }
public var PEM_STRING_DSAPARAMS: String { get }
public var PEM_STRING_ECDSA_PUBLIC: String { get }
public var PEM_STRING_ECPARAMETERS: String { get }
public var PEM_STRING_ECPRIVATEKEY: String { get }
public var PEM_STRING_PARAMETERS: String { get }
public var PEM_STRING_CMS: String { get }

/*
 * Note that this structure is initialised by PEM_SealInit and cleaned up
 * by PEM_SealFinal (at least for now)
 */
public struct PEM_Encode_Seal_st {

    public var encode: EVP_ENCODE_CTX

    public var md: EVP_MD_CTX

    public var cipher: EVP_CIPHER_CTX

    public init()

    public init(encode: EVP_ENCODE_CTX, md: EVP_MD_CTX, cipher: EVP_CIPHER_CTX)
}
public typealias PEM_ENCODE_SEAL_CTX = PEM_Encode_Seal_st

/* enc_type is one off */
public var PEM_TYPE_ENCRYPTED: Int32 { get }
public var PEM_TYPE_MIC_ONLY: Int32 { get }
public var PEM_TYPE_MIC_CLEAR: Int32 { get }
public var PEM_TYPE_CLEAR: Int32 { get }

public struct pem_recip_st {

    public var name: UnsafeMutablePointer<Int8>!

    public var dn: UnsafeMutablePointer<X509_NAME>!

    public var cipher: Int32

    public var key_enc: Int32

    public init()

    public init(name: UnsafeMutablePointer<Int8>!, dn: UnsafeMutablePointer<X509_NAME>!, cipher: Int32, key_enc: Int32)
}
public typealias PEM_USER = pem_recip_st

/*      char iv[8]; unused and wrong size */

public struct pem_ctx_st {

    /* what type of object */
    public struct __Unnamed_struct_proc_type {

        public var version: Int32

        public var mode: Int32

        public init()

        public init(version: Int32, mode: Int32)
    }

    
    public struct __Unnamed_struct_DEK_info {

        public var cipher: Int32

        public init()

        public init(cipher: Int32)
    }

    public var type: Int32

    public var proc_type: pem_ctx_st.__Unnamed_struct_proc_type

    public var domain: UnsafeMutablePointer<Int8>!

    public var DEK_info: pem_ctx_st.__Unnamed_struct_DEK_info

    
    /*-
    unused, and wrong size
    unsigned char iv[8]; */
    
    public var originator: UnsafeMutablePointer<PEM_USER>!

    
    public var num_recipient: Int32

    public var recipient: UnsafeMutablePointer<UnsafeMutablePointer<PEM_USER>?>!

    /*-
        XXX(ben): don#t think this is used!
            STACK *x509_chain;      / * certificate chain */
    public var md: UnsafeMutablePointer<EVP_MD>! /* signature type */

    
    public var md_enc: Int32 /* is the md encrypted or not? */

    public var md_len: Int32 /* length of md_data */

    public var md_data: UnsafeMutablePointer<Int8>! /* message digest, could be pkey encrypted */

    
    public var dec: UnsafeMutablePointer<EVP_CIPHER>! /* date encryption cipher */

    public var key_len: Int32 /* key length */

    public var key: UnsafeMutablePointer<UInt8>! /* key */

    /*-
      unused, and wrong size
      unsigned char iv[8]; */
    
    public var data_enc: Int32 /* is the data encrypted */

    public var data_len: Int32

    public var data: UnsafeMutablePointer<UInt8>!

    public init()

    public init(type: Int32, proc_type: pem_ctx_st.__Unnamed_struct_proc_type, domain: UnsafeMutablePointer<Int8>!, DEK_info: pem_ctx_st.__Unnamed_struct_DEK_info, originator: UnsafeMutablePointer<PEM_USER>!, num_recipient: Int32, recipient: UnsafeMutablePointer<UnsafeMutablePointer<PEM_USER>?>!, md: UnsafeMutablePointer<EVP_MD>!, md_enc: Int32, md_len: Int32, md_data: UnsafeMutablePointer<Int8>!, dec: UnsafeMutablePointer<EVP_CIPHER>!, key_len: Int32, key: UnsafeMutablePointer<UInt8>!, data_enc: Int32, data_len: Int32, data: UnsafeMutablePointer<UInt8>!)
}
public typealias PEM_CTX = pem_ctx_st

/*
 * These macros make the PEM_read/PEM_write functions easier to maintain and
 * write. Now they are all implemented with either: IMPLEMENT_PEM_rw(...) or
 * IMPLEMENT_PEM_rw_cb(...)
 */

/**/
/**/
/**/
/**/
/**/

/* These are the same except they are for the declarations */

/**/
/**/
/**/

/**/
/**/
/**/
/**/

/* "userdata": new with OpenSSL 0.9.4 */
public typealias pem_password_cb = (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32

/* OpenSSL 0.9.3, 0.9.3a */

public func PEM_get_EVP_CIPHER_INFO(_ header: UnsafeMutablePointer<Int8>!, _ cipher: UnsafeMutablePointer<EVP_CIPHER_INFO>!) -> Int32
public func PEM_do_header(_ cipher: UnsafeMutablePointer<EVP_CIPHER_INFO>!, _ data: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<Int>!, _ callback: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_read_bio(_ bp: UnsafeMutablePointer<BIO>!, _ name: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ header: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ data: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ len: UnsafeMutablePointer<Int>!) -> Int32
public func PEM_write_bio(_ bp: UnsafeMutablePointer<BIO>!, _ name: UnsafePointer<Int8>!, _ hdr: UnsafePointer<Int8>!, _ data: UnsafePointer<UInt8>!, _ len: Int) -> Int32
public func PEM_bytes_read_bio(_ pdata: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ plen: UnsafeMutablePointer<Int>!, _ pnm: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ name: UnsafePointer<Int8>!, _ bp: UnsafeMutablePointer<BIO>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32
public func PEM_ASN1_read_bio(_ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!, _ name: UnsafePointer<Int8>!, _ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutableRawPointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func PEM_ASN1_write_bio(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ name: UnsafePointer<Int8>!, _ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutableRawPointer!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_X509_INFO_read_bio(_ bp: UnsafeMutablePointer<BIO>!, _ sk: UnsafeMutablePointer<stack_st_X509_INFO>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<stack_st_X509_INFO>!
public func PEM_X509_INFO_write_bio(_ bp: UnsafeMutablePointer<BIO>!, _ xi: UnsafeMutablePointer<X509_INFO>!, _ enc: UnsafeMutablePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cd: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_read(_ fp: UnsafeMutablePointer<FILE>!, _ name: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ header: UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>!, _ data: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ len: UnsafeMutablePointer<Int>!) -> Int32
public func PEM_write(_ fp: UnsafeMutablePointer<FILE>!, _ name: UnsafePointer<Int8>!, _ hdr: UnsafePointer<Int8>!, _ data: UnsafePointer<UInt8>!, _ len: Int) -> Int32
public func PEM_ASN1_read(_ d2i: (@escaping @convention(c) (UnsafeMutablePointer<UnsafeMutableRawPointer?>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, Int) -> UnsafeMutableRawPointer?)!, _ name: UnsafePointer<Int8>!, _ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutableRawPointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutableRawPointer!
public func PEM_ASN1_write(_ i2d: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?) -> Int32)!, _ name: UnsafePointer<Int8>!, _ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutableRawPointer!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ callback: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32
public func PEM_X509_INFO_read(_ fp: UnsafeMutablePointer<FILE>!, _ sk: UnsafeMutablePointer<stack_st_X509_INFO>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<stack_st_X509_INFO>!

public func PEM_SealInit(_ ctx: UnsafeMutablePointer<PEM_ENCODE_SEAL_CTX>!, _ type: UnsafeMutablePointer<EVP_CIPHER>!, _ md_type: UnsafeMutablePointer<EVP_MD>!, _ ek: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ ekl: UnsafeMutablePointer<Int32>!, _ iv: UnsafeMutablePointer<UInt8>!, _ pubk: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ npubk: Int32) -> Int32
public func PEM_SealUpdate(_ ctx: UnsafeMutablePointer<PEM_ENCODE_SEAL_CTX>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!, _ in: UnsafeMutablePointer<UInt8>!, _ inl: Int32)
public func PEM_SealFinal(_ ctx: UnsafeMutablePointer<PEM_ENCODE_SEAL_CTX>!, _ sig: UnsafeMutablePointer<UInt8>!, _ sigl: UnsafeMutablePointer<Int32>!, _ out: UnsafeMutablePointer<UInt8>!, _ outl: UnsafeMutablePointer<Int32>!, _ priv: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func PEM_SignInit(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ type: UnsafeMutablePointer<EVP_MD>!)
public func PEM_SignUpdate(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ d: UnsafeMutablePointer<UInt8>!, _ cnt: UInt32)
public func PEM_SignFinal(_ ctx: UnsafeMutablePointer<EVP_MD_CTX>!, _ sigret: UnsafeMutablePointer<UInt8>!, _ siglen: UnsafeMutablePointer<UInt32>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func PEM_def_callback(_ buf: UnsafeMutablePointer<Int8>!, _ num: Int32, _ w: Int32, _ key: UnsafeMutableRawPointer!) -> Int32
public func PEM_proc_type(_ buf: UnsafeMutablePointer<Int8>!, _ type: Int32)
public func PEM_dek_info(_ buf: UnsafeMutablePointer<Int8>!, _ type: UnsafePointer<Int8>!, _ len: Int32, _ str: UnsafeMutablePointer<Int8>!)

public func PEM_read_bio_X509(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509>!

public func PEM_read_X509(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509>!

public func PEM_write_bio_X509(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509>!) -> Int32

public func PEM_write_X509(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509>!) -> Int32

public func PEM_read_bio_X509_AUX(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509>!

public func PEM_read_X509_AUX(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509>!

public func PEM_write_bio_X509_AUX(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509>!) -> Int32

public func PEM_write_X509_AUX(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509>!) -> Int32

public func PEM_read_bio_X509_CERT_PAIR(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_CERT_PAIR>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_CERT_PAIR>!

public func PEM_read_X509_CERT_PAIR(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_CERT_PAIR>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_CERT_PAIR>!

public func PEM_write_bio_X509_CERT_PAIR(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_CERT_PAIR>!) -> Int32

public func PEM_write_X509_CERT_PAIR(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509_CERT_PAIR>!) -> Int32

public func PEM_read_bio_X509_REQ(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_REQ>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_REQ>!

public func PEM_read_X509_REQ(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_REQ>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_REQ>!

public func PEM_write_bio_X509_REQ(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_REQ>!) -> Int32

public func PEM_write_X509_REQ(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509_REQ>!) -> Int32

public func PEM_write_bio_X509_REQ_NEW(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_REQ>!) -> Int32

public func PEM_write_X509_REQ_NEW(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509_REQ>!) -> Int32

public func PEM_read_bio_X509_CRL(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_CRL>!

public func PEM_read_X509_CRL(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_CRL>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_CRL>!

public func PEM_write_bio_X509_CRL(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_CRL>!) -> Int32

public func PEM_write_X509_CRL(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509_CRL>!) -> Int32

public func PEM_read_bio_PKCS7(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<PKCS7>!

public func PEM_read_PKCS7(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<PKCS7>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<PKCS7>!

public func PEM_write_bio_PKCS7(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<PKCS7>!) -> Int32

public func PEM_write_PKCS7(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<PKCS7>!) -> Int32

public func PEM_read_bio_NETSCAPE_CERT_SEQUENCE(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!

public func PEM_read_NETSCAPE_CERT_SEQUENCE(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!

public func PEM_write_bio_NETSCAPE_CERT_SEQUENCE(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!) -> Int32

public func PEM_write_NETSCAPE_CERT_SEQUENCE(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<NETSCAPE_CERT_SEQUENCE>!) -> Int32

public func PEM_read_bio_PKCS8(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_SIG>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_SIG>!

public func PEM_read_PKCS8(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<X509_SIG>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<X509_SIG>!

public func PEM_write_bio_PKCS8(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<X509_SIG>!) -> Int32

public func PEM_write_PKCS8(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<X509_SIG>!) -> Int32

public func PEM_read_bio_PKCS8_PRIV_KEY_INFO(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!

public func PEM_read_PKCS8_PRIV_KEY_INFO(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!

public func PEM_write_bio_PKCS8_PRIV_KEY_INFO(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!) -> Int32

public func PEM_write_PKCS8_PRIV_KEY_INFO(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<PKCS8_PRIV_KEY_INFO>!) -> Int32

public func PEM_read_bio_RSAPrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<RSA>!

public func PEM_read_RSAPrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<RSA>!

public func PEM_write_bio_RSAPrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<RSA>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_write_RSAPrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<RSA>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_read_bio_RSAPublicKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<RSA>!

public func PEM_read_RSAPublicKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<RSA>!

public func PEM_write_bio_RSAPublicKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafePointer<RSA>!) -> Int32

public func PEM_write_RSAPublicKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafePointer<RSA>!) -> Int32

public func PEM_read_bio_RSA_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<RSA>!

public func PEM_read_RSA_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<RSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<RSA>!

public func PEM_write_bio_RSA_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<RSA>!) -> Int32

public func PEM_write_RSA_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<RSA>!) -> Int32

public func PEM_read_bio_DSAPrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DSA>!

public func PEM_read_DSAPrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DSA>!

public func PEM_write_bio_DSAPrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<DSA>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_write_DSAPrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<DSA>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_read_bio_DSA_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DSA>!

public func PEM_read_DSA_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DSA>!

public func PEM_write_bio_DSA_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<DSA>!) -> Int32

public func PEM_write_DSA_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<DSA>!) -> Int32

public func PEM_read_bio_DSAparams(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DSA>!

public func PEM_read_DSAparams(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DSA>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DSA>!

public func PEM_write_bio_DSAparams(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafePointer<DSA>!) -> Int32

public func PEM_write_DSAparams(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafePointer<DSA>!) -> Int32

public func PEM_read_bio_ECPKParameters(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<OpaquePointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> OpaquePointer!

public func PEM_read_ECPKParameters(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<OpaquePointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> OpaquePointer!

public func PEM_write_bio_ECPKParameters(_ bp: UnsafeMutablePointer<BIO>!, _ x: OpaquePointer!) -> Int32

public func PEM_write_ECPKParameters(_ fp: UnsafeMutablePointer<FILE>!, _ x: OpaquePointer!) -> Int32

public func PEM_read_bio_ECPrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<OpaquePointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> OpaquePointer!

public func PEM_read_ECPrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<OpaquePointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> OpaquePointer!

public func PEM_write_bio_ECPrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: OpaquePointer!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_write_ECPrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: OpaquePointer!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_read_bio_EC_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<OpaquePointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> OpaquePointer!

public func PEM_read_EC_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<OpaquePointer?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> OpaquePointer!

public func PEM_write_bio_EC_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: OpaquePointer!) -> Int32

public func PEM_write_EC_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: OpaquePointer!) -> Int32

public func PEM_read_bio_DHparams(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DH>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DH>!

public func PEM_read_DHparams(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<DH>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<DH>!

public func PEM_write_bio_DHparams(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafePointer<DH>!) -> Int32

public func PEM_write_DHparams(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafePointer<DH>!) -> Int32

public func PEM_write_bio_DHxparams(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafePointer<DH>!) -> Int32

public func PEM_write_DHxparams(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafePointer<DH>!) -> Int32

public func PEM_read_bio_PrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func PEM_read_PrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func PEM_write_bio_PrivateKey(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_write_PrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<UInt8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_read_bio_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func PEM_read_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func PEM_write_bio_PUBKEY(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func PEM_write_PUBKEY(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func PEM_write_bio_PKCS8PrivateKey_nid(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ nid: Int32, _ kstr: UnsafeMutablePointer<Int8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32
public func PEM_write_bio_PKCS8PrivateKey(_: UnsafeMutablePointer<BIO>!, _: UnsafeMutablePointer<EVP_PKEY>!, _: UnsafePointer<EVP_CIPHER>!, _: UnsafeMutablePointer<Int8>!, _: Int32, _: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _: UnsafeMutableRawPointer!) -> Int32
public func i2d_PKCS8PrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<Int8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32
public func i2d_PKCS8PrivateKey_nid_bio(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ nid: Int32, _ kstr: UnsafeMutablePointer<Int8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32
public func d2i_PKCS8PrivateKey_bio(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func i2d_PKCS8PrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<Int8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32
public func i2d_PKCS8PrivateKey_nid_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ nid: Int32, _ kstr: UnsafeMutablePointer<Int8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32
public func PEM_write_PKCS8PrivateKey_nid(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ nid: Int32, _ kstr: UnsafeMutablePointer<Int8>!, _ klen: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func d2i_PKCS8PrivateKey_fp(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<EVP_PKEY>!

public func PEM_write_PKCS8PrivateKey(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<EVP_PKEY>!, _ enc: UnsafePointer<EVP_CIPHER>!, _ kstr: UnsafeMutablePointer<Int8>!, _ klen: Int32, _ cd: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

public func PEM_read_bio_Parameters(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func PEM_write_bio_Parameters(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func b2i_PrivateKey(_ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<EVP_PKEY>!
public func b2i_PublicKey(_ in: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<EVP_PKEY>!
public func b2i_PrivateKey_bio(_ in: UnsafeMutablePointer<BIO>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func b2i_PublicKey_bio(_ in: UnsafeMutablePointer<BIO>!) -> UnsafeMutablePointer<EVP_PKEY>!
public func i2b_PrivateKey_bio(_ out: UnsafeMutablePointer<BIO>!, _ pk: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func i2b_PublicKey_bio(_ out: UnsafeMutablePointer<BIO>!, _ pk: UnsafeMutablePointer<EVP_PKEY>!) -> Int32

public func b2i_PVK_bio(_ in: UnsafeMutablePointer<BIO>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<EVP_PKEY>!
public func i2b_PVK_bio(_ out: UnsafeMutablePointer<BIO>!, _ pk: UnsafeMutablePointer<EVP_PKEY>!, _ enclevel: Int32, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_PEM_strings()

/* Error codes for the PEM functions. */

/* Function codes. */
public var PEM_F_B2I_DSS: Int32 { get }
public var PEM_F_B2I_PVK_BIO: Int32 { get }
public var PEM_F_B2I_RSA: Int32 { get }
public var PEM_F_CHECK_BITLEN_DSA: Int32 { get }
public var PEM_F_CHECK_BITLEN_RSA: Int32 { get }
public var PEM_F_D2I_PKCS8PRIVATEKEY_BIO: Int32 { get }
public var PEM_F_D2I_PKCS8PRIVATEKEY_FP: Int32 { get }
public var PEM_F_DO_B2I: Int32 { get }
public var PEM_F_DO_B2I_BIO: Int32 { get }
public var PEM_F_DO_BLOB_HEADER: Int32 { get }
public var PEM_F_DO_PK8PKEY: Int32 { get }
public var PEM_F_DO_PK8PKEY_FP: Int32 { get }
public var PEM_F_DO_PVK_BODY: Int32 { get }
public var PEM_F_DO_PVK_HEADER: Int32 { get }
public var PEM_F_I2B_PVK: Int32 { get }
public var PEM_F_I2B_PVK_BIO: Int32 { get }
public var PEM_F_LOAD_IV: Int32 { get }
public var PEM_F_PEM_ASN1_READ: Int32 { get }
public var PEM_F_PEM_ASN1_READ_BIO: Int32 { get }
public var PEM_F_PEM_ASN1_WRITE: Int32 { get }
public var PEM_F_PEM_ASN1_WRITE_BIO: Int32 { get }
public var PEM_F_PEM_DEF_CALLBACK: Int32 { get }
public var PEM_F_PEM_DO_HEADER: Int32 { get }
public var PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY: Int32 { get }
public var PEM_F_PEM_GET_EVP_CIPHER_INFO: Int32 { get }
public var PEM_F_PEM_PK8PKEY: Int32 { get }
public var PEM_F_PEM_READ: Int32 { get }
public var PEM_F_PEM_READ_BIO: Int32 { get }
public var PEM_F_PEM_READ_BIO_DHPARAMS: Int32 { get }
public var PEM_F_PEM_READ_BIO_PARAMETERS: Int32 { get }
public var PEM_F_PEM_READ_BIO_PRIVATEKEY: Int32 { get }
public var PEM_F_PEM_READ_DHPARAMS: Int32 { get }
public var PEM_F_PEM_READ_PRIVATEKEY: Int32 { get }
public var PEM_F_PEM_SEALFINAL: Int32 { get }
public var PEM_F_PEM_SEALINIT: Int32 { get }
public var PEM_F_PEM_SIGNFINAL: Int32 { get }
public var PEM_F_PEM_WRITE: Int32 { get }
public var PEM_F_PEM_WRITE_BIO: Int32 { get }
public var PEM_F_PEM_WRITE_PRIVATEKEY: Int32 { get }
public var PEM_F_PEM_X509_INFO_READ: Int32 { get }
public var PEM_F_PEM_X509_INFO_READ_BIO: Int32 { get }
public var PEM_F_PEM_X509_INFO_WRITE_BIO: Int32 { get }

/* Reason codes. */
public var PEM_R_BAD_BASE64_DECODE: Int32 { get }
public var PEM_R_BAD_DECRYPT: Int32 { get }
public var PEM_R_BAD_END_LINE: Int32 { get }
public var PEM_R_BAD_IV_CHARS: Int32 { get }
public var PEM_R_BAD_MAGIC_NUMBER: Int32 { get }
public var PEM_R_BAD_PASSWORD_READ: Int32 { get }
public var PEM_R_BAD_VERSION_NUMBER: Int32 { get }
public var PEM_R_BIO_WRITE_FAILURE: Int32 { get }
public var PEM_R_CIPHER_IS_NULL: Int32 { get }
public var PEM_R_ERROR_CONVERTING_PRIVATE_KEY: Int32 { get }
public var PEM_R_EXPECTING_PRIVATE_KEY_BLOB: Int32 { get }
public var PEM_R_EXPECTING_PUBLIC_KEY_BLOB: Int32 { get }
public var PEM_R_INCONSISTENT_HEADER: Int32 { get }
public var PEM_R_KEYBLOB_HEADER_PARSE_ERROR: Int32 { get }
public var PEM_R_KEYBLOB_TOO_SHORT: Int32 { get }
public var PEM_R_NOT_DEK_INFO: Int32 { get }
public var PEM_R_NOT_ENCRYPTED: Int32 { get }
public var PEM_R_NOT_PROC_TYPE: Int32 { get }
public var PEM_R_NO_START_LINE: Int32 { get }
public var PEM_R_PROBLEMS_GETTING_PASSWORD: Int32 { get }
public var PEM_R_PUBLIC_KEY_NO_RSA: Int32 { get }
public var PEM_R_PVK_DATA_TOO_SHORT: Int32 { get }
public var PEM_R_PVK_TOO_SHORT: Int32 { get }
public var PEM_R_READ_KEY: Int32 { get }
public var PEM_R_SHORT_HEADER: Int32 { get }
public var PEM_R_UNSUPPORTED_CIPHER: Int32 { get }
public var PEM_R_UNSUPPORTED_ENCRYPTION: Int32 { get }
public var PEM_R_UNSUPPORTED_KEY_COMPONENTS: Int32 { get }
/* crypto/hmac/hmac.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

public var HMAC_MAX_MD_CBLOCK: Int32 { get } /* largest known is SHA512 */

public struct hmac_ctx_st {

    public var md: UnsafePointer<EVP_MD>!

    public var md_ctx: EVP_MD_CTX

    public var i_ctx: EVP_MD_CTX

    public var o_ctx: EVP_MD_CTX

    public var key_length: UInt32

    public var key: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public init()

    public init(md: UnsafePointer<EVP_MD>!, md_ctx: EVP_MD_CTX, i_ctx: EVP_MD_CTX, o_ctx: EVP_MD_CTX, key_length: UInt32, key: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
public typealias HMAC_CTX = hmac_ctx_st

public func HMAC_CTX_init(_ ctx: UnsafeMutablePointer<HMAC_CTX>!)
public func HMAC_CTX_cleanup(_ ctx: UnsafeMutablePointer<HMAC_CTX>!)

/* deprecated */

/* deprecated */
public func HMAC_Init(_ ctx: UnsafeMutablePointer<HMAC_CTX>!, _ key: UnsafeRawPointer!, _ len: Int32, _ md: UnsafePointer<EVP_MD>!) -> Int32
public func HMAC_Init_ex(_ ctx: UnsafeMutablePointer<HMAC_CTX>!, _ key: UnsafeRawPointer!, _ len: Int32, _ md: UnsafePointer<EVP_MD>!, _ impl: OpaquePointer!) -> Int32
public func HMAC_Update(_ ctx: UnsafeMutablePointer<HMAC_CTX>!, _ data: UnsafePointer<UInt8>!, _ len: Int) -> Int32
public func HMAC_Final(_ ctx: UnsafeMutablePointer<HMAC_CTX>!, _ md: UnsafeMutablePointer<UInt8>!, _ len: UnsafeMutablePointer<UInt32>!) -> Int32
public func HMAC(_ evp_md: UnsafePointer<EVP_MD>!, _ key: UnsafeRawPointer!, _ key_len: Int32, _ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!, _ md_len: UnsafeMutablePointer<UInt32>!) -> UnsafeMutablePointer<UInt8>!
public func HMAC_CTX_copy(_ dctx: UnsafeMutablePointer<HMAC_CTX>!, _ sctx: UnsafeMutablePointer<HMAC_CTX>!) -> Int32

public func HMAC_CTX_set_flags(_ ctx: UnsafeMutablePointer<HMAC_CTX>!, _ flags: UInt)
/* ssl/ssl.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2007 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECC cipher suite support in OpenSSL originally developed by
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */
/* ====================================================================
 * Copyright 2005 Nokia. All rights reserved.
 *
 * The portions of the attached software ("Contribution") is developed by
 * Nokia Corporation and is licensed pursuant to the OpenSSL open source
 * license.
 *
 * The Contribution, originally written by Mika Kousa and Pasi Eronen of
 * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
 * support (see RFC 4279) to OpenSSL.
 *
 * No patent licenses or other rights except those expressly stated in
 * the OpenSSL open source license shall be deemed granted or received
 * expressly, by implication, estoppel, or otherwise.
 *
 * No assurances are provided by Nokia that the Contribution does not
 * infringe the patent or other intellectual property rights of any third
 * party or that the license provides you with all the necessary rights
 * to make use of the Contribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
 * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
 * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
 * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
 * OTHERWISE.
 */

/* SSLeay version number for ASN.1 encoding of the session information */
/*-
 * Version 0 - initial version
 * Version 1 - added the optional peer certificate
 */
public var SSL_SESSION_ASN1_VERSION: Int32 { get }

/* text strings for the ciphers */
public var SSL_TXT_NULL_WITH_MD5: String { get }
public var SSL_TXT_RC4_128_WITH_MD5: String { get }
public var SSL_TXT_RC4_128_EXPORT40_WITH_MD5: String { get }
public var SSL_TXT_RC2_128_CBC_WITH_MD5: String { get }
public var SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5: String { get }
public var SSL_TXT_IDEA_128_CBC_WITH_MD5: String { get }
public var SSL_TXT_DES_64_CBC_WITH_MD5: String { get }
public var SSL_TXT_DES_64_CBC_WITH_SHA: String { get }
public var SSL_TXT_DES_192_EDE3_CBC_WITH_MD5: String { get }
public var SSL_TXT_DES_192_EDE3_CBC_WITH_SHA: String { get }

/*
 * VRS Additional Kerberos5 entries
 */

public var SSL_TXT_KRB5_RC4_128_SHA: String { get }
public var SSL_TXT_KRB5_IDEA_128_CBC_SHA: String { get }

public var SSL_TXT_KRB5_RC4_128_MD5: String { get }
public var SSL_TXT_KRB5_IDEA_128_CBC_MD5: String { get }

public var SSL_TXT_KRB5_RC2_40_CBC_SHA: String { get }
public var SSL_TXT_KRB5_RC4_40_SHA: String { get }

public var SSL_TXT_KRB5_RC2_40_CBC_MD5: String { get }
public var SSL_TXT_KRB5_RC4_40_MD5: String { get }

public var SSL_TXT_KRB5_DES_40_CBC_SHA: String { get }
public var SSL_TXT_KRB5_DES_40_CBC_MD5: String { get }
public var SSL_TXT_KRB5_DES_64_CBC_SHA: String { get }
public var SSL_TXT_KRB5_DES_64_CBC_MD5: String { get }
public var SSL_TXT_KRB5_DES_192_CBC3_SHA: String { get }
public var SSL_TXT_KRB5_DES_192_CBC3_MD5: String { get }
public var SSL_MAX_KRB5_PRINCIPAL_LENGTH: Int32 { get }

public var SSL_MAX_SSL_SESSION_ID_LENGTH: Int32 { get }
public var SSL_MAX_SID_CTX_LENGTH: Int32 { get }

public var SSL_MAX_KEY_ARG_LENGTH: Int32 { get }
public var SSL_MAX_MASTER_KEY_LENGTH: Int32 { get }

/* These are used to specify which ciphers to use and not to use */

public var SSL_TXT_EXP40: String { get }
public var SSL_TXT_EXP56: String { get }
public var SSL_TXT_LOW: String { get }
public var SSL_TXT_MEDIUM: String { get }
public var SSL_TXT_HIGH: String { get }
public var SSL_TXT_FIPS: String { get }

public var SSL_TXT_kFZA: String { get } /* unused! */
public var SSL_TXT_aFZA: String { get } /* unused! */
public var SSL_TXT_eFZA: String { get } /* unused! */
public var SSL_TXT_FZA: String { get } /* unused! */

public var SSL_TXT_aNULL: String { get }
public var SSL_TXT_eNULL: String { get }
public var SSL_TXT_NULL: String { get }

public var SSL_TXT_kRSA: String { get }
public var SSL_TXT_kDHr: String { get }
public var SSL_TXT_kDHd: String { get }
public var SSL_TXT_kDH: String { get }
public var SSL_TXT_kEDH: String { get }
public var SSL_TXT_kDHE: String { get } /* alias for kEDH */
public var SSL_TXT_kKRB5: String { get }
public var SSL_TXT_kECDHr: String { get }
public var SSL_TXT_kECDHe: String { get }
public var SSL_TXT_kECDH: String { get }
public var SSL_TXT_kEECDH: String { get }
public var SSL_TXT_kECDHE: String { get } /* alias for kEECDH */
public var SSL_TXT_kPSK: String { get }
public var SSL_TXT_kGOST: String { get }
public var SSL_TXT_kSRP: String { get }

public var SSL_TXT_aRSA: String { get }
public var SSL_TXT_aDSS: String { get }
public var SSL_TXT_aDH: String { get }
public var SSL_TXT_aECDH: String { get }
public var SSL_TXT_aKRB5: String { get }
public var SSL_TXT_aECDSA: String { get }
public var SSL_TXT_aPSK: String { get }
public var SSL_TXT_aGOST94: String { get }
public var SSL_TXT_aGOST01: String { get }
public var SSL_TXT_aGOST: String { get }
public var SSL_TXT_aSRP: String { get }

public var SSL_TXT_DSS: String { get }
public var SSL_TXT_DH: String { get }
public var SSL_TXT_EDH: String { get } /* same as "kEDH:-ADH" */
public var SSL_TXT_DHE: String { get } /* alias for EDH */
public var SSL_TXT_ADH: String { get }
public var SSL_TXT_RSA: String { get }
public var SSL_TXT_ECDH: String { get }
public var SSL_TXT_EECDH: String { get } /* same as "kEECDH:-AECDH" */
public var SSL_TXT_ECDHE: String { get } /* alias for ECDHE" */
public var SSL_TXT_AECDH: String { get }
public var SSL_TXT_ECDSA: String { get }
public var SSL_TXT_KRB5: String { get }
public var SSL_TXT_PSK: String { get }
public var SSL_TXT_SRP: String { get }

public var SSL_TXT_DES: String { get }
public var SSL_TXT_3DES: String { get }
public var SSL_TXT_RC4: String { get }
public var SSL_TXT_RC2: String { get }
public var SSL_TXT_IDEA: String { get }
public var SSL_TXT_SEED: String { get }
public var SSL_TXT_AES128: String { get }
public var SSL_TXT_AES256: String { get }
public var SSL_TXT_AES: String { get }
public var SSL_TXT_AES_GCM: String { get }
public var SSL_TXT_CAMELLIA128: String { get }
public var SSL_TXT_CAMELLIA256: String { get }
public var SSL_TXT_CAMELLIA: String { get }

public var SSL_TXT_MD5: String { get }
public var SSL_TXT_SHA1: String { get }
public var SSL_TXT_SHA: String { get } /* same as "SHA1" */
public var SSL_TXT_GOST94: String { get }
public var SSL_TXT_GOST89MAC: String { get }
public var SSL_TXT_SHA256: String { get }
public var SSL_TXT_SHA384: String { get }

public var SSL_TXT_SSLV2: String { get }
public var SSL_TXT_SSLV3: String { get }
public var SSL_TXT_TLSV1: String { get }
public var SSL_TXT_TLSV1_1: String { get }
public var SSL_TXT_TLSV1_2: String { get }

public var SSL_TXT_EXP: String { get }
public var SSL_TXT_EXPORT: String { get }

public var SSL_TXT_ALL: String { get }

/*-
 * COMPLEMENTOF* definitions. These identifiers are used to (de-select)
 * ciphers normally not being used.
 * Example: "RC4" will activate all ciphers using RC4 including ciphers
 * without authentication, which would normally disabled by DEFAULT (due
 * the "!ADH" being part of default). Therefore "RC4:!COMPLEMENTOFDEFAULT"
 * will make sure that it is also disabled in the specific selection.
 * COMPLEMENTOF* identifiers are portable between version, as adjustments
 * to the default cipher setup will also be included here.
 *
 * COMPLEMENTOFDEFAULT does not experience the same special treatment that
 * DEFAULT gets, as only selection is being done and no sorting as needed
 * for DEFAULT.
 */
public var SSL_TXT_CMPALL: String { get }
public var SSL_TXT_CMPDEF: String { get }

/*
 * The following cipher list is used by default. It also is substituted when
 * an application-defined cipher list string starts with 'DEFAULT'.
 */
public var SSL_DEFAULT_CIPHER_LIST: String { get }
/*
 * As of OpenSSL 1.0.0, ssl_create_cipher_list() in ssl/ssl_ciph.c always
 * starts with a reasonable order, and all we have to do for DEFAULT is
 * throwing out anonymous and unencrypted ciphersuites! (The latter are not
 * actually enabled by ALL, but "ALL:RSA" would enable some of them.)
 */

/* Used in SSL_set_shutdown()/SSL_get_shutdown(); */
public var SSL_SENT_SHUTDOWN: Int32 { get }
public var SSL_RECEIVED_SHUTDOWN: Int32 { get }

public var SSL_FILETYPE_ASN1: Int32 { get }
public var SSL_FILETYPE_PEM: Int32 { get }

/*
 * This is needed to stop compilers complaining about the 'struct ssl_st *'
 * function parameters used to prototype callbacks in SSL_CTX.
 */
public typealias ssl_crock_st = UnsafeMutablePointer<ssl_st>
public typealias TLS_SESSION_TICKET_EXT = tls_session_ticket_ext_st
public typealias SSL_METHOD = ssl_method_st
public typealias SSL_CIPHER = ssl_cipher_st
public typealias SSL_SESSION = ssl_session_st

public struct stack_st_SSL_CIPHER {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

/* SRTP protection profiles for use with the use_srtp extension (RFC 5764)*/
public struct srtp_protection_profile_st {

    public var name: UnsafePointer<Int8>!

    public var id: UInt

    public init()

    public init(name: UnsafePointer<Int8>!, id: UInt)
}
public typealias SRTP_PROTECTION_PROFILE = srtp_protection_profile_st

public struct stack_st_SRTP_PROTECTION_PROFILE {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public typealias tls_session_ticket_ext_cb_fn = @convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<UInt8>?, Int32, UnsafeMutableRawPointer?) -> Int32
public typealias tls_session_secret_cb_fn = @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?, UnsafeMutablePointer<Int32>?, UnsafeMutablePointer<stack_st_SSL_CIPHER>?, UnsafeMutablePointer<UnsafeMutablePointer<SSL_CIPHER>?>?, UnsafeMutableRawPointer?) -> Int32

/* Typedefs for handling custom extensions */

public typealias custom_ext_add_cb = @convention(c) (UnsafeMutablePointer<SSL>?, UInt32, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, UnsafeMutablePointer<Int>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32

public typealias custom_ext_free_cb = @convention(c) (UnsafeMutablePointer<SSL>?, UInt32, UnsafePointer<UInt8>?, UnsafeMutableRawPointer?) -> Swift.Void

public typealias custom_ext_parse_cb = @convention(c) (UnsafeMutablePointer<SSL>?, UInt32, UnsafePointer<UInt8>?, Int, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32

/* used to hold info on the particular ciphers used */
public struct ssl_cipher_st {

    public var valid: Int32

    public var name: UnsafePointer<Int8>! /* text name */

    public var id: UInt /* id, 4 bytes, first is version */

    /*
     * changed in 0.9.9: these four used to be portions of a single value
     * 'algorithms'
     */
    public var algorithm_mkey: UInt /* key exchange algorithm */

    public var algorithm_auth: UInt /* server authentication */

    public var algorithm_enc: UInt /* symmetric encryption */

    public var algorithm_mac: UInt /* symmetric authentication */

    public var algorithm_ssl: UInt /* (major) protocol version */

    public var algo_strength: UInt /* strength and export flags */

    public var algorithm2: UInt /* Extra flags */

    public var strength_bits: Int32 /* Number of bits really used */

    public var alg_bits: Int32 /* Number of bits for algorithm */

    public init()

    public init(valid: Int32, name: UnsafePointer<Int8>!, id: UInt, algorithm_mkey: UInt, algorithm_auth: UInt, algorithm_enc: UInt, algorithm_mac: UInt, algorithm_ssl: UInt, algo_strength: UInt, algorithm2: UInt, strength_bits: Int32, alg_bits: Int32)
}

/* Used to hold functions for SSLv2 or SSLv3/TLSv1 functions */
public struct ssl_method_st {

    public var version: Int32

    public var ssl_new: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    public var ssl_clear: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Swift.Void)!

    public var ssl_free: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Swift.Void)!

    public var ssl_accept: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    public var ssl_connect: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    public var ssl_read: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?, Int32) -> Int32)!

    public var ssl_peek: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?, Int32) -> Int32)!

    public var ssl_write: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeRawPointer?, Int32) -> Int32)!

    public var ssl_shutdown: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    public var ssl_renegotiate: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    public var ssl_renegotiate_check: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    public var ssl_get_message: (@convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32, Int32, Int, UnsafeMutablePointer<Int32>?) -> Int)!

    public var ssl_read_bytes: (@convention(c) (UnsafeMutablePointer<SSL>?, Int32, UnsafeMutablePointer<UInt8>?, Int32, Int32) -> Int32)!

    public var ssl_write_bytes: (@convention(c) (UnsafeMutablePointer<SSL>?, Int32, UnsafeRawPointer?, Int32) -> Int32)!

    public var ssl_dispatch_alert: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    public var ssl_ctrl: (@convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int, UnsafeMutableRawPointer?) -> Int)!

    public var ssl_ctx_ctrl: (@convention(c) (UnsafeMutablePointer<SSL_CTX>?, Int32, Int, UnsafeMutableRawPointer?) -> Int)!

    public var get_cipher_by_char: (@convention(c) (UnsafePointer<UInt8>?) -> UnsafePointer<SSL_CIPHER>?)!

    public var put_cipher_by_char: (@convention(c) (UnsafePointer<SSL_CIPHER>?, UnsafeMutablePointer<UInt8>?) -> Int32)!

    public var ssl_pending: (@convention(c) (UnsafePointer<SSL>?) -> Int32)!

    public var num_ciphers: (@convention(c) () -> Int32)!

    public var get_cipher: (@convention(c) (UInt32) -> UnsafePointer<SSL_CIPHER>?)!

    public var get_ssl_method: (@convention(c) (Int32) -> UnsafePointer<ssl_method_st>?)!

    public var get_timeout: (@convention(c) () -> Int)!

    public var ssl3_enc: OpaquePointer! /* Extra SSLv3/TLS stuff */

    public var ssl_version: (@convention(c) () -> Int32)!

    public var ssl_callback_ctrl: (@convention(c) (UnsafeMutablePointer<SSL>?, Int32, (@escaping @convention(c) () -> Swift.Void)?) -> Int)!

    public var ssl_ctx_callback_ctrl: (@convention(c) (UnsafeMutablePointer<SSL_CTX>?, Int32, (@escaping @convention(c) () -> Swift.Void)?) -> Int)!

    public init()
}

/*-
 * Lets make this into an ASN.1 type structure as follows
 * SSL_SESSION_ID ::= SEQUENCE {
 *      version                 INTEGER,        -- structure version number
 *      SSLversion              INTEGER,        -- SSL version number
 *      Cipher                  OCTET STRING,   -- the 3 byte cipher ID
 *      Session_ID              OCTET STRING,   -- the Session ID
 *      Master_key              OCTET STRING,   -- the master key
 *      KRB5_principal          OCTET STRING    -- optional Kerberos principal
 *      Key_Arg [ 0 ] IMPLICIT  OCTET STRING,   -- the optional Key argument
 *      Time [ 1 ] EXPLICIT     INTEGER,        -- optional Start Time
 *      Timeout [ 2 ] EXPLICIT  INTEGER,        -- optional Timeout ins seconds
 *      Peer [ 3 ] EXPLICIT     X509,           -- optional Peer Certificate
 *      Session_ID_context [ 4 ] EXPLICIT OCTET STRING,   -- the Session ID context
 *      Verify_result [ 5 ] EXPLICIT INTEGER,   -- X509_V_... code for `Peer'
 *      HostName [ 6 ] EXPLICIT OCTET STRING,   -- optional HostName from servername TLS extension
 *      PSK_identity_hint [ 7 ] EXPLICIT OCTET STRING, -- optional PSK identity hint
 *      PSK_identity [ 8 ] EXPLICIT OCTET STRING,  -- optional PSK identity
 *      Ticket_lifetime_hint [9] EXPLICIT INTEGER, -- server's lifetime hint for session ticket
 *      Ticket [10]             EXPLICIT OCTET STRING, -- session ticket (clients only)
 *      Compression_meth [11]   EXPLICIT OCTET STRING, -- optional compression method
 *      SRP_username [ 12 ] EXPLICIT OCTET STRING -- optional SRP username
 *      }
 * Look in ssl/ssl_asn1.c for more details
 * I'm using EXPLICIT tags so I can read the damn things using asn1parse :-).
 */
public struct ssl_session_st {

    public var ssl_version: Int32 /* what ssl version session info is being
                                 * kept in here? */

    
    /* only really used in SSLv2 */
    public var key_arg_length: UInt32

    public var key_arg: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var master_key_length: Int32

    public var master_key: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    /* session_id - valid? */
    public var session_id_length: UInt32

    public var session_id: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    /*
     * this is used to determine whether the session is being reused in the
     * appropriate context. It is up to the application to set this, via
     * SSL_new
     */
    public var sid_ctx_length: UInt32

    public var sid_ctx: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    
    /* OPENSSL_NO_KRB5 */
    
    public var psk_identity_hint: UnsafeMutablePointer<Int8>!

    public var psk_identity: UnsafeMutablePointer<Int8>!

    
    /*
     * Used to indicate that session resumption is not allowed. Applications
     * can also set this bit for a new session via not_resumable_session_cb
     * to disable session caching and tickets.
     */
    public var not_resumable: Int32

    /* The cert is the certificate used to establish this connection */
    public var sess_cert: OpaquePointer! /* SESS_CERT */

    /*
     * This is the cert for the other end. On clients, it will be the same as
     * sess_cert->peer_key->x509 (the latter is not enough as sess_cert is
     * not retained in the external representation of sessions, see
     * ssl_asn1.c).
     */
    public var peer: UnsafeMutablePointer<X509>!

    /*
     * when app_verify_callback accepts a session where the peer's
     * certificate is not ok, we must remember the error for session reuse:
     */
    public var verify_result: Int /* only for servers */

    public var references: Int32

    public var timeout: Int

    public var time: Int

    public var compress_meth: UInt32 /* Need to lookup the method */

    public var cipher: UnsafePointer<SSL_CIPHER>!

    public var cipher_id: UInt /* when ASN.1 loaded, this needs to be used
                                 * to load the 'cipher' structure */

    
    public var ciphers: UnsafeMutablePointer<stack_st_SSL_CIPHER>! /* shared ciphers? */

    public var ex_data: CRYPTO_EX_DATA /* application specific data */

    /*
     * These are used to make removal of session-ids more efficient and to
     * implement a maximum cache size.
     */
    public var prev: UnsafeMutablePointer<ssl_session_st>!

    public var next: UnsafeMutablePointer<ssl_session_st>!

    
    public var tlsext_hostname: UnsafeMutablePointer<Int8>!

    
    public var tlsext_ecpointformatlist_length: Int

    public var tlsext_ecpointformatlist: UnsafeMutablePointer<UInt8>! /* peer's list */

    public var tlsext_ellipticcurvelist_length: Int

    public var tlsext_ellipticcurvelist: UnsafeMutablePointer<UInt8>! /* peer's list */

    /* OPENSSL_NO_EC */
    /* RFC4507 info */
    public var tlsext_tick: UnsafeMutablePointer<UInt8>! /* Session ticket */

    public var tlsext_ticklen: Int /* Session ticket length */

    public var tlsext_tick_lifetime_hint: Int /* Session lifetime hint in seconds */

    
    public var srp_username: UnsafeMutablePointer<Int8>!

    public init()
}

public var SSL_OP_MICROSOFT_SESS_ID_BUG: Int { get }
public var SSL_OP_NETSCAPE_CHALLENGE_BUG: Int { get }
/* Allow initial connection to servers that don't support RI */
public var SSL_OP_LEGACY_SERVER_CONNECT: Int { get }
public var SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: Int { get }
public var SSL_OP_TLSEXT_PADDING: Int { get }
public var SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: Int { get }
public var SSL_OP_SAFARI_ECDHE_ECDSA_BUG: Int { get }
public var SSL_OP_SSLEAY_080_CLIENT_DH_BUG: Int { get }
public var SSL_OP_TLS_D5_BUG: Int { get }
public var SSL_OP_TLS_BLOCK_PADDING_BUG: Int { get }

/* Hasn't done anything since OpenSSL 0.9.7h, retained for compatibility */
public var SSL_OP_MSIE_SSLV2_RSA_PADDING: Int32 { get }
/* Refers to ancient SSLREF and SSLv2, retained for compatibility */
public var SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: Int32 { get }

/*
 * Disable SSL 3.0/TLS 1.0 CBC vulnerability workaround that was added in
 * OpenSSL 0.9.6d.  Usually (depending on the application protocol) the
 * workaround is not needed.  Unfortunately some broken SSL/TLS
 * implementations cannot handle it at all, which is why we include it in
 * SSL_OP_ALL.
 */
/* added in 0.9.6e */
public var SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: Int { get }

/*
 * SSL_OP_ALL: various bug workarounds that should be rather harmless.  This
 * used to be 0x000FFFFFL before 0.9.7.
 */
public var SSL_OP_ALL: Int { get }

/* DTLS options */
public var SSL_OP_NO_QUERY_MTU: Int { get }
/* Turn on Cookie Exchange (on relevant for servers) */
public var SSL_OP_COOKIE_EXCHANGE: Int { get }
/* Don't use RFC4507 ticket extension */
public var SSL_OP_NO_TICKET: Int { get }
/* Use Cisco's "speshul" version of DTLS_BAD_VER (as client)  */
public var SSL_OP_CISCO_ANYCONNECT: Int { get }

/* As server, disallow session resumption on renegotiation */
public var SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: Int { get }
/* Don't use compression even if supported */
public var SSL_OP_NO_COMPRESSION: Int { get }
/* Permit unsafe legacy renegotiation */
public var SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: Int { get }
/* If set, always create a new key when using tmp_ecdh parameters */
public var SSL_OP_SINGLE_ECDH_USE: Int { get }
/* Does nothing: retained for compatibility */
public var SSL_OP_SINGLE_DH_USE: Int { get }
/* Does nothing: retained for compatibiity */
public var SSL_OP_EPHEMERAL_RSA: Int32 { get }
/*
 * Set on servers to choose the cipher according to the server's preferences
 */
public var SSL_OP_CIPHER_SERVER_PREFERENCE: Int { get }
/*
 * If set, a server will allow a client to issue a SSLv3.0 version number as
 * latest version supported in the premaster secret, even when TLSv1.0
 * (version 3.1) was announced in the client hello. Normally this is
 * forbidden to prevent version rollback attacks.
 */
public var SSL_OP_TLS_ROLLBACK_BUG: Int { get }

public var SSL_OP_NO_SSLv2: Int { get }
public var SSL_OP_NO_SSLv3: Int { get }
public var SSL_OP_NO_TLSv1: Int { get }
public var SSL_OP_NO_TLSv1_2: Int { get }
public var SSL_OP_NO_TLSv1_1: Int { get }

public var SSL_OP_NO_DTLSv1: Int { get }
public var SSL_OP_NO_DTLSv1_2: Int { get }

/*
 * These next two were never actually used for anything since SSLeay zap so
 * we have some more flags.
 */
/*
 * The next flag deliberately changes the ciphertest, this is a check for the
 * PKCS#1 attack
 */
public var SSL_OP_PKCS1_CHECK_1: Int32 { get }
public var SSL_OP_PKCS1_CHECK_2: Int32 { get }

public var SSL_OP_NETSCAPE_CA_DN_BUG: Int { get }
public var SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: Int { get }
/*
 * Make server add server-hello extension from early version of cryptopro
 * draft, when GOST ciphersuite is negotiated. Required for interoperability
 * with CryptoPro CSP 3.x
 */
public var SSL_OP_CRYPTOPRO_TLSEXT_BUG: Int { get }

/*
 * Allow SSL_write(..., n) to return r with 0 < r < n (i.e. report success
 * when just a single record has been written):
 */
public var SSL_MODE_ENABLE_PARTIAL_WRITE: Int { get }
/*
 * Make it possible to retry SSL_write() with changed buffer location (buffer
 * contents must stay the same!); this is not the default to avoid the
 * misconception that non-blocking SSL_write() behaves like non-blocking
 * write():
 */
public var SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER: Int { get }
/*
 * Never bother the application with retries if the transport is blocking:
 */
public var SSL_MODE_AUTO_RETRY: Int { get }
/* Don't attempt to automatically build certificate chain */
public var SSL_MODE_NO_AUTO_CHAIN: Int { get }
/*
 * Save RAM by releasing read and write buffers when they're empty. (SSL3 and
 * TLS only.) "Released" buffers are put onto a free-list in the context or
 * just freed (depending on the context's setting for freelist_max_len).
 */
public var SSL_MODE_RELEASE_BUFFERS: Int { get }
/*
 * Send the current time in the Random fields of the ClientHello and
 * ServerHello records for compatibility with hypothetical implementations
 * that require it.
 */
public var SSL_MODE_SEND_CLIENTHELLO_TIME: Int { get }
public var SSL_MODE_SEND_SERVERHELLO_TIME: Int { get }
/*
 * Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications
 * that reconnect with a downgraded protocol version; see
 * draft-ietf-tls-downgrade-scsv-00 for details. DO NOT ENABLE THIS if your
 * application attempts a normal handshake. Only use this in explicit
 * fallback retries, following the guidance in
 * draft-ietf-tls-downgrade-scsv-00.
 */
public var SSL_MODE_SEND_FALLBACK_SCSV: Int { get }

/* Cert related flags */
/*
 * Many implementations ignore some aspects of the TLS standards such as
 * enforcing certifcate chain algorithms. When this is set we enforce them.
 */
public var SSL_CERT_FLAG_TLS_STRICT: Int { get }

/* Suite B modes, takes same values as certificate verify flags */
public var SSL_CERT_FLAG_SUITEB_128_LOS_ONLY: Int32 { get }
/* Suite B 192 bit only mode */
public var SSL_CERT_FLAG_SUITEB_192_LOS: Int32 { get }
/* Suite B 128 bit mode allowing 192 bit algorithms */
public var SSL_CERT_FLAG_SUITEB_128_LOS: Int32 { get }

/* Perform all sorts of protocol violations for testing purposes */
public var SSL_CERT_FLAG_BROKEN_PROTOCOL: Int32 { get }

/* Flags for building certificate chains */
/* Treat any existing certificates as untrusted CAs */
public var SSL_BUILD_CHAIN_FLAG_UNTRUSTED: Int32 { get }
/* Don't include root CA in chain */
public var SSL_BUILD_CHAIN_FLAG_NO_ROOT: Int32 { get }
/* Just check certificates already there */
public var SSL_BUILD_CHAIN_FLAG_CHECK: Int32 { get }
/* Ignore verification errors */
public var SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR: Int32 { get }
/* Clear verification errors from queue */
public var SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR: Int32 { get }

/* Flags returned by SSL_check_chain */
/* Certificate can be used with this session */
public var CERT_PKEY_VALID: Int32 { get }
/* Certificate can also be used for signing */
public var CERT_PKEY_SIGN: Int32 { get }
/* EE certificate signing algorithm OK */
public var CERT_PKEY_EE_SIGNATURE: Int32 { get }
/* CA signature algorithms OK */
public var CERT_PKEY_CA_SIGNATURE: Int32 { get }
/* EE certificate parameters OK */
public var CERT_PKEY_EE_PARAM: Int32 { get }
/* CA certificate parameters OK */
public var CERT_PKEY_CA_PARAM: Int32 { get }
/* Signing explicitly allowed as opposed to SHA1 fallback */
public var CERT_PKEY_EXPLICIT_SIGN: Int32 { get }
/* Client CA issuer names match (always set for server cert) */
public var CERT_PKEY_ISSUER_NAME: Int32 { get }
/* Cert type matches client types (always set for server cert) */
public var CERT_PKEY_CERT_TYPE: Int32 { get }
/* Cert chain suitable to Suite B */
public var CERT_PKEY_SUITEB: Int32 { get }

public var SSL_CONF_FLAG_CMDLINE: Int32 { get }
public var SSL_CONF_FLAG_FILE: Int32 { get }
public var SSL_CONF_FLAG_CLIENT: Int32 { get }
public var SSL_CONF_FLAG_SERVER: Int32 { get }
public var SSL_CONF_FLAG_SHOW_ERRORS: Int32 { get }
public var SSL_CONF_FLAG_CERTIFICATE: Int32 { get }
/* Configuration value types */
public var SSL_CONF_TYPE_UNKNOWN: Int32 { get }
public var SSL_CONF_TYPE_STRING: Int32 { get }
public var SSL_CONF_TYPE_FILE: Int32 { get }
public var SSL_CONF_TYPE_DIR: Int32 { get }

/*
 * Note: SSL[_CTX]_set_{options,mode} use |= op on the previous value, they
 * cannot be used to clear bits.
 */

public func SSL_CTX_set_msg_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (Int32, Int32, Int32, UnsafeRawPointer?, Int, UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Swift.Void)!)
public func SSL_set_msg_callback(_ ssl: UnsafeMutablePointer<SSL>!, _ cb: (@escaping @convention(c) (Int32, Int32, Int32, UnsafeRawPointer?, Int, UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Swift.Void)!)

public struct srp_ctx_st {

    /* param for all the callbacks */
    public var SRP_cb_arg: UnsafeMutableRawPointer!

    /* set client Hello login callback */
    public var TLS_ext_srp_username_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!

    /* set SRP N/g param callback for verification */
    public var SRP_verify_param_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Int32)!

    /* set SRP client passwd callback */
    public var SRP_give_srp_client_pwd_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> UnsafeMutablePointer<Int8>?)!

    public var login: UnsafeMutablePointer<Int8>!

    public var N: UnsafeMutablePointer<BIGNUM>!

    public var g: UnsafeMutablePointer<BIGNUM>!

    public var s: UnsafeMutablePointer<BIGNUM>!

    public var B: UnsafeMutablePointer<BIGNUM>!

    public var A: UnsafeMutablePointer<BIGNUM>!

    public var a: UnsafeMutablePointer<BIGNUM>!

    public var b: UnsafeMutablePointer<BIGNUM>!

    public var v: UnsafeMutablePointer<BIGNUM>!

    public var info: UnsafeMutablePointer<Int8>!

    public var strength: Int32

    public var srp_Mask: UInt

    public init()

    public init(SRP_cb_arg: UnsafeMutableRawPointer!, TLS_ext_srp_username_callback: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!, SRP_verify_param_callback: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Int32)!, SRP_give_srp_client_pwd_callback: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> UnsafeMutablePointer<Int8>?)!, login: UnsafeMutablePointer<Int8>!, N: UnsafeMutablePointer<BIGNUM>!, g: UnsafeMutablePointer<BIGNUM>!, s: UnsafeMutablePointer<BIGNUM>!, B: UnsafeMutablePointer<BIGNUM>!, A: UnsafeMutablePointer<BIGNUM>!, a: UnsafeMutablePointer<BIGNUM>!, b: UnsafeMutablePointer<BIGNUM>!, v: UnsafeMutablePointer<BIGNUM>!, info: UnsafeMutablePointer<Int8>!, strength: Int32, srp_Mask: UInt)
}
public typealias SRP_CTX = srp_ctx_st

/* see tls_srp.c */
public func SSL_SRP_CTX_init(_ s: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_CTX_SRP_CTX_init(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> Int32
public func SSL_SRP_CTX_free(_ ctx: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_CTX_SRP_CTX_free(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> Int32
public func SSL_srp_server_param_with_username(_ s: UnsafeMutablePointer<SSL>!, _ ad: UnsafeMutablePointer<Int32>!) -> Int32
public func SRP_generate_server_master_secret(_ s: UnsafeMutablePointer<SSL>!, _ master_key: UnsafeMutablePointer<UInt8>!) -> Int32
public func SRP_Calc_A_param(_ s: UnsafeMutablePointer<SSL>!) -> Int32
public func SRP_generate_client_master_secret(_ s: UnsafeMutablePointer<SSL>!, _ master_key: UnsafeMutablePointer<UInt8>!) -> Int32

/* 30k max cert list :-) */

/* 100k max cert list :-) */

/*
 * This callback type is used inside SSL_CTX, SSL, and in the functions that
 * set them. It is used to override the generation of SSL/TLS session IDs in
 * a server. Return value should be zero on an error, non-zero to proceed.
 * Also, callbacks should themselves check if the id they generate is unique
 * otherwise the SSL handshake will fail with an error - callbacks can do
 * this using the 'ssl' value they're passed by;
 * SSL_has_matching_session_id(ssl, id, *id_len) The length value passed in
 * is set at the maximum size the session ID can be. In SSLv2 this is 16
 * bytes, whereas SSLv3/TLSv1 it is 32 bytes. The callback can alter this
 * length to be less if desired, but under SSLv2 session IDs are supposed to
 * be fixed at 16 bytes so the id will be padded after the callback returns
 * in this case. It is also an error for the callback to set the size to
 * zero.
 */
public typealias GEN_SESSION_CB = @convention(c) (UnsafePointer<SSL>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?) -> Int32

public typealias SSL_COMP = ssl_comp_st

public struct ssl_comp_st {

    public var id: Int32

    public var name: UnsafePointer<Int8>!

    
    public var method: UnsafeMutablePointer<COMP_METHOD>!

    public init()

    public init(id: Int32, name: UnsafePointer<Int8>!, method: UnsafeMutablePointer<COMP_METHOD>!)
}

public struct stack_st_SSL_COMP {

    
    public var stack: _STACK

    public init()

    public init(stack: _STACK)
}

public struct lhash_st_SSL_SESSION {

    
    public var dummy: Int32

    public init()

    public init(dummy: Int32)
}

public struct ssl_ctx_st {

    
    /* same as above but sorted for lookup */
    
    /* X509_STORE */
    
    /*
     * Most session-ids that will be cached, default is
     * SSL_SESSION_CACHE_MAX_SIZE_DEFAULT. 0 is unlimited.
     */
    
    /*
     * This can have one of 2 values, ored together, SSL_SESS_CACHE_CLIENT,
     * SSL_SESS_CACHE_SERVER, Default is SSL_SESSION_CACHE_SERVER, which
     * means only SSL_accept which cache SSL_SESSIONS.
     */
    
    /*
     * If timeout is not 0, it is the default timeout value set when
     * SSL_new() is called.  This has been put in to make life easier to set
     * things up
     */
    
    /*
     * If this callback is not null, it will be called each time a session id
     * is added to the cache.  If this function returns 1, it means that the
     * callback will do a SSL_SESSION_free() when it has finished using it.
     * Otherwise, on 0, it means the callback has finished with it. If
     * remove_session_cb is not null, it will be called when a session-id is
     * removed from the cache.  After the call, OpenSSL will
     * SSL_SESSION_free() it.
     */
    
    public struct __Unnamed_struct_stats {

        public var sess_connect: Int32 /* SSL new conn - started */

        public var sess_connect_renegotiate: Int32 /* SSL reneg - requested */

        public var sess_connect_good: Int32 /* SSL new conne/reneg - finished */

        public var sess_accept: Int32 /* SSL new accept - started */

        public var sess_accept_renegotiate: Int32 /* SSL reneg - requested */

        public var sess_accept_good: Int32 /* SSL accept/reneg - finished */

        public var sess_miss: Int32 /* session lookup misses */

        public var sess_timeout: Int32 /* reuse attempt on timeouted session */

        public var sess_cache_full: Int32 /* session removed due to full cache */

        public var sess_hit: Int32 /* session reuse actually done */

        public var sess_cb_hit: Int32 /* session-id that was not in the cache was
                                 * passed back via the callback.  This
                                 * indicates that the application is
                                 * supplying session-id's from other
                                 * processes - spooky :-) */

        public init()

        public init(sess_connect: Int32, sess_connect_renegotiate: Int32, sess_connect_good: Int32, sess_accept: Int32, sess_accept_renegotiate: Int32, sess_accept_good: Int32, sess_miss: Int32, sess_timeout: Int32, sess_cache_full: Int32, sess_hit: Int32, sess_cb_hit: Int32)
    }

    public var method: UnsafePointer<SSL_METHOD>!

    public var cipher_list: UnsafeMutablePointer<stack_st_SSL_CIPHER>!

    public var cipher_list_by_id: UnsafeMutablePointer<stack_st_SSL_CIPHER>!

    public var cert_store: UnsafeMutablePointer<x509_store_st>!

    public var sessions: UnsafeMutablePointer<lhash_st_SSL_SESSION>!

    public var session_cache_size: UInt

    public var session_cache_head: UnsafeMutablePointer<ssl_session_st>!

    public var session_cache_tail: UnsafeMutablePointer<ssl_session_st>!

    public var session_cache_mode: Int32

    public var session_timeout: Int

    public var new_session_cb: (@convention(c) (UnsafeMutablePointer<ssl_st>?, UnsafeMutablePointer<SSL_SESSION>?) -> Int32)!

    public var remove_session_cb: (@convention(c) (UnsafeMutablePointer<ssl_ctx_st>?, UnsafeMutablePointer<SSL_SESSION>?) -> Swift.Void)!

    public var get_session_cb: (@convention(c) (UnsafeMutablePointer<ssl_st>?, UnsafeMutablePointer<UInt8>?, Int32, UnsafeMutablePointer<Int32>?) -> UnsafeMutablePointer<SSL_SESSION>?)!

    public var stats: ssl_ctx_st.__Unnamed_struct_stats

    
    public var references: Int32

    
    /* if defined, these override the X509_verify_cert() calls */
    public var app_verify_callback: (@convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutableRawPointer?) -> Int32)!

    public var app_verify_arg: UnsafeMutableRawPointer!

    /*
     * before OpenSSL 0.9.7, 'app_verify_arg' was ignored
     * ('app_verify_callback' was called with just one argument)
     */
    
    /* Default password callback. */
    public var default_passwd_callback: (@convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!

    
    /* Default password callback user data. */
    public var default_passwd_callback_userdata: UnsafeMutableRawPointer!

    
    /* get client cert callback */
    public var client_cert_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafeMutablePointer<X509>?>?, UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>?) -> Int32)!

    
    /* cookie generate callback */
    public var app_gen_cookie_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?) -> Int32)!

    
    /* verify cookie callback */
    public var app_verify_cookie_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UInt8>?, UInt32) -> Int32)!

    
    public var ex_data: CRYPTO_EX_DATA

    
    public var rsa_md5: UnsafePointer<EVP_MD>! /* For SSLv2 - name is 'ssl2-md5' */

    public var md5: UnsafePointer<EVP_MD>! /* For SSLv3/TLSv1 'ssl3-md5' */

    public var sha1: UnsafePointer<EVP_MD>! /* For SSLv3/TLSv1 'ssl3->sha1' */

    
    public var extra_certs: UnsafeMutablePointer<stack_st_X509>!

    public var comp_methods: UnsafeMutablePointer<stack_st_SSL_COMP>! /* stack of SSL_COMP, SSLv3/TLSv1 */

    
    /* Default values used when no per-SSL value is defined follow */
    
    /* used if SSL's info_callback is NULL */
    public var info_callback: (@convention(c) (UnsafePointer<SSL>?, Int32, Int32) -> Swift.Void)!

    
    /* what we put in client cert requests */
    public var client_CA: UnsafeMutablePointer<stack_st_X509_NAME>!

    
    /*
     * Default values to use in SSL structures follow (these are copied by
     * SSL_new)
     */
    
    public var options: UInt

    public var mode: UInt

    public var max_cert_list: Int

    
    public var cert: OpaquePointer! /* CERT */

    public var read_ahead: Int32

    
    /* callback that allows applications to peek at protocol messages */
    public var msg_callback: (@convention(c) (Int32, Int32, Int32, UnsafeRawPointer?, Int, UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Swift.Void)!

    public var msg_callback_arg: UnsafeMutableRawPointer!

    
    public var verify_mode: Int32

    public var sid_ctx_length: UInt32

    public var sid_ctx: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    /* called 'verify_callback' in the SSL */
    public var default_verify_callback: (@convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    
    /* Default generate session ID callback. */
    public var generate_session_id: OpenSSL.GEN_SESSION_CB!

    
    public var param: UnsafeMutablePointer<X509_VERIFY_PARAM>!

    
    /* Purpose setting */
    /* Trust setting */
    
    public var quiet_shutdown: Int32

    
    /*
     * Maximum amount of data to send in one fragment. actual record size can
     * be more than this due to padding and MAC overheads.
     */
    public var max_send_fragment: UInt32

    
    /*
     * Engine to pass requests for client certs to
     */
    public var client_cert_engine: OpaquePointer!

    
    /* TLS extensions servername callback */
    public var tlsext_servername_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!

    public var tlsext_servername_arg: UnsafeMutableRawPointer!

    /* RFC 4507 session ticket keys */
    public var tlsext_tick_key_name: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var tlsext_tick_hmac_key: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var tlsext_tick_aes_key: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    /* Callback to support customisation of ticket key setting */
    public var tlsext_ticket_key_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<EVP_CIPHER_CTX>?, UnsafeMutablePointer<HMAC_CTX>?, Int32) -> Int32)!

    
    /* certificate status request info */
    /* Callback for status request */
    public var tlsext_status_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Int32)!

    public var tlsext_status_arg: UnsafeMutableRawPointer!

    
    /* draft-rescorla-tls-opaque-prf-input-00.txt information */
    public var tlsext_opaque_prf_input_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?, Int, UnsafeMutableRawPointer?) -> Int32)!

    public var tlsext_opaque_prf_input_callback_arg: UnsafeMutableRawPointer!

    
    public var psk_identity_hint: UnsafeMutablePointer<Int8>!

    public var psk_client_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<Int8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!

    public var psk_server_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!

    
    public var freelist_max_len: UInt32

    public var wbuf_freelist: OpaquePointer!

    public var rbuf_freelist: OpaquePointer!

    
    public var srp_ctx: SRP_CTX /* ctx for SRP authentication */

    
    /* Next protocol negotiation information */
    /* (for experimental NPN extension). */
    
    /*
     * For a server, this contains a callback function by which the set of
     * advertised protocols can be provided.
     */
    public var next_protos_advertised_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, UnsafeMutablePointer<UInt32>?, UnsafeMutableRawPointer?) -> Int32)!

    public var next_protos_advertised_cb_arg: UnsafeMutableRawPointer!

    /*
     * For a client, this contains a callback function that selects the next
     * protocol from the list provided by the server.
     */
    public var next_proto_select_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<UInt8>?, UnsafePointer<UInt8>?, UInt32, UnsafeMutableRawPointer?) -> Int32)!

    public var next_proto_select_cb_arg: UnsafeMutableRawPointer!

    
    /* SRTP profiles we are willing to do from RFC 5764 */
    public var srtp_profiles: UnsafeMutablePointer<stack_st_SRTP_PROTECTION_PROFILE>!

    
    /*
     * ALPN information (we are in the process of transitioning from NPN to
     * ALPN.)
     */
    
    /*-
     * For a server, this contains a callback function that allows the
     * server to select the protocol for the connection.
     *   out: on successful return, this must point to the raw protocol
     *        name (without the length prefix).
     *   outlen: on successful return, this contains the length of |*out|.
     *   in: points to the client's list of supported protocols in
     *       wire-format.
     *   inlen: the length of |in|.
     */
    public var alpn_select_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, UnsafeMutablePointer<UInt8>?, UnsafePointer<UInt8>?, UInt32, UnsafeMutableRawPointer?) -> Int32)!

    public var alpn_select_cb_arg: UnsafeMutableRawPointer!

    
    /*
     * For a client, this contains the list of supported protocols in wire
     * format.
     */
    public var alpn_client_proto_list: UnsafeMutablePointer<UInt8>!

    public var alpn_client_proto_list_len: UInt32

    
    /* EC extension values inherited by SSL structure */
    public var tlsext_ecpointformatlist_length: Int

    public var tlsext_ecpointformatlist: UnsafeMutablePointer<UInt8>!

    public var tlsext_ellipticcurvelist_length: Int

    public var tlsext_ellipticcurvelist: UnsafeMutablePointer<UInt8>!

    public init()
}
public var SSL_MAX_BUF_FREELIST_LEN_DEFAULT: Int32 { get }

/* OPENSSL_NO_EC */

public var SSL_SESS_CACHE_OFF: Int32 { get }
public var SSL_SESS_CACHE_CLIENT: Int32 { get }
public var SSL_SESS_CACHE_SERVER: Int32 { get }

public var SSL_SESS_CACHE_NO_AUTO_CLEAR: Int32 { get }
/* enough comments already ... see SSL_CTX_set_session_cache_mode(3) */
public var SSL_SESS_CACHE_NO_INTERNAL_LOOKUP: Int32 { get }
public var SSL_SESS_CACHE_NO_INTERNAL_STORE: Int32 { get }

public func SSL_CTX_sessions(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> UnsafeMutablePointer<lhash_st_SSL_SESSION>!

public func SSL_CTX_sess_set_new_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ new_session_cb: (@escaping @convention(c) (UnsafeMutablePointer<ssl_st>?, UnsafeMutablePointer<SSL_SESSION>?) -> Int32)!)
public func SSL_CTX_sess_get_new_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> (@convention(c) (UnsafeMutablePointer<ssl_st>?, UnsafeMutablePointer<SSL_SESSION>?) -> Int32)!
public func SSL_CTX_sess_set_remove_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ remove_session_cb: (@escaping @convention(c) (UnsafeMutablePointer<ssl_ctx_st>?, UnsafeMutablePointer<SSL_SESSION>?) -> Swift.Void)!)
public func SSL_CTX_sess_get_remove_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> (@convention(c) (UnsafeMutablePointer<ssl_ctx_st>?, UnsafeMutablePointer<SSL_SESSION>?) -> Swift.Void)!
public func SSL_CTX_sess_set_get_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ get_session_cb: (@escaping @convention(c) (UnsafeMutablePointer<ssl_st>?, UnsafeMutablePointer<UInt8>?, Int32, UnsafeMutablePointer<Int32>?) -> UnsafeMutablePointer<SSL_SESSION>?)!)
public func SSL_CTX_sess_get_get_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> (@convention(c) (UnsafeMutablePointer<ssl_st>?, UnsafeMutablePointer<UInt8>?, Int32, UnsafeMutablePointer<Int32>?) -> UnsafeMutablePointer<SSL_SESSION>?)!
public func SSL_CTX_set_info_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafePointer<SSL>?, Int32, Int32) -> Swift.Void)!)
public func SSL_CTX_get_info_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> (@convention(c) (UnsafePointer<SSL>?, Int32, Int32) -> Swift.Void)!
public func SSL_CTX_set_client_cert_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ client_cert_cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafeMutablePointer<X509>?>?, UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>?) -> Int32)!)
public func SSL_CTX_get_client_cert_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafeMutablePointer<X509>?>?, UnsafeMutablePointer<UnsafeMutablePointer<EVP_PKEY>?>?) -> Int32)!

public func SSL_CTX_set_client_cert_engine(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ e: OpaquePointer!) -> Int32

public func SSL_CTX_set_cookie_generate_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ app_gen_cookie_cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UInt8>?, UnsafeMutablePointer<UInt32>?) -> Int32)!)
public func SSL_CTX_set_cookie_verify_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ app_verify_cookie_cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UInt8>?, UInt32) -> Int32)!)

public func SSL_CTX_set_next_protos_advertised_cb(_ s: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, UnsafeMutablePointer<UInt32>?, UnsafeMutableRawPointer?) -> Int32)!, _ arg: UnsafeMutableRawPointer!)
public func SSL_CTX_set_next_proto_select_cb(_ s: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>?, UnsafeMutablePointer<UInt8>?, UnsafePointer<UInt8>?, UInt32, UnsafeMutableRawPointer?) -> Int32)!, _ arg: UnsafeMutableRawPointer!)
public func SSL_get0_next_proto_negotiated(_ s: UnsafePointer<SSL>!, _ data: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: UnsafeMutablePointer<UInt32>!)

public func SSL_select_next_proto(_ out: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!, _ outlen: UnsafeMutablePointer<UInt8>!, _ in: UnsafePointer<UInt8>!, _ inlen: UInt32, _ client: UnsafePointer<UInt8>!, _ client_len: UInt32) -> Int32

public var OPENSSL_NPN_UNSUPPORTED: Int32 { get }
public var OPENSSL_NPN_NEGOTIATED: Int32 { get }
public var OPENSSL_NPN_NO_OVERLAP: Int32 { get }

public func SSL_CTX_set_alpn_protos(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ protos: UnsafePointer<UInt8>!, _ protos_len: UInt32) -> Int32
public func SSL_set_alpn_protos(_ ssl: UnsafeMutablePointer<SSL>!, _ protos: UnsafePointer<UInt8>!, _ protos_len: UInt32) -> Int32
public func SSL_CTX_set_alpn_select_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<UnsafePointer<UInt8>?>?, UnsafeMutablePointer<UInt8>?, UnsafePointer<UInt8>?, UInt32, UnsafeMutableRawPointer?) -> Int32)!, _ arg: UnsafeMutableRawPointer!)
public func SSL_get0_alpn_selected(_ ssl: UnsafePointer<SSL>!, _ data: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ len: UnsafeMutablePointer<UInt32>!)

/*
 * the maximum length of the buffer given to callbacks containing the
 * resulting identity/psk
 */
public var PSK_MAX_IDENTITY_LEN: Int32 { get }
public var PSK_MAX_PSK_LEN: Int32 { get }
public func SSL_CTX_set_psk_client_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ psk_client_callback: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<Int8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!)
public func SSL_set_psk_client_callback(_ ssl: UnsafeMutablePointer<SSL>!, _ psk_client_callback: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<Int8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!)
public func SSL_CTX_set_psk_server_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ psk_server_callback: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!)
public func SSL_set_psk_server_callback(_ ssl: UnsafeMutablePointer<SSL>!, _ psk_server_callback: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!)
public func SSL_CTX_use_psk_identity_hint(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ identity_hint: UnsafePointer<Int8>!) -> Int32
public func SSL_use_psk_identity_hint(_ s: UnsafeMutablePointer<SSL>!, _ identity_hint: UnsafePointer<Int8>!) -> Int32
public func SSL_get_psk_identity_hint(_ s: UnsafePointer<SSL>!) -> UnsafePointer<Int8>!
public func SSL_get_psk_identity(_ s: UnsafePointer<SSL>!) -> UnsafePointer<Int8>!

/* Register callbacks to handle custom TLS Extensions for client or server. */

public func SSL_CTX_add_client_custom_ext(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ ext_type: UInt32, _ add_cb: OpenSSL.custom_ext_add_cb!, _ free_cb: OpenSSL.custom_ext_free_cb!, _ add_arg: UnsafeMutableRawPointer!, _ parse_cb: OpenSSL.custom_ext_parse_cb!, _ parse_arg: UnsafeMutableRawPointer!) -> Int32

public func SSL_CTX_add_server_custom_ext(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ ext_type: UInt32, _ add_cb: OpenSSL.custom_ext_add_cb!, _ free_cb: OpenSSL.custom_ext_free_cb!, _ add_arg: UnsafeMutableRawPointer!, _ parse_cb: OpenSSL.custom_ext_parse_cb!, _ parse_arg: UnsafeMutableRawPointer!) -> Int32

public func SSL_extension_supported(_ ext_type: UInt32) -> Int32

public var SSL_NOTHING: Int32 { get }
public var SSL_WRITING: Int32 { get }
public var SSL_READING: Int32 { get }
public var SSL_X509_LOOKUP: Int32 { get }

/* These will only be used when doing non-blocking IO */

public var SSL_MAC_FLAG_READ_MAC_STREAM: Int32 { get }
public var SSL_MAC_FLAG_WRITE_MAC_STREAM: Int32 { get }

public struct ssl_st {

    /*
     * protocol version (one of SSL2_VERSION, SSL3_VERSION, TLS1_VERSION,
     * DTLS1_VERSION)
     */
    public var version: Int32

    /* SSL_ST_CONNECT or SSL_ST_ACCEPT */
    public var type: Int32

    /* SSLv3 */
    public var method: UnsafePointer<SSL_METHOD>!

    /*
     * There are 2 BIO's even though they are normally both the same.  This
     * is so data can be read and written to different handlers
     */
    
    /* used by SSL_read */
    public var rbio: UnsafeMutablePointer<BIO>!

    /* used by SSL_write */
    public var wbio: UnsafeMutablePointer<BIO>!

    /* used during session-id reuse to concatenate messages */
    public var bbio: UnsafeMutablePointer<BIO>!

    
    /* used by SSL_read */
    
    /* used by SSL_write */
    
    /*
     * This holds a variable that indicates what we were doing when a 0 or -1
     * is returned.  This is needed for non-blocking IO so we know what
     * request needs re-doing when in SSL_accept or SSL_connect
     */
    public var rwstate: Int32

    /* true when we are actually in SSL_accept() or SSL_connect() */
    public var in_handshake: Int32

    public var handshake_func: (@convention(c) (UnsafeMutablePointer<SSL>?) -> Int32)!

    /*
     * Imagine that here's a boolean member "init" that is switched as soon
     * as SSL_set_{accept/connect}_state is called for the first time, so
     * that "state" and "handshake_func" are properly initialized.  But as
     * handshake_func is == 0 until then, we use this test instead of an
     * "init" member.
     */
    /* are we the server side? - mostly used by SSL_clear */
    public var server: Int32

    /*
     * Generate a new session or reuse an old one.
     * NB: For servers, the 'new' session may actually be a previously
     * cached session or even the previous session unless
     * SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION is set
     */
    public var new_session: Int32

    /* don't send shutdown packets */
    public var quiet_shutdown: Int32

    /* we have shut things down, 0x01 sent, 0x02 for received */
    public var shutdown: Int32

    /* where we are */
    public var state: Int32

    /* where we are when reading */
    public var rstate: Int32

    public var init_buf: UnsafeMutablePointer<BUF_MEM>! /* buffer used during init */

    public var init_msg: UnsafeMutableRawPointer! /* pointer to handshake message body, set by
                                 * ssl3_get_message() */

    
    public var init_num: Int32 /* amount read/written */

    public var init_off: Int32 /* amount read/written */

    /* used internally to point at a raw packet */
    public var packet: UnsafeMutablePointer<UInt8>!

    public var packet_length: UInt32

    public var s2: UnsafeMutablePointer<ssl2_state_st>! /* SSLv2 variables */

    public var s3: UnsafeMutablePointer<ssl3_state_st>! /* SSLv3 variables */

    public var d1: UnsafeMutablePointer<dtls1_state_st>! /* DTLSv1 variables */

    public var read_ahead: Int32 /* Read as many input bytes as possible (for
                                 * non-blocking reads) */

    
    /* callback that allows applications to peek at protocol messages */
    public var msg_callback: (@convention(c) (Int32, Int32, Int32, UnsafeRawPointer?, Int, UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Swift.Void)!

    public var msg_callback_arg: UnsafeMutableRawPointer!

    public var hit: Int32 /* reusing a previous session */

    public var param: UnsafeMutablePointer<X509_VERIFY_PARAM>!

    
    /* Purpose setting */
    /* Trust setting */
    
    /* crypto */
    public var cipher_list: UnsafeMutablePointer<stack_st_SSL_CIPHER>!

    public var cipher_list_by_id: UnsafeMutablePointer<stack_st_SSL_CIPHER>!

    /*
     * These are the ones being used, the ones in SSL_SESSION are the ones to
     * be 'copied' into these ones
     */
    public var mac_flags: Int32

    public var enc_read_ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>! /* cryptographic state */

    public var read_hash: UnsafeMutablePointer<EVP_MD_CTX>! /* used for mac generation */

    
    public var expand: UnsafeMutablePointer<COMP_CTX>! /* uncompress */

    
    public var enc_write_ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>! /* cryptographic state */

    public var write_hash: UnsafeMutablePointer<EVP_MD_CTX>! /* used for mac generation */

    
    public var compress: UnsafeMutablePointer<COMP_CTX>! /* compression */

    
    /* session info */
    /* client cert? */
    /* This is used to hold the server certificate used */
    public var cert: OpaquePointer! /* CERT */

    /*
     * the session_id_context is used to ensure sessions are only reused in
     * the appropriate context
     */
    public var sid_ctx_length: UInt32

    public var sid_ctx: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    /* This can also be in the session once a session is established */
    public var session: UnsafeMutablePointer<SSL_SESSION>!

    /* Default generate session ID callback. */
    public var generate_session_id: OpenSSL.GEN_SESSION_CB!

    /* Used in SSL2 and SSL3 */
    /*
     * 0 don't care about verify failure.
     * 1 fail if verify fails
     */
    public var verify_mode: Int32

    /* fail if callback returns 0 */
    public var verify_callback: (@convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!

    /* optional informational callback */
    public var info_callback: (@convention(c) (UnsafePointer<SSL>?, Int32, Int32) -> Swift.Void)!

    /* error bytes to be written */
    public var error: Int32

    /* actual code */
    public var error_code: Int32

    
    /* Kerberos 5 context */
    
    /* OPENSSL_NO_KRB5 */
    
    public var psk_client_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<Int8>?, UInt32, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!

    public var psk_server_callback: (@convention(c) (UnsafeMutablePointer<SSL>?, UnsafePointer<Int8>?, UnsafeMutablePointer<UInt8>?, UInt32) -> UInt32)!

    
    public var ctx: UnsafeMutablePointer<SSL_CTX>!

    /*
     * set this flag to 1 and a sleep(1) is put into all SSL_read() and
     * SSL_write() calls, good for nbio debuging :-)
     */
    public var debug: Int32

    /* extra application data */
    public var verify_result: Int

    public var ex_data: CRYPTO_EX_DATA

    /* for server side, keep the list of CA_dn we can use */
    public var client_CA: UnsafeMutablePointer<stack_st_X509_NAME>!

    public var references: Int32

    /* protocol behaviour */
    public var options: UInt

    /* API behaviour */
    public var mode: UInt

    public var max_cert_list: Int

    public var first_packet: Int32

    /* what was passed, used for SSLv3/TLS rollback check */
    public var client_version: Int32

    public var max_send_fragment: UInt32

    
    /* TLS extension debug callback */
    public var tlsext_debug_cb: (@convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32, UnsafeMutablePointer<UInt8>?, Int32, UnsafeMutableRawPointer?) -> Swift.Void)!

    public var tlsext_debug_arg: UnsafeMutableRawPointer!

    public var tlsext_hostname: UnsafeMutablePointer<Int8>!

    /*-
     * no further mod of servername
     * 0 : call the servername extension callback.
     * 1 : prepare 2, allow last ack just after in server callback.
     * 2 : don't call servername callback, no ack in server hello
     */
    public var servername_done: Int32

    /* certificate status request info */
    /* Status type or -1 if no status type */
    public var tlsext_status_type: Int32

    /* Expect OCSP CertificateStatus message */
    public var tlsext_status_expected: Int32

    /* OCSP status request only */
    public var tlsext_ocsp_ids: OpaquePointer!

    public var tlsext_ocsp_exts: UnsafeMutablePointer<X509_EXTENSIONS>!

    /* OCSP response received or to be sent */
    public var tlsext_ocsp_resp: UnsafeMutablePointer<UInt8>!

    public var tlsext_ocsp_resplen: Int32

    /* RFC4507 session ticket expected to be received or sent */
    public var tlsext_ticket_expected: Int32

    
    public var tlsext_ecpointformatlist_length: Int

    /* our list */
    public var tlsext_ecpointformatlist: UnsafeMutablePointer<UInt8>!

    public var tlsext_ellipticcurvelist_length: Int

    /* our list */
    public var tlsext_ellipticcurvelist: UnsafeMutablePointer<UInt8>!

    /* OPENSSL_NO_EC */
    /*
     * draft-rescorla-tls-opaque-prf-input-00.txt information to be used for
     * handshakes
     */
    public var tlsext_opaque_prf_input: UnsafeMutableRawPointer!

    public var tlsext_opaque_prf_input_len: Int

    /* TLS Session Ticket extension override */
    public var tlsext_session_ticket: UnsafeMutablePointer<TLS_SESSION_TICKET_EXT>!

    /* TLS Session Ticket extension callback */
    public var tls_session_ticket_ext_cb: OpenSSL.tls_session_ticket_ext_cb_fn!

    public var tls_session_ticket_ext_cb_arg: UnsafeMutableRawPointer!

    /* TLS pre-shared secret session resumption */
    public var tls_session_secret_cb: OpenSSL.tls_session_secret_cb_fn!

    public var tls_session_secret_cb_arg: UnsafeMutableRawPointer!

    public var initial_ctx: UnsafeMutablePointer<SSL_CTX>! /* initial ctx, used to store sessions */

    
    /*
     * Next protocol negotiation. For the client, this is the protocol that
     * we sent in NextProtocol and is set when handling ServerHello
     * extensions. For a server, this is the client's selected_protocol from
     * NextProtocol and is set when handling the NextProtocol message, before
     * the Finished message.
     */
    public var next_proto_negotiated: UnsafeMutablePointer<UInt8>!

    public var next_proto_negotiated_len: UInt8

    
    /* What we'll do */
    public var srtp_profiles: UnsafeMutablePointer<stack_st_SRTP_PROTECTION_PROFILE>!

    /* What's been chosen */
    public var srtp_profile: UnsafeMutablePointer<SRTP_PROTECTION_PROFILE>!

    /*-
     * Is use of the Heartbeat extension negotiated?
     * 0: disabled
     * 1: enabled
     * 2: enabled, but not allowed to send Requests
     */
    public var tlsext_heartbeat: UInt32

    /* Indicates if a HeartbeatRequest is in flight */
    public var tlsext_hb_pending: UInt32

    /* HeartbeatRequest sequence number */
    public var tlsext_hb_seq: UInt32

    
    /* OPENSSL_NO_TLSEXT */
    /*-
     * 1 if we are renegotiating.
     * 2 if we are a server and are inside a handshake
     * (i.e. not just sending a HelloRequest)
     */
    public var renegotiate: Int32

    
    /* ctx for SRP authentication */
    public var srp_ctx: SRP_CTX

    
    /*
     * For a client, this contains the list of supported protocols in wire
     * format.
     */
    public var alpn_client_proto_list: UnsafeMutablePointer<UInt8>!

    public var alpn_client_proto_list_len: UInt32

    public init()
}
/* ssl/ssl2.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Protocol Version Codes */
public var SSL2_VERSION: Int32 { get }
public var SSL2_VERSION_MAJOR: Int32 { get }
public var SSL2_VERSION_MINOR: Int32 { get }
/* #define SSL2_CLIENT_VERSION  0x0002 */
/* #define SSL2_SERVER_VERSION  0x0002 */

/* Protocol Message Codes */
public var SSL2_MT_ERROR: Int32 { get }
public var SSL2_MT_CLIENT_HELLO: Int32 { get }
public var SSL2_MT_CLIENT_MASTER_KEY: Int32 { get }
public var SSL2_MT_CLIENT_FINISHED: Int32 { get }
public var SSL2_MT_SERVER_HELLO: Int32 { get }
public var SSL2_MT_SERVER_VERIFY: Int32 { get }
public var SSL2_MT_SERVER_FINISHED: Int32 { get }
public var SSL2_MT_REQUEST_CERTIFICATE: Int32 { get }
public var SSL2_MT_CLIENT_CERTIFICATE: Int32 { get }

/* Error Message Codes */
public var SSL2_PE_UNDEFINED_ERROR: Int32 { get }
public var SSL2_PE_NO_CIPHER: Int32 { get }
public var SSL2_PE_NO_CERTIFICATE: Int32 { get }
public var SSL2_PE_BAD_CERTIFICATE: Int32 { get }
public var SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE: Int32 { get }

/* Cipher Kind Values */
public var SSL2_CK_NULL_WITH_MD5: Int32 { get } /* v3 */
public var SSL2_CK_RC4_128_WITH_MD5: Int32 { get }
public var SSL2_CK_RC4_128_EXPORT40_WITH_MD5: Int32 { get }
public var SSL2_CK_RC2_128_CBC_WITH_MD5: Int32 { get }
public var SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5: Int32 { get }
public var SSL2_CK_IDEA_128_CBC_WITH_MD5: Int32 { get }
public var SSL2_CK_DES_64_CBC_WITH_MD5: Int32 { get }
public var SSL2_CK_DES_64_CBC_WITH_SHA: Int32 { get } /* v3 */
public var SSL2_CK_DES_192_EDE3_CBC_WITH_MD5: Int32 { get }
public var SSL2_CK_DES_192_EDE3_CBC_WITH_SHA: Int32 { get } /* v3 */
public var SSL2_CK_RC4_64_WITH_MD5: Int32 { get } /* MS hack */

public var SSL2_CK_DES_64_CFB64_WITH_MD5_1: Int32 { get } /* SSLeay */
public var SSL2_CK_NULL: Int32 { get } /* SSLeay */

public var SSL2_TXT_DES_64_CFB64_WITH_MD5_1: String { get }
public var SSL2_TXT_NULL_WITH_MD5: String { get }
public var SSL2_TXT_RC4_128_WITH_MD5: String { get }
public var SSL2_TXT_RC4_128_EXPORT40_WITH_MD5: String { get }
public var SSL2_TXT_RC2_128_CBC_WITH_MD5: String { get }
public var SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5: String { get }
public var SSL2_TXT_IDEA_128_CBC_WITH_MD5: String { get }
public var SSL2_TXT_DES_64_CBC_WITH_MD5: String { get }
public var SSL2_TXT_DES_64_CBC_WITH_SHA: String { get }
public var SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5: String { get }
public var SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA: String { get }
public var SSL2_TXT_RC4_64_WITH_MD5: String { get }

public var SSL2_TXT_NULL: String { get }

/* Flags for the SSL_CIPHER.algorithm2 field */
public var SSL2_CF_5_BYTE_ENC: Int32 { get }
public var SSL2_CF_8_BYTE_ENC: Int32 { get }

/* Certificate Type Codes */
public var SSL2_CT_X509_CERTIFICATE: Int32 { get }

/* Authentication Type Code */
public var SSL2_AT_MD5_WITH_RSA_ENCRYPTION: Int32 { get }

public var SSL2_MAX_SSL_SESSION_ID_LENGTH: Int32 { get }

/* Upper/Lower Bounds */
public var SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS: Int32 { get }

public var SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER: UInt32 { get }
/* 2^15-1 */

public var SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER: Int32 { get } /* 2^14-1 */

public var SSL2_CHALLENGE_LENGTH: Int32 { get }
/*
 * #define SSL2_CHALLENGE_LENGTH 32
 */
public var SSL2_MIN_CHALLENGE_LENGTH: Int32 { get }
public var SSL2_MAX_CHALLENGE_LENGTH: Int32 { get }
public var SSL2_CONNECTION_ID_LENGTH: Int32 { get }
public var SSL2_MAX_CONNECTION_ID_LENGTH: Int32 { get }
public var SSL2_SSL_SESSION_ID_LENGTH: Int32 { get }
public var SSL2_MAX_CERT_CHALLENGE_LENGTH: Int32 { get }
public var SSL2_MIN_CERT_CHALLENGE_LENGTH: Int32 { get }
public var SSL2_MAX_KEY_MATERIAL_LENGTH: Int32 { get }

public struct ssl2_state_st {

    
    /* clear text */
    /* not used in SSLv2 */
    /* used if SSLv23 rolled back to SSLv2 */
    /*
     * non-blocking io info, used to make sure the same args were passwd
     */
    /* number of bytes sent so far */
    
    /* offset to data to write */
    /* number of bytes passwd to write */
    /* number of bytes to return to caller */
    /* buffer raw data */
    
    /* used to point to the start due to 2/3 byte
     * header. */
    
    /* passed to ssl2_enc */
    /* Set when things are encrypted. */
    /* passed to ssl2_enc */
    /* Set when things are decrypted. */
    
    /* Stuff specifically to do with this SSL session */
    
    public struct __Unnamed_struct_tmp {

        public var conn_id_length: UInt32

        public var cert_type: UInt32

        public var cert_length: UInt32

        public var csl: UInt32

        public var clear: UInt32

        public var enc: UInt32

        public var ccl: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

        public var cipher_spec_length: UInt32

        public var session_id_length: UInt32

        public var clen: UInt32

        public var rlen: UInt32

        public init()

        public init(conn_id_length: UInt32, cert_type: UInt32, cert_length: UInt32, csl: UInt32, clear: UInt32, enc: UInt32, ccl: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), cipher_spec_length: UInt32, session_id_length: UInt32, clen: UInt32, rlen: UInt32)
    }

    public var three_byte_header: Int32

    public var clear_text: Int32

    public var escape: Int32

    public var ssl2_rollback: Int32

    public var wnum: UInt32

    public var wpend_tot: Int32

    public var wpend_buf: UnsafePointer<UInt8>!

    public var wpend_off: Int32

    public var wpend_len: Int32

    public var wpend_ret: Int32

    public var rbuf_left: Int32

    public var rbuf_offs: Int32

    public var rbuf: UnsafeMutablePointer<UInt8>!

    public var wbuf: UnsafeMutablePointer<UInt8>!

    public var write_ptr: UnsafeMutablePointer<UInt8>!

    public var padding: UInt32

    public var rlength: UInt32

    public var ract_data_length: Int32

    public var wlength: UInt32

    public var wact_data_length: Int32

    public var ract_data: UnsafeMutablePointer<UInt8>!

    public var wact_data: UnsafeMutablePointer<UInt8>!

    public var mac_data: UnsafeMutablePointer<UInt8>!

    public var read_key: UnsafeMutablePointer<UInt8>!

    public var write_key: UnsafeMutablePointer<UInt8>!

    public var challenge_length: UInt32

    public var challenge: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var conn_id_length: UInt32

    public var conn_id: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var key_material_length: UInt32

    public var key_material: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var read_sequence: UInt

    public var write_sequence: UInt

    public var tmp: ssl2_state_st.__Unnamed_struct_tmp

    public init()

    public init(three_byte_header: Int32, clear_text: Int32, escape: Int32, ssl2_rollback: Int32, wnum: UInt32, wpend_tot: Int32, wpend_buf: UnsafePointer<UInt8>!, wpend_off: Int32, wpend_len: Int32, wpend_ret: Int32, rbuf_left: Int32, rbuf_offs: Int32, rbuf: UnsafeMutablePointer<UInt8>!, wbuf: UnsafeMutablePointer<UInt8>!, write_ptr: UnsafeMutablePointer<UInt8>!, padding: UInt32, rlength: UInt32, ract_data_length: Int32, wlength: UInt32, wact_data_length: Int32, ract_data: UnsafeMutablePointer<UInt8>!, wact_data: UnsafeMutablePointer<UInt8>!, mac_data: UnsafeMutablePointer<UInt8>!, read_key: UnsafeMutablePointer<UInt8>!, write_key: UnsafeMutablePointer<UInt8>!, challenge_length: UInt32, challenge: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), conn_id_length: UInt32, conn_id: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), key_material_length: UInt32, key_material: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), read_sequence: UInt, write_sequence: UInt, tmp: ssl2_state_st.__Unnamed_struct_tmp)
}
public typealias SSL2_STATE = ssl2_state_st
/* ssl/ssl3.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 * ECC cipher suite support in OpenSSL originally developed by
 * SUN MICROSYSTEMS, INC., and contributed to the OpenSSL project.
 */

/*
 * Signalling cipher suite value from RFC 5746
 * (TLS_EMPTY_RENEGOTIATION_INFO_SCSV)
 */
public var SSL3_CK_SCSV: Int32 { get }

/*
 * Signalling cipher suite value from draft-ietf-tls-downgrade-scsv-00
 * (TLS_FALLBACK_SCSV)
 */
public var SSL3_CK_FALLBACK_SCSV: Int32 { get }

public var SSL3_CK_RSA_NULL_MD5: Int32 { get }
public var SSL3_CK_RSA_NULL_SHA: Int32 { get }
public var SSL3_CK_RSA_RC4_40_MD5: Int32 { get }
public var SSL3_CK_RSA_RC4_128_MD5: Int32 { get }
public var SSL3_CK_RSA_RC4_128_SHA: Int32 { get }
public var SSL3_CK_RSA_RC2_40_MD5: Int32 { get }
public var SSL3_CK_RSA_IDEA_128_SHA: Int32 { get }
public var SSL3_CK_RSA_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_RSA_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_RSA_DES_192_CBC3_SHA: Int32 { get }

public var SSL3_CK_DH_DSS_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_DH_DSS_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_DH_DSS_DES_192_CBC3_SHA: Int32 { get }
public var SSL3_CK_DH_RSA_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_DH_RSA_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_DH_RSA_DES_192_CBC3_SHA: Int32 { get }

public var SSL3_CK_EDH_DSS_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_DHE_DSS_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_EDH_DSS_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_DHE_DSS_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_EDH_DSS_DES_192_CBC3_SHA: Int32 { get }
public var SSL3_CK_DHE_DSS_DES_192_CBC3_SHA: Int32 { get }
public var SSL3_CK_EDH_RSA_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_DHE_RSA_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_EDH_RSA_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_DHE_RSA_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_EDH_RSA_DES_192_CBC3_SHA: Int32 { get }
public var SSL3_CK_DHE_RSA_DES_192_CBC3_SHA: Int32 { get }

public var SSL3_CK_ADH_RC4_40_MD5: Int32 { get }
public var SSL3_CK_ADH_RC4_128_MD5: Int32 { get }
public var SSL3_CK_ADH_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_ADH_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_ADH_DES_192_CBC_SHA: Int32 { get }

/* Because it clashes with KRB5, is never
 * used any more, and is safe to remove
 * according to David Hopwood
 * <david.hopwood@zetnet.co.uk> of the
 * ietf-tls list */

/*
 * VRS Additional Kerberos5 entries
 */
public var SSL3_CK_KRB5_DES_64_CBC_SHA: Int32 { get }
public var SSL3_CK_KRB5_DES_192_CBC3_SHA: Int32 { get }
public var SSL3_CK_KRB5_RC4_128_SHA: Int32 { get }
public var SSL3_CK_KRB5_IDEA_128_CBC_SHA: Int32 { get }
public var SSL3_CK_KRB5_DES_64_CBC_MD5: Int32 { get }
public var SSL3_CK_KRB5_DES_192_CBC3_MD5: Int32 { get }
public var SSL3_CK_KRB5_RC4_128_MD5: Int32 { get }
public var SSL3_CK_KRB5_IDEA_128_CBC_MD5: Int32 { get }

public var SSL3_CK_KRB5_DES_40_CBC_SHA: Int32 { get }
public var SSL3_CK_KRB5_RC2_40_CBC_SHA: Int32 { get }
public var SSL3_CK_KRB5_RC4_40_SHA: Int32 { get }
public var SSL3_CK_KRB5_DES_40_CBC_MD5: Int32 { get }
public var SSL3_CK_KRB5_RC2_40_CBC_MD5: Int32 { get }
public var SSL3_CK_KRB5_RC4_40_MD5: Int32 { get }

public var SSL3_TXT_RSA_NULL_MD5: String { get }
public var SSL3_TXT_RSA_NULL_SHA: String { get }
public var SSL3_TXT_RSA_RC4_40_MD5: String { get }
public var SSL3_TXT_RSA_RC4_128_MD5: String { get }
public var SSL3_TXT_RSA_RC4_128_SHA: String { get }
public var SSL3_TXT_RSA_RC2_40_MD5: String { get }
public var SSL3_TXT_RSA_IDEA_128_SHA: String { get }
public var SSL3_TXT_RSA_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_RSA_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_RSA_DES_192_CBC3_SHA: String { get }

public var SSL3_TXT_DH_DSS_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_DH_DSS_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_DH_DSS_DES_192_CBC3_SHA: String { get }
public var SSL3_TXT_DH_RSA_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_DH_RSA_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_DH_RSA_DES_192_CBC3_SHA: String { get }

public var SSL3_TXT_DHE_DSS_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_DHE_DSS_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_DHE_DSS_DES_192_CBC3_SHA: String { get }
public var SSL3_TXT_DHE_RSA_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_DHE_RSA_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_DHE_RSA_DES_192_CBC3_SHA: String { get }

/*
 * This next block of six "EDH" labels is for backward compatibility with
 * older versions of OpenSSL.  New code should use the six "DHE" labels above
 * instead:
 */
public var SSL3_TXT_EDH_DSS_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_EDH_DSS_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA: String { get }
public var SSL3_TXT_EDH_RSA_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_EDH_RSA_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA: String { get }

public var SSL3_TXT_ADH_RC4_40_MD5: String { get }
public var SSL3_TXT_ADH_RC4_128_MD5: String { get }
public var SSL3_TXT_ADH_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_ADH_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_ADH_DES_192_CBC_SHA: String { get }

public var SSL3_TXT_KRB5_DES_64_CBC_SHA: String { get }
public var SSL3_TXT_KRB5_DES_192_CBC3_SHA: String { get }
public var SSL3_TXT_KRB5_RC4_128_SHA: String { get }
public var SSL3_TXT_KRB5_IDEA_128_CBC_SHA: String { get }
public var SSL3_TXT_KRB5_DES_64_CBC_MD5: String { get }
public var SSL3_TXT_KRB5_DES_192_CBC3_MD5: String { get }
public var SSL3_TXT_KRB5_RC4_128_MD5: String { get }
public var SSL3_TXT_KRB5_IDEA_128_CBC_MD5: String { get }

public var SSL3_TXT_KRB5_DES_40_CBC_SHA: String { get }
public var SSL3_TXT_KRB5_RC2_40_CBC_SHA: String { get }
public var SSL3_TXT_KRB5_RC4_40_SHA: String { get }
public var SSL3_TXT_KRB5_DES_40_CBC_MD5: String { get }
public var SSL3_TXT_KRB5_RC2_40_CBC_MD5: String { get }
public var SSL3_TXT_KRB5_RC4_40_MD5: String { get }

public var SSL3_SSL_SESSION_ID_LENGTH: Int32 { get }
public var SSL3_MAX_SSL_SESSION_ID_LENGTH: Int32 { get }

public var SSL3_MASTER_SECRET_SIZE: Int32 { get }
public var SSL3_RANDOM_SIZE: Int32 { get }
public var SSL3_SESSION_ID_SIZE: Int32 { get }
public var SSL3_RT_HEADER_LENGTH: Int32 { get }

public var SSL3_HM_HEADER_LENGTH: Int32 { get }

/*
 * Some will argue that this increases memory footprint, but it's not
 * actually true. Point is that malloc has to return at least 64-bit aligned
 * pointers, meaning that allocating 5 bytes wastes 3 bytes in either case.
 * Suggested pre-gaping simply moves these wasted bytes from the end of
 * allocated region to its front, but makes data payload aligned, which
 * improves performance:-)
 */
public var SSL3_ALIGN_PAYLOAD: Int32 { get }

/*
 * This is the maximum MAC (digest) size used by the SSL library. Currently
 * maximum of 20 is used by SHA1, but we reserve for future extension for
 * 512-bit hashes.
 */

public var SSL3_RT_MAX_MD_SIZE: Int32 { get }

/*
 * Maximum block size used in all ciphersuites. Currently 16 for AES.
 */

public var SSL_RT_MAX_CIPHER_BLOCK_SIZE: Int32 { get }

public var SSL3_RT_MAX_EXTRA: Int32 { get }

/* Maximum plaintext length: defined by SSL/TLS standards */
public var SSL3_RT_MAX_PLAIN_LENGTH: Int32 { get }
/* Maximum compression overhead: defined by SSL/TLS standards */
public var SSL3_RT_MAX_COMPRESSED_OVERHEAD: Int32 { get }

/*
 * The standards give a maximum encryption overhead of 1024 bytes. In
 * practice the value is lower than this. The overhead is the maximum number
 * of padding bytes (256) plus the mac size.
 */

/*
 * OpenSSL currently only uses a padding length of at most one block so the
 * send overhead is smaller.
 */

/* If compression isn't used don't include the compression overhead */

public var SSL3_MD_CLIENT_FINISHED_CONST: String { get }
public var SSL3_MD_SERVER_FINISHED_CONST: String { get }

public var SSL3_VERSION: Int32 { get }
public var SSL3_VERSION_MAJOR: Int32 { get }
public var SSL3_VERSION_MINOR: Int32 { get }

public var SSL3_RT_CHANGE_CIPHER_SPEC: Int32 { get }
public var SSL3_RT_ALERT: Int32 { get }
public var SSL3_RT_HANDSHAKE: Int32 { get }
public var SSL3_RT_APPLICATION_DATA: Int32 { get }
public var TLS1_RT_HEARTBEAT: Int32 { get }

/* Pseudo content types to indicate additional parameters */
public var TLS1_RT_CRYPTO: Int32 { get }

public var TLS1_RT_CRYPTO_READ: Int32 { get }
public var TLS1_RT_CRYPTO_WRITE: Int32 { get }

/* Pseudo content type for SSL/TLS header info */
public var SSL3_RT_HEADER: Int32 { get }

public var SSL3_AL_WARNING: Int32 { get }
public var SSL3_AL_FATAL: Int32 { get }

public var SSL3_AD_CLOSE_NOTIFY: Int32 { get }
public var SSL3_AD_UNEXPECTED_MESSAGE: Int32 { get } /* fatal */
public var SSL3_AD_BAD_RECORD_MAC: Int32 { get } /* fatal */
public var SSL3_AD_DECOMPRESSION_FAILURE: Int32 { get } /* fatal */
public var SSL3_AD_HANDSHAKE_FAILURE: Int32 { get } /* fatal */
public var SSL3_AD_NO_CERTIFICATE: Int32 { get }
public var SSL3_AD_BAD_CERTIFICATE: Int32 { get }
public var SSL3_AD_UNSUPPORTED_CERTIFICATE: Int32 { get }
public var SSL3_AD_CERTIFICATE_REVOKED: Int32 { get }
public var SSL3_AD_CERTIFICATE_EXPIRED: Int32 { get }
public var SSL3_AD_CERTIFICATE_UNKNOWN: Int32 { get }
public var SSL3_AD_ILLEGAL_PARAMETER: Int32 { get } /* fatal */

public var TLS1_HB_REQUEST: Int32 { get }
public var TLS1_HB_RESPONSE: Int32 { get }

public struct ssl3_record_st {

    /* type of record */
    /*
     * r
     */
    public var type: Int32

    /* How many bytes available */
    /*
     * rw
     */
    public var length: UInt32

    /* read/write offset into 'buf' */
    /*
     * r
     */
    public var off: UInt32

    /* pointer to the record data */
    /*
     * rw
     */
    public var data: UnsafeMutablePointer<UInt8>!

    /* where the decode bytes are */
    /*
     * rw
     */
    public var input: UnsafeMutablePointer<UInt8>!

    /* only used with decompression - malloc()ed */
    /*
     * r
     */
    public var comp: UnsafeMutablePointer<UInt8>!

    /* epoch number, needed by DTLS1 */
    /*
     * r
     */
    public var epoch: UInt

    /* sequence number, needed by DTLS1 */
    /*
     * r
     */
    public var seq_num: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public init()

    public init(type: Int32, length: UInt32, off: UInt32, data: UnsafeMutablePointer<UInt8>!, input: UnsafeMutablePointer<UInt8>!, comp: UnsafeMutablePointer<UInt8>!, epoch: UInt, seq_num: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
public typealias SSL3_RECORD = ssl3_record_st

public struct ssl3_buffer_st {

    /* at least SSL3_RT_MAX_PACKET_SIZE bytes, see ssl3_setup_buffers() */
    public var buf: UnsafeMutablePointer<UInt8>!

    /* buffer size */
    public var len: Int

    /* where to 'copy from' */
    public var offset: Int32

    /* how many bytes left */
    public var left: Int32

    public init()

    public init(buf: UnsafeMutablePointer<UInt8>!, len: Int, offset: Int32, left: Int32)
}
public typealias SSL3_BUFFER = ssl3_buffer_st

public var SSL3_CT_RSA_SIGN: Int32 { get }
public var SSL3_CT_DSS_SIGN: Int32 { get }
public var SSL3_CT_RSA_FIXED_DH: Int32 { get }
public var SSL3_CT_DSS_FIXED_DH: Int32 { get }
public var SSL3_CT_RSA_EPHEMERAL_DH: Int32 { get }
public var SSL3_CT_DSS_EPHEMERAL_DH: Int32 { get }
public var SSL3_CT_FORTEZZA_DMS: Int32 { get }
/*
 * SSL3_CT_NUMBER is used to size arrays and it must be large enough to
 * contain all of the cert types defined either for SSLv3 and TLSv1.
 */
public var SSL3_CT_NUMBER: Int32 { get }

public var SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS: Int32 { get }
public var SSL3_FLAGS_DELAY_CLIENT_FINISHED: Int32 { get }
public var SSL3_FLAGS_POP_BUFFER: Int32 { get }
public var TLS1_FLAGS_TLS_PADDING_BUG: Int32 { get }
public var TLS1_FLAGS_SKIP_CERT_VERIFY: Int32 { get }
public var TLS1_FLAGS_KEEP_HANDSHAKE: Int32 { get }
/*
 * Set when the handshake is ready to process peer's ChangeCipherSpec message.
 * Cleared after the message has been processed.
 */
public var SSL3_FLAGS_CCS_OK: Int32 { get }

/* SSL3_FLAGS_SGC_RESTART_DONE is no longer used */
public var SSL3_FLAGS_SGC_RESTART_DONE: Int32 { get }

public struct ssl3_state_st {

    
    /* flags for countermeasure against known-IV weakness */
    
    /* The value of 'extra' when the buffers were initialized */
    
    /* read IO goes into here */
    /* write IO goes into here */
    /* each decoded record goes in here */
    /* goes out from here */
    /*
     * storage for Alert/Handshake protocol data received but not yet
     * processed by ssl3_read_bytes:
     */
    
    /* partial write - check the numbers match */
    /* number of bytes sent so far */
    /* number bytes written */
    
    /* number of bytes submitted */
    
    /* used during startup, digest all incoming/outgoing packets */
    
    /*
     * When set of handshake digests is determined, buffer is hashed and
     * freed and MD_CTX-es for all required digests are stored in this array
     */
    
    /*
     * Set whenever an expected ChangeCipherSpec message is processed.
     * Unset when the peer's Finished message is received.
     * Unexpected ChangeCipherSpec messages trigger a fatal alert.
     */
    
    /*
     * we allow one fatal and one warning alert to be outstanding, send close
     * alert via the warning alert
     */
    
    /*
     * This flag is set when we should renegotiate ASAP, basically when there
     * is no more data in the read or write buffers
     */
    
    /*
     * Opaque PRF input as used for the current handshake. These fields are
     * used only if TLSEXT_TYPE_opaque_prf_input is defined (otherwise, they
     * are merely present to improve binary compatibility)
     */
    
    public struct __Unnamed_struct_tmp {

        /* actually only needs to be 16+20 */
        public var cert_verify_md: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

        /* actually only need to be 16+20 for SSLv3 and 12 for TLS */
        public var finish_md: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

        public var finish_md_len: Int32

        public var peer_finish_md: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

        public var peer_finish_md_len: Int32

        public var message_size: UInt

        public var message_type: Int32

        /* used to hold the new cipher we are going to use */
        public var new_cipher: UnsafePointer<SSL_CIPHER>!

        
        public var dh: UnsafeMutablePointer<DH>!

        
        public var ecdh: OpaquePointer! /* holds short lived ECDH key */

        
        /* used when SSL_ST_FLUSH_DATA is entered */
        public var next_state: Int32

        public var reuse_message: Int32

        /* used for certificate requests */
        public var cert_req: Int32

        public var ctype_num: Int32

        public var ctype: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8)

        public var ca_names: UnsafeMutablePointer<stack_st_X509_NAME>!

        public var use_rsa_tmp: Int32

        public var key_block_length: Int32

        public var key_block: UnsafeMutablePointer<UInt8>!

        public var new_sym_enc: UnsafePointer<EVP_CIPHER>!

        public var new_hash: UnsafePointer<EVP_MD>!

        public var new_mac_pkey_type: Int32

        public var new_mac_secret_size: Int32

        
        public var new_compression: UnsafePointer<SSL_COMP>!

        
        public var cert_request: Int32

        public init()

        public init(cert_verify_md: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), finish_md: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), finish_md_len: Int32, peer_finish_md: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), peer_finish_md_len: Int32, message_size: UInt, message_type: Int32, new_cipher: UnsafePointer<SSL_CIPHER>!, dh: UnsafeMutablePointer<DH>!, ecdh: OpaquePointer!, next_state: Int32, reuse_message: Int32, cert_req: Int32, ctype_num: Int32, ctype: (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8), ca_names: UnsafeMutablePointer<stack_st_X509_NAME>!, use_rsa_tmp: Int32, key_block_length: Int32, key_block: UnsafeMutablePointer<UInt8>!, new_sym_enc: UnsafePointer<EVP_CIPHER>!, new_hash: UnsafePointer<EVP_MD>!, new_mac_pkey_type: Int32, new_mac_secret_size: Int32, new_compression: UnsafePointer<SSL_COMP>!, cert_request: Int32)
    }

    public var flags: Int

    public var delay_buf_pop_ret: Int32

    public var read_sequence: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var read_mac_secret_size: Int32

    public var read_mac_secret: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var write_sequence: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var write_mac_secret_size: Int32

    public var write_mac_secret: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var server_random: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var client_random: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var need_empty_fragments: Int32

    public var empty_fragment_done: Int32

    public var init_extra: Int32

    public var rbuf: SSL3_BUFFER

    public var wbuf: SSL3_BUFFER

    public var rrec: SSL3_RECORD

    public var wrec: SSL3_RECORD

    public var alert_fragment: (UInt8, UInt8)

    public var alert_fragment_len: UInt32

    public var handshake_fragment: (UInt8, UInt8, UInt8, UInt8)

    public var handshake_fragment_len: UInt32

    public var wnum: UInt32

    public var wpend_tot: Int32

    public var wpend_type: Int32

    public var wpend_ret: Int32

    public var wpend_buf: UnsafePointer<UInt8>!

    public var handshake_buffer: UnsafeMutablePointer<BIO>!

    public var handshake_dgst: UnsafeMutablePointer<UnsafeMutablePointer<EVP_MD_CTX>?>!

    public var change_cipher_spec: Int32

    public var warn_alert: Int32

    public var fatal_alert: Int32

    public var alert_dispatch: Int32

    public var send_alert: (UInt8, UInt8)

    public var renegotiate: Int32

    public var total_renegotiations: Int32

    public var num_renegotiations: Int32

    public var in_read_app_data: Int32

    public var client_opaque_prf_input: UnsafeMutableRawPointer!

    public var client_opaque_prf_input_len: Int

    public var server_opaque_prf_input: UnsafeMutableRawPointer!

    public var server_opaque_prf_input_len: Int

    public var tmp: ssl3_state_st.__Unnamed_struct_tmp

    
    /* Connection binding to prevent renegotiation attacks */
    public var previous_client_finished: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var previous_client_finished_len: UInt8

    public var previous_server_finished: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var previous_server_finished_len: UInt8

    public var send_connection_binding: Int32 /* TODOEKR */

    
    /*
     * Set if we saw the Next Protocol Negotiation extension from our peer.
     */
    public var next_proto_neg_seen: Int32

    
    /*
     * This is set to true if we believe that this is a version of Safari
     * running on OS X 10.6 or newer. We wish to know this because Safari on
     * 10.8 .. 10.8.3 has broken ECDHE-ECDSA support.
     */
    public var is_probably_safari: Int8

    /* !OPENSSL_NO_EC */
    
    /*
     * ALPN information (we are in the process of transitioning from NPN to
     * ALPN.)
     */
    
    /*
     * In a server these point to the selected ALPN protocol after the
     * ClientHello has been processed. In a client these contain the protocol
     * that the server selected once the ServerHello has been processed.
     */
    public var alpn_selected: UnsafeMutablePointer<UInt8>!

    public var alpn_selected_len: UInt32

    public init()

    public init(flags: Int, delay_buf_pop_ret: Int32, read_sequence: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), read_mac_secret_size: Int32, read_mac_secret: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), write_sequence: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), write_mac_secret_size: Int32, write_mac_secret: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), server_random: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), client_random: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), need_empty_fragments: Int32, empty_fragment_done: Int32, init_extra: Int32, rbuf: SSL3_BUFFER, wbuf: SSL3_BUFFER, rrec: SSL3_RECORD, wrec: SSL3_RECORD, alert_fragment: (UInt8, UInt8), alert_fragment_len: UInt32, handshake_fragment: (UInt8, UInt8, UInt8, UInt8), handshake_fragment_len: UInt32, wnum: UInt32, wpend_tot: Int32, wpend_type: Int32, wpend_ret: Int32, wpend_buf: UnsafePointer<UInt8>!, handshake_buffer: UnsafeMutablePointer<BIO>!, handshake_dgst: UnsafeMutablePointer<UnsafeMutablePointer<EVP_MD_CTX>?>!, change_cipher_spec: Int32, warn_alert: Int32, fatal_alert: Int32, alert_dispatch: Int32, send_alert: (UInt8, UInt8), renegotiate: Int32, total_renegotiations: Int32, num_renegotiations: Int32, in_read_app_data: Int32, client_opaque_prf_input: UnsafeMutableRawPointer!, client_opaque_prf_input_len: Int, server_opaque_prf_input: UnsafeMutableRawPointer!, server_opaque_prf_input_len: Int, tmp: ssl3_state_st.__Unnamed_struct_tmp, previous_client_finished: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), previous_client_finished_len: UInt8, previous_server_finished: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), previous_server_finished_len: UInt8, send_connection_binding: Int32, next_proto_neg_seen: Int32, is_probably_safari: Int8, alpn_selected: UnsafeMutablePointer<UInt8>!, alpn_selected_len: UInt32)
}
public typealias SSL3_STATE = ssl3_state_st

/* OPENSSL_NO_TLSEXT */

/* SSLv3 */
/*
 * client
 */
/* extra state */

/* write to server */

/* read from server */

/* write to server */

/* read from server */

/* server */
/* extra state */

/* read from client */
/* Do not change the number values, they do matter */

/* write to client */

/* read from client */

/* write to client */

public var SSL3_MT_HELLO_REQUEST: Int32 { get }
public var SSL3_MT_CLIENT_HELLO: Int32 { get }
public var SSL3_MT_SERVER_HELLO: Int32 { get }
public var SSL3_MT_NEWSESSION_TICKET: Int32 { get }
public var SSL3_MT_CERTIFICATE: Int32 { get }
public var SSL3_MT_SERVER_KEY_EXCHANGE: Int32 { get }
public var SSL3_MT_CERTIFICATE_REQUEST: Int32 { get }
public var SSL3_MT_SERVER_DONE: Int32 { get }
public var SSL3_MT_CERTIFICATE_VERIFY: Int32 { get }
public var SSL3_MT_CLIENT_KEY_EXCHANGE: Int32 { get }
public var SSL3_MT_FINISHED: Int32 { get }
public var SSL3_MT_CERTIFICATE_STATUS: Int32 { get }

public var SSL3_MT_NEXT_PROTO: Int32 { get }

public var DTLS1_MT_HELLO_VERIFY_REQUEST: Int32 { get }

public var SSL3_MT_CCS: Int32 { get }

/* These are used when changing over to a new cipher */
public var SSL3_CC_READ: Int32 { get }
public var SSL3_CC_WRITE: Int32 { get }
public var SSL3_CC_CLIENT: Int32 { get }
public var SSL3_CC_SERVER: Int32 { get }
/* ssl/tls1.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
/* ====================================================================
 * Copyright 2002 Sun Microsystems, Inc. ALL RIGHTS RESERVED.
 *
 * Portions of the attached software ("Contribution") are developed by
 * SUN MICROSYSTEMS, INC., and are contributed to the OpenSSL project.
 *
 * The Contribution is licensed pursuant to the OpenSSL open source
 * license provided above.
 *
 * ECC cipher suite support in OpenSSL originally written by
 * Vipul Gupta and Sumit Gupta of Sun Microsystems Laboratories.
 *
 */
/* ====================================================================
 * Copyright 2005 Nokia. All rights reserved.
 *
 * The portions of the attached software ("Contribution") is developed by
 * Nokia Corporation and is licensed pursuant to the OpenSSL open source
 * license.
 *
 * The Contribution, originally written by Mika Kousa and Pasi Eronen of
 * Nokia Corporation, consists of the "PSK" (Pre-Shared Key) ciphersuites
 * support (see RFC 4279) to OpenSSL.
 *
 * No patent licenses or other rights except those expressly stated in
 * the OpenSSL open source license shall be deemed granted or received
 * expressly, by implication, estoppel, or otherwise.
 *
 * No assurances are provided by Nokia that the Contribution does not
 * infringe the patent or other intellectual property rights of any third
 * party or that the license provides you with all the necessary rights
 * to make use of the Contribution.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. IN
 * ADDITION TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA
 * SPECIFICALLY DISCLAIMS ANY LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY
 * OTHER ENTITY BASED ON INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR
 * OTHERWISE.
 */

public var TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES: Int32 { get }

public var TLS1_VERSION: Int32 { get }
public var TLS1_1_VERSION: Int32 { get }
public var TLS1_2_VERSION: Int32 { get }
public var TLS_MAX_VERSION: Int32 { get }

public var TLS1_VERSION_MAJOR: Int32 { get }
public var TLS1_VERSION_MINOR: Int32 { get }

public var TLS1_1_VERSION_MAJOR: Int32 { get }
public var TLS1_1_VERSION_MINOR: Int32 { get }

public var TLS1_2_VERSION_MAJOR: Int32 { get }
public var TLS1_2_VERSION_MINOR: Int32 { get }

public var TLS1_AD_DECRYPTION_FAILED: Int32 { get }
public var TLS1_AD_RECORD_OVERFLOW: Int32 { get }
public var TLS1_AD_UNKNOWN_CA: Int32 { get } /* fatal */
public var TLS1_AD_ACCESS_DENIED: Int32 { get } /* fatal */
public var TLS1_AD_DECODE_ERROR: Int32 { get } /* fatal */
public var TLS1_AD_DECRYPT_ERROR: Int32 { get }
public var TLS1_AD_EXPORT_RESTRICTION: Int32 { get } /* fatal */
public var TLS1_AD_PROTOCOL_VERSION: Int32 { get } /* fatal */
public var TLS1_AD_INSUFFICIENT_SECURITY: Int32 { get } /* fatal */
public var TLS1_AD_INTERNAL_ERROR: Int32 { get } /* fatal */
public var TLS1_AD_INAPPROPRIATE_FALLBACK: Int32 { get } /* fatal */
public var TLS1_AD_USER_CANCELLED: Int32 { get }
public var TLS1_AD_NO_RENEGOTIATION: Int32 { get }
/* codes 110-114 are from RFC3546 */
public var TLS1_AD_UNSUPPORTED_EXTENSION: Int32 { get }
public var TLS1_AD_CERTIFICATE_UNOBTAINABLE: Int32 { get }
public var TLS1_AD_UNRECOGNIZED_NAME: Int32 { get }
public var TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE: Int32 { get }
public var TLS1_AD_BAD_CERTIFICATE_HASH_VALUE: Int32 { get }
public var TLS1_AD_UNKNOWN_PSK_IDENTITY: Int32 { get } /* fatal */

/* ExtensionType values from RFC3546 / RFC4366 / RFC6066 */
public var TLSEXT_TYPE_server_name: Int32 { get }
public var TLSEXT_TYPE_max_fragment_length: Int32 { get }
public var TLSEXT_TYPE_client_certificate_url: Int32 { get }
public var TLSEXT_TYPE_trusted_ca_keys: Int32 { get }
public var TLSEXT_TYPE_truncated_hmac: Int32 { get }
public var TLSEXT_TYPE_status_request: Int32 { get }
/* ExtensionType values from RFC4681 */
public var TLSEXT_TYPE_user_mapping: Int32 { get }
/* ExtensionType values from RFC5878 */
public var TLSEXT_TYPE_client_authz: Int32 { get }
public var TLSEXT_TYPE_server_authz: Int32 { get }
/* ExtensionType values from RFC6091 */
public var TLSEXT_TYPE_cert_type: Int32 { get }

/* ExtensionType values from RFC4492 */
public var TLSEXT_TYPE_elliptic_curves: Int32 { get }
public var TLSEXT_TYPE_ec_point_formats: Int32 { get }

/* ExtensionType value from RFC5054 */
public var TLSEXT_TYPE_srp: Int32 { get }

/* ExtensionType values from RFC5246 */
public var TLSEXT_TYPE_signature_algorithms: Int32 { get }

/* ExtensionType value from RFC5764 */
public var TLSEXT_TYPE_use_srtp: Int32 { get }

/* ExtensionType value from RFC5620 */
public var TLSEXT_TYPE_heartbeat: Int32 { get }

/* ExtensionType value from RFC7301 */
public var TLSEXT_TYPE_application_layer_protocol_negotiation: Int32 { get }

/*
 * ExtensionType value for TLS padding extension.
 * http://tools.ietf.org/html/draft-agl-tls-padding
 */
public var TLSEXT_TYPE_padding: Int32 { get }

/* ExtensionType value from RFC4507 */
public var TLSEXT_TYPE_session_ticket: Int32 { get }

/* ExtensionType value from draft-rescorla-tls-opaque-prf-input-00.txt */

/*
 * will have to be provided externally for now ,
 * i.e. build with -DTLSEXT_TYPE_opaque_prf_input=38183
 * using whatever extension number you'd like to try
 */

/* Temporary extension type */
public var TLSEXT_TYPE_renegotiate: Int32 { get }

/* This is not an IANA defined extension number */
public var TLSEXT_TYPE_next_proto_neg: Int32 { get }

/* NameType value from RFC3546 */
public var TLSEXT_NAMETYPE_host_name: Int32 { get }
/* status request value from RFC3546 */
public var TLSEXT_STATUSTYPE_ocsp: Int32 { get }

/* ECPointFormat values from RFC4492 */
public var TLSEXT_ECPOINTFORMAT_first: Int32 { get }
public var TLSEXT_ECPOINTFORMAT_uncompressed: Int32 { get }
public var TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime: Int32 { get }
public var TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2: Int32 { get }
public var TLSEXT_ECPOINTFORMAT_last: Int32 { get }

/* Signature and hash algorithms from RFC5246 */
public var TLSEXT_signature_anonymous: Int32 { get }
public var TLSEXT_signature_rsa: Int32 { get }
public var TLSEXT_signature_dsa: Int32 { get }
public var TLSEXT_signature_ecdsa: Int32 { get }

/* Total number of different signature algorithms */
public var TLSEXT_signature_num: Int32 { get }

public var TLSEXT_hash_none: Int32 { get }
public var TLSEXT_hash_md5: Int32 { get }
public var TLSEXT_hash_sha1: Int32 { get }
public var TLSEXT_hash_sha224: Int32 { get }
public var TLSEXT_hash_sha256: Int32 { get }
public var TLSEXT_hash_sha384: Int32 { get }
public var TLSEXT_hash_sha512: Int32 { get }

/* Total number of different digest algorithms */

public var TLSEXT_hash_num: Int32 { get }

/* Flag set for unrecognised algorithms */
public var TLSEXT_nid_unknown: Int32 { get }

/* ECC curves */

public var TLSEXT_curve_P_256: Int32 { get }
public var TLSEXT_curve_P_384: Int32 { get }

public var TLSEXT_MAXLEN_host_name: Int32 { get }

public func SSL_get_servername(_ s: UnsafePointer<SSL>!, _ type: Int32) -> UnsafePointer<Int8>!
public func SSL_get_servername_type(_ s: UnsafePointer<SSL>!) -> Int32
/*
 * SSL_export_keying_material exports a value derived from the master secret,
 * as specified in RFC 5705. It writes |olen| bytes to |out| given a label and
 * optional context. (Since a zero length context is allowed, the |use_context|
 * flag controls whether a context is included.) It returns 1 on success and
 * zero otherwise.
 */
public func SSL_export_keying_material(_ s: UnsafeMutablePointer<SSL>!, _ out: UnsafeMutablePointer<UInt8>!, _ olen: Int, _ label: UnsafePointer<Int8>!, _ llen: Int, _ p: UnsafePointer<UInt8>!, _ plen: Int, _ use_context: Int32) -> Int32

public func SSL_get_sigalgs(_ s: UnsafeMutablePointer<SSL>!, _ idx: Int32, _ psign: UnsafeMutablePointer<Int32>!, _ phash: UnsafeMutablePointer<Int32>!, _ psignandhash: UnsafeMutablePointer<Int32>!, _ rsig: UnsafeMutablePointer<UInt8>!, _ rhash: UnsafeMutablePointer<UInt8>!) -> Int32

public func SSL_get_shared_sigalgs(_ s: UnsafeMutablePointer<SSL>!, _ idx: Int32, _ psign: UnsafeMutablePointer<Int32>!, _ phash: UnsafeMutablePointer<Int32>!, _ psignandhash: UnsafeMutablePointer<Int32>!, _ rsig: UnsafeMutablePointer<UInt8>!, _ rhash: UnsafeMutablePointer<UInt8>!) -> Int32

public func SSL_check_chain(_ s: UnsafeMutablePointer<SSL>!, _ x: UnsafeMutablePointer<X509>!, _ pk: UnsafeMutablePointer<EVP_PKEY>!, _ chain: UnsafeMutablePointer<stack_st_X509>!) -> Int32

public var SSL_TLSEXT_ERR_OK: Int32 { get }
public var SSL_TLSEXT_ERR_ALERT_WARNING: Int32 { get }
public var SSL_TLSEXT_ERR_ALERT_FATAL: Int32 { get }
public var SSL_TLSEXT_ERR_NOACK: Int32 { get }

public var SSL_TLSEXT_HB_ENABLED: Int32 { get }
public var SSL_TLSEXT_HB_DONT_SEND_REQUESTS: Int32 { get }
public var SSL_TLSEXT_HB_DONT_RECV_REQUESTS: Int32 { get }

/* PSK ciphersuites from 4279 */
public var TLS1_CK_PSK_WITH_RC4_128_SHA: Int32 { get }
public var TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA: Int32 { get }
public var TLS1_CK_PSK_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_PSK_WITH_AES_256_CBC_SHA: Int32 { get }

/*
 * Additional TLS ciphersuites from expired Internet Draft
 * draft-ietf-tls-56-bit-ciphersuites-01.txt (available if
 * TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES is defined, see s3_lib.c).  We
 * actually treat them like SSL 3.0 ciphers, which we probably shouldn't.
 * Note that the first two are actually not in the IDs.
 */
public var TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5: Int32 { get } /* not in
                                                                    * ID */

public var TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5: Int32 { get } /* not in
                                                                    * ID */

public var TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA: Int32 { get }
public var TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_RC4_128_SHA: Int32 { get }

/* AES ciphersuites from RFC3268 */
public var TLS1_CK_RSA_WITH_AES_128_SHA: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_AES_128_SHA: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_AES_128_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_AES_128_SHA: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_AES_128_SHA: Int32 { get }
public var TLS1_CK_ADH_WITH_AES_128_SHA: Int32 { get }

public var TLS1_CK_RSA_WITH_AES_256_SHA: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_AES_256_SHA: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_AES_256_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_AES_256_SHA: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_AES_256_SHA: Int32 { get }
public var TLS1_CK_ADH_WITH_AES_256_SHA: Int32 { get }

/* TLS v1.2 ciphersuites */
public var TLS1_CK_RSA_WITH_NULL_SHA256: Int32 { get }
public var TLS1_CK_RSA_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_RSA_WITH_AES_256_SHA256: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_AES_128_SHA256: Int32 { get }

/* Camellia ciphersuites from RFC4132 */
public var TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: Int32 { get }
public var TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA: Int32 { get }

/* TLS v1.2 ciphersuites */
public var TLS1_CK_DHE_RSA_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_AES_256_SHA256: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_AES_256_SHA256: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_AES_256_SHA256: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_AES_256_SHA256: Int32 { get }
public var TLS1_CK_ADH_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_ADH_WITH_AES_256_SHA256: Int32 { get }

/* Camellia ciphersuites from RFC4132 */
public var TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: Int32 { get }
public var TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA: Int32 { get }

/* SEED ciphersuites from RFC4162 */
public var TLS1_CK_RSA_WITH_SEED_SHA: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_SEED_SHA: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_SEED_SHA: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_SEED_SHA: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_SEED_SHA: Int32 { get }
public var TLS1_CK_ADH_WITH_SEED_SHA: Int32 { get }

/* TLS v1.2 GCM ciphersuites from RFC5288 */
public var TLS1_CK_RSA_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_RSA_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_ADH_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_ADH_WITH_AES_256_GCM_SHA384: Int32 { get }

/*
 * ECC ciphersuites from draft-ietf-tls-ecc-12.txt with changes soon to be in
 * draft 13
 */
public var TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA: Int32 { get }

public var TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA: Int32 { get }
public var TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA: Int32 { get }
public var TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA: Int32 { get }
public var TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: Int32 { get }

public var TLS1_CK_ECDH_RSA_WITH_NULL_SHA: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA: Int32 { get }

public var TLS1_CK_ECDHE_RSA_WITH_NULL_SHA: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA: Int32 { get }

public var TLS1_CK_ECDH_anon_WITH_NULL_SHA: Int32 { get }
public var TLS1_CK_ECDH_anon_WITH_RC4_128_SHA: Int32 { get }
public var TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA: Int32 { get }
public var TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA: Int32 { get }

/* SRP ciphersuites from RFC 5054 */
public var TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA: Int32 { get }
public var TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA: Int32 { get }

/* ECDH HMAC based ciphersuites from RFC5289 */

public var TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384: Int32 { get }

/* ECDH GCM based ciphersuites from RFC5289 */
public var TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256: Int32 { get }
public var TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384: Int32 { get }

/*
 * XXX * Backward compatibility alert: + * Older versions of OpenSSL gave
 * some DHE ciphers names with "EDH" + * instead of "DHE".  Going forward, we
 * should be using DHE + * everywhere, though we may indefinitely maintain
 * aliases for users + * or configurations that used "EDH" +
 */
public var TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5: String { get }
public var TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5: String { get }
public var TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA: String { get }
public var TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA: String { get }
public var TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA: String { get }
public var TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA: String { get }
public var TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA: String { get }

/* AES ciphersuites from RFC3268 */
public var TLS1_TXT_RSA_WITH_AES_128_SHA: String { get }
public var TLS1_TXT_DH_DSS_WITH_AES_128_SHA: String { get }
public var TLS1_TXT_DH_RSA_WITH_AES_128_SHA: String { get }
public var TLS1_TXT_DHE_DSS_WITH_AES_128_SHA: String { get }
public var TLS1_TXT_DHE_RSA_WITH_AES_128_SHA: String { get }
public var TLS1_TXT_ADH_WITH_AES_128_SHA: String { get }

public var TLS1_TXT_RSA_WITH_AES_256_SHA: String { get }
public var TLS1_TXT_DH_DSS_WITH_AES_256_SHA: String { get }
public var TLS1_TXT_DH_RSA_WITH_AES_256_SHA: String { get }
public var TLS1_TXT_DHE_DSS_WITH_AES_256_SHA: String { get }
public var TLS1_TXT_DHE_RSA_WITH_AES_256_SHA: String { get }
public var TLS1_TXT_ADH_WITH_AES_256_SHA: String { get }

/* ECC ciphersuites from RFC4492 */
public var TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA: String { get }

public var TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA: String { get }
public var TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA: String { get }
public var TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA: String { get }
public var TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: String { get }

public var TLS1_TXT_ECDH_RSA_WITH_NULL_SHA: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA: String { get }

public var TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA: String { get }

public var TLS1_TXT_ECDH_anon_WITH_NULL_SHA: String { get }
public var TLS1_TXT_ECDH_anon_WITH_RC4_128_SHA: String { get }
public var TLS1_TXT_ECDH_anon_WITH_DES_192_CBC3_SHA: String { get }
public var TLS1_TXT_ECDH_anon_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_ECDH_anon_WITH_AES_256_CBC_SHA: String { get }

/* PSK ciphersuites from RFC 4279 */
public var TLS1_TXT_PSK_WITH_RC4_128_SHA: String { get }
public var TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA: String { get }
public var TLS1_TXT_PSK_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_PSK_WITH_AES_256_CBC_SHA: String { get }

/* SRP ciphersuite from RFC 5054 */
public var TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA: String { get }
public var TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA: String { get }

/* Camellia ciphersuites from RFC4132 */
public var TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA: String { get }
public var TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA: String { get }
public var TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA: String { get }
public var TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: String { get }
public var TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: String { get }
public var TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA: String { get }

public var TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA: String { get }
public var TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA: String { get }
public var TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA: String { get }
public var TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: String { get }
public var TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: String { get }
public var TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA: String { get }

/* SEED ciphersuites from RFC4162 */
public var TLS1_TXT_RSA_WITH_SEED_SHA: String { get }
public var TLS1_TXT_DH_DSS_WITH_SEED_SHA: String { get }
public var TLS1_TXT_DH_RSA_WITH_SEED_SHA: String { get }
public var TLS1_TXT_DHE_DSS_WITH_SEED_SHA: String { get }
public var TLS1_TXT_DHE_RSA_WITH_SEED_SHA: String { get }
public var TLS1_TXT_ADH_WITH_SEED_SHA: String { get }

/* TLS v1.2 ciphersuites */
public var TLS1_TXT_RSA_WITH_NULL_SHA256: String { get }
public var TLS1_TXT_RSA_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_RSA_WITH_AES_256_SHA256: String { get }
public var TLS1_TXT_DH_DSS_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_DH_RSA_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_DH_DSS_WITH_AES_256_SHA256: String { get }
public var TLS1_TXT_DH_RSA_WITH_AES_256_SHA256: String { get }
public var TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256: String { get }
public var TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256: String { get }
public var TLS1_TXT_ADH_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_ADH_WITH_AES_256_SHA256: String { get }

/* TLS v1.2 GCM ciphersuites from RFC5288 */
public var TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384: String { get }

/* ECDH HMAC based ciphersuites from RFC5289 */

public var TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384: String { get }

/* ECDH GCM based ciphersuites from RFC5289 */
public var TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256: String { get }
public var TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384: String { get }

public var TLS_CT_RSA_SIGN: Int32 { get }
public var TLS_CT_DSS_SIGN: Int32 { get }
public var TLS_CT_RSA_FIXED_DH: Int32 { get }
public var TLS_CT_DSS_FIXED_DH: Int32 { get }
public var TLS_CT_ECDSA_SIGN: Int32 { get }
public var TLS_CT_RSA_FIXED_ECDH: Int32 { get }
public var TLS_CT_ECDSA_FIXED_ECDH: Int32 { get }
public var TLS_CT_GOST94_SIGN: Int32 { get }
public var TLS_CT_GOST01_SIGN: Int32 { get }
/*
 * when correcting this number, correct also SSL3_CT_NUMBER in ssl3.h (see
 * comment there)
 */
public var TLS_CT_NUMBER: Int32 { get }

public var TLS1_FINISH_MAC_LENGTH: Int32 { get }

public var TLS_MD_MAX_CONST_SIZE: Int32 { get }
public var TLS_MD_CLIENT_FINISH_CONST: String { get }
public var TLS_MD_CLIENT_FINISH_CONST_SIZE: Int32 { get }
public var TLS_MD_SERVER_FINISH_CONST: String { get }
public var TLS_MD_SERVER_FINISH_CONST_SIZE: Int32 { get }

public var TLS_MD_KEY_EXPANSION_CONST: String { get }
public var TLS_MD_KEY_EXPANSION_CONST_SIZE: Int32 { get }
public var TLS_MD_CLIENT_WRITE_KEY_CONST: String { get }
public var TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE: Int32 { get }
public var TLS_MD_SERVER_WRITE_KEY_CONST: String { get }
public var TLS_MD_SERVER_WRITE_KEY_CONST_SIZE: Int32 { get }
public var TLS_MD_IV_BLOCK_CONST: String { get }
public var TLS_MD_IV_BLOCK_CONST_SIZE: Int32 { get }
public var TLS_MD_MASTER_SECRET_CONST: String { get }
public var TLS_MD_MASTER_SECRET_CONST_SIZE: Int32 { get }

/*
 * client finished
 */

/*
 * server finished
 */

/*
 * server write key
 */

/*
 * key expansion
 */

/*
 * client write key
 */

/*
 * server write key
 */

/*
 * IV block
 */

/*
 * master secret
 */

/* TLS Session Ticket extension struct */
public struct tls_session_ticket_ext_st {

    public var length: UInt16

    public var data: UnsafeMutableRawPointer!

    public init()

    public init(length: UInt16, data: UnsafeMutableRawPointer!)
}
/* crypto/pqueue/pqueue.h */
/*
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@cs.stanford.edu) for the OpenSSL project 2005.
 */
/* ====================================================================
 * Copyright (c) 1999-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

public typealias pqueue = OpaquePointer

public struct _pitem {

    public var priority: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8) /* 64-bit value in big-endian encoding */

    public var data: UnsafeMutableRawPointer!

    public var next: UnsafeMutablePointer<_pitem>!

    public init()

    public init(priority: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), data: UnsafeMutableRawPointer!, next: UnsafeMutablePointer<_pitem>!)
}
public typealias pitem = _pitem

public typealias piterator = UnsafeMutablePointer<_pitem>

public func pitem_new(_ prio64be: UnsafeMutablePointer<UInt8>!, _ data: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<pitem>!
public func pitem_free(_ item: UnsafeMutablePointer<pitem>!)

public func pqueue_new() -> pqueue!
public func pqueue_free(_ pq: pqueue!)

public func pqueue_insert(_ pq: pqueue!, _ item: UnsafeMutablePointer<pitem>!) -> UnsafeMutablePointer<pitem>!
public func pqueue_peek(_ pq: pqueue!) -> UnsafeMutablePointer<pitem>!
public func pqueue_pop(_ pq: pqueue!) -> UnsafeMutablePointer<pitem>!
public func pqueue_find(_ pq: pqueue!, _ prio64be: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<pitem>!
public func pqueue_iterator(_ pq: pqueue!) -> UnsafeMutablePointer<pitem>!
public func pqueue_next(_ iter: UnsafeMutablePointer<piterator?>!) -> UnsafeMutablePointer<pitem>!

public func pqueue_print(_ pq: pqueue!)
public func pqueue_size(_ pq: pqueue!) -> Int32
/* ssl/dtls1.h */
/*
 * DTLS implementation written by Nagendra Modadugu
 * (nagendra@cs.stanford.edu) for the OpenSSL project 2005.
 */
/* ====================================================================
 * Copyright (c) 1999-2005 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@OpenSSL.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

/* Needed for struct timeval */

public var DTLS1_VERSION: Int32 { get }
public var DTLS1_2_VERSION: Int32 { get }
public var DTLS_MAX_VERSION: Int32 { get }
public var DTLS1_VERSION_MAJOR: Int32 { get }

public var DTLS1_BAD_VER: Int32 { get }

/* Special value for method supporting multiple versions */
public var DTLS_ANY_VERSION: Int32 { get }

/* this alert description is not specified anywhere... */

/* lengths of messages */
public var DTLS1_COOKIE_LENGTH: Int32 { get }

public var DTLS1_RT_HEADER_LENGTH: Int32 { get }

public var DTLS1_HM_HEADER_LENGTH: Int32 { get }

public var DTLS1_HM_BAD_FRAGMENT: Int32 { get }
public var DTLS1_HM_FRAGMENT_RETRY: Int32 { get }

public var DTLS1_CCS_HEADER_LENGTH: Int32 { get }

public var DTLS1_AL_HEADER_LENGTH: Int32 { get }

/* Max MTU overhead we know about so far is 40 for IPv6 + 8 for UDP */
public var DTLS1_MAX_MTU_OVERHEAD: Int32 { get }

public struct dtls1_bitmap_st {

    public var map: UInt /* track 32 packets on 32-bit systems and 64
                                 * - on 64-bit systems */

    
    public var max_seq_num: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8) /* max record number seen so far, 64-bit
                                   * value in big-endian encoding */

    public init()

    public init(map: UInt, max_seq_num: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8))
}
public typealias DTLS1_BITMAP = dtls1_bitmap_st

public struct dtls1_retransmit_state {

    public var enc_write_ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>! /* cryptographic state */

    public var write_hash: UnsafeMutablePointer<EVP_MD_CTX>! /* used for mac generation */

    
    public var compress: UnsafeMutablePointer<COMP_CTX>! /* compression */

    
    public var session: UnsafeMutablePointer<SSL_SESSION>!

    public var epoch: UInt16

    public init()

    public init(enc_write_ctx: UnsafeMutablePointer<EVP_CIPHER_CTX>!, write_hash: UnsafeMutablePointer<EVP_MD_CTX>!, compress: UnsafeMutablePointer<COMP_CTX>!, session: UnsafeMutablePointer<SSL_SESSION>!, epoch: UInt16)
}

public struct hm_header_st {

    public var type: UInt8

    public var msg_len: UInt

    public var seq: UInt16

    public var frag_off: UInt

    public var frag_len: UInt

    public var is_ccs: UInt32

    public var saved_retransmit_state: dtls1_retransmit_state

    public init()

    public init(type: UInt8, msg_len: UInt, seq: UInt16, frag_off: UInt, frag_len: UInt, is_ccs: UInt32, saved_retransmit_state: dtls1_retransmit_state)
}

public struct ccs_header_st {

    public var type: UInt8

    public var seq: UInt16

    public init()

    public init(type: UInt8, seq: UInt16)
}

public struct dtls1_timeout_st {

    /* Number of read timeouts so far */
    public var read_timeouts: UInt32

    /* Number of write timeouts so far */
    public var write_timeouts: UInt32

    /* Number of alerts received so far */
    public var num_alerts: UInt32

    public init()

    public init(read_timeouts: UInt32, write_timeouts: UInt32, num_alerts: UInt32)
}

public struct record_pqueue_st {

    public var epoch: UInt16

    public var q: pqueue!

    public init()

    public init(epoch: UInt16, q: pqueue!)
}
public typealias record_pqueue = record_pqueue_st

public struct hm_fragment_st {

    public var msg_header: hm_header_st

    public var fragment: UnsafeMutablePointer<UInt8>!

    public var reassembly: UnsafeMutablePointer<UInt8>!

    public init()

    public init(msg_header: hm_header_st, fragment: UnsafeMutablePointer<UInt8>!, reassembly: UnsafeMutablePointer<UInt8>!)
}
public typealias hm_fragment = hm_fragment_st

public struct dtls1_state_st {

    public var send_cookie: UInt32

    public var cookie: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var rcvd_cookie: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var cookie_len: UInt32

    /*
     * The current data and handshake epoch.  This is initially
     * undefined, and starts at zero once the initial handshake is
     * completed
     */
    public var r_epoch: UInt16

    public var w_epoch: UInt16

    /* records being received in the current epoch */
    public var bitmap: DTLS1_BITMAP

    /* renegotiation starts a new set of sequence numbers */
    public var next_bitmap: DTLS1_BITMAP

    /* handshake message numbers */
    public var handshake_write_seq: UInt16

    public var next_handshake_write_seq: UInt16

    public var handshake_read_seq: UInt16

    /* save last sequence number for retransmissions */
    public var last_write_sequence: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    /* Received handshake records (processed and unprocessed) */
    public var unprocessed_rcds: record_pqueue

    public var processed_rcds: record_pqueue

    /* Buffered handshake messages */
    public var buffered_messages: pqueue!

    /* Buffered (sent) handshake records */
    public var sent_messages: pqueue!

    /*
     * Buffered application records. Only for records between CCS and
     * Finished to prevent either protocol violation or unnecessary message
     * loss.
     */
    public var buffered_app_data: record_pqueue

    /* Is set when listening for new connections with dtls1_listen() */
    public var listen: UInt32

    public var link_mtu: UInt32 /* max on-the-wire DTLS packet size */

    public var mtu: UInt32 /* max DTLS packet size */

    public var w_msg_hdr: hm_header_st

    public var r_msg_hdr: hm_header_st

    public var timeout: dtls1_timeout_st

    /*
     * Indicates when the last handshake msg or heartbeat sent will timeout
     */
    public var next_timeout: timeval

    /* Timeout duration */
    public var timeout_duration: UInt16

    /*
     * storage for Alert/Handshake protocol data received but not yet
     * processed by ssl3_read_bytes:
     */
    public var alert_fragment: (UInt8, UInt8)

    public var alert_fragment_len: UInt32

    public var handshake_fragment: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8)

    public var handshake_fragment_len: UInt32

    public var retransmitting: UInt32

    /*
     * Set when the handshake is ready to process peer's ChangeCipherSpec message.
     * Cleared after the message has been processed.
     */
    public var change_cipher_spec_ok: UInt32

    public init()

    public init(send_cookie: UInt32, cookie: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), rcvd_cookie: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), cookie_len: UInt32, r_epoch: UInt16, w_epoch: UInt16, bitmap: DTLS1_BITMAP, next_bitmap: DTLS1_BITMAP, handshake_write_seq: UInt16, next_handshake_write_seq: UInt16, handshake_read_seq: UInt16, last_write_sequence: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), unprocessed_rcds: record_pqueue, processed_rcds: record_pqueue, buffered_messages: pqueue!, sent_messages: pqueue!, buffered_app_data: record_pqueue, listen: UInt32, link_mtu: UInt32, mtu: UInt32, w_msg_hdr: hm_header_st, r_msg_hdr: hm_header_st, timeout: dtls1_timeout_st, next_timeout: timeval, timeout_duration: UInt16, alert_fragment: (UInt8, UInt8), alert_fragment_len: UInt32, handshake_fragment: (UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8), handshake_fragment_len: UInt32, retransmitting: UInt32, change_cipher_spec_ok: UInt32)
}
public typealias DTLS1_STATE = dtls1_state_st

/* used when SSL_ST_XX_FLUSH is entered */

public struct dtls1_record_data_st {

    public var packet: UnsafeMutablePointer<UInt8>!

    public var packet_length: UInt32

    public var rbuf: SSL3_BUFFER

    public var rrec: SSL3_RECORD

    public init()

    public init(packet: UnsafeMutablePointer<UInt8>!, packet_length: UInt32, rbuf: SSL3_BUFFER, rrec: SSL3_RECORD)
}
public typealias DTLS1_RECORD_DATA = dtls1_record_data_st

/* Timeout multipliers (timeout slice is defined in apps/timeouts.h */
public var DTLS1_TMO_READ_COUNT: Int32 { get }
public var DTLS1_TMO_WRITE_COUNT: Int32 { get }

public var DTLS1_TMO_ALERT_COUNT: Int32 { get }
/* ssl/srtp.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */
/* ====================================================================
 * Copyright (c) 1998-2006 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */
/*
 * DTLS code by Eric Rescorla <ekr@rtfm.com>
 *
 * Copyright (C) 2006, Network Resonance, Inc. Copyright (C) 2011, RTFM, Inc.
 */

public var SRTP_AES128_CM_SHA1_80: Int32 { get }
public var SRTP_AES128_CM_SHA1_32: Int32 { get }
public var SRTP_AES128_F8_SHA1_80: Int32 { get }
public var SRTP_AES128_F8_SHA1_32: Int32 { get }
public var SRTP_NULL_SHA1_80: Int32 { get }
public var SRTP_NULL_SHA1_32: Int32 { get }

public func SSL_CTX_set_tlsext_use_srtp(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ profiles: UnsafePointer<Int8>!) -> Int32
public func SSL_set_tlsext_use_srtp(_ ctx: UnsafeMutablePointer<SSL>!, _ profiles: UnsafePointer<Int8>!) -> Int32

public func SSL_get_srtp_profiles(_ ssl: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<stack_st_SRTP_PROTECTION_PROFILE>!
public func SSL_get_selected_srtp_profile(_ s: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<SRTP_PROTECTION_PROFILE>!

/* OPENSSL_NO_TLSEXT */

/* This is mostly sslv3 with a few tweaks */
/* Datagram TLS */

/* Support for the use_srtp extension */

/* compatibility */

/*
 * The following are the possible values for ssl->state are are used to
 * indicate where we are up to in the SSL connection establishment. The
 * macros that follow are about the only things you should need to use and
 * even then, only when using non-blocking IO. It can also be useful to work
 * out where you were when the connection failed
 */

public var SSL_ST_CONNECT: Int32 { get }
public var SSL_ST_ACCEPT: Int32 { get }
public var SSL_ST_MASK: Int32 { get }
public var SSL_ST_INIT: Int32 { get }
public var SSL_ST_BEFORE: Int32 { get }
public var SSL_ST_OK: Int32 { get }

public var SSL_ST_ERR: Int32 { get }

public var SSL_CB_LOOP: Int32 { get }
public var SSL_CB_EXIT: Int32 { get }
public var SSL_CB_READ: Int32 { get }
public var SSL_CB_WRITE: Int32 { get }
public var SSL_CB_ALERT: Int32 { get } /* used in callback */

public var SSL_CB_HANDSHAKE_START: Int32 { get }
public var SSL_CB_HANDSHAKE_DONE: Int32 { get }

/* Is the SSL_connection established? */

/*
 * The following 2 states are kept in ssl->rstate when reads fail, you should
 * not need these
 */
public var SSL_ST_READ_HEADER: Int32 { get }
public var SSL_ST_READ_BODY: Int32 { get }
public var SSL_ST_READ_DONE: Int32 { get }

/*-
 * Obtain latest Finished message
 *   -- that we sent (SSL_get_finished)
 *   -- that we expected from peer (SSL_get_peer_finished).
 * Returns length (0 == no Finished so far), copies up to 'count' bytes.
 */
public func SSL_get_finished(_ s: UnsafePointer<SSL>!, _ buf: UnsafeMutableRawPointer!, _ count: Int) -> Int
public func SSL_get_peer_finished(_ s: UnsafePointer<SSL>!, _ buf: UnsafeMutableRawPointer!, _ count: Int) -> Int

/*
 * use either SSL_VERIFY_NONE or SSL_VERIFY_PEER, the last 2 options are
 * 'ored' with SSL_VERIFY_PEER if they are desired
 */
public var SSL_VERIFY_NONE: Int32 { get }
public var SSL_VERIFY_PEER: Int32 { get }
public var SSL_VERIFY_FAIL_IF_NO_PEER_CERT: Int32 { get }
public var SSL_VERIFY_CLIENT_ONCE: Int32 { get }

/* this is for backward compatibility */
/* NEW_SSLEAY */

/* More backward compatibility */

public func PEM_read_bio_SSL_SESSION(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<SSL_SESSION>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<SSL_SESSION>!

public func PEM_read_SSL_SESSION(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<UnsafeMutablePointer<SSL_SESSION>?>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!, _ u: UnsafeMutableRawPointer!) -> UnsafeMutablePointer<SSL_SESSION>!

public func PEM_write_bio_SSL_SESSION(_ bp: UnsafeMutablePointer<BIO>!, _ x: UnsafeMutablePointer<SSL_SESSION>!) -> Int32

public func PEM_write_SSL_SESSION(_ fp: UnsafeMutablePointer<FILE>!, _ x: UnsafeMutablePointer<SSL_SESSION>!) -> Int32

public var SSL_AD_REASON_OFFSET: Int32 { get } /* offset to get SSL_R_... value
                                              * from SSL_AD_... */

/* These alert types are for SSLv3 and TLSv1 */
public var SSL_AD_CLOSE_NOTIFY: Int32 { get }
/* fatal */
public var SSL_AD_UNEXPECTED_MESSAGE: Int32 { get }
/* fatal */
public var SSL_AD_BAD_RECORD_MAC: Int32 { get }
public var SSL_AD_DECRYPTION_FAILED: Int32 { get }
public var SSL_AD_RECORD_OVERFLOW: Int32 { get }
/* fatal */
public var SSL_AD_DECOMPRESSION_FAILURE: Int32 { get }
/* fatal */
public var SSL_AD_HANDSHAKE_FAILURE: Int32 { get }
/* Not for TLS */
public var SSL_AD_NO_CERTIFICATE: Int32 { get }
public var SSL_AD_BAD_CERTIFICATE: Int32 { get }
public var SSL_AD_UNSUPPORTED_CERTIFICATE: Int32 { get }
public var SSL_AD_CERTIFICATE_REVOKED: Int32 { get }
public var SSL_AD_CERTIFICATE_EXPIRED: Int32 { get }
public var SSL_AD_CERTIFICATE_UNKNOWN: Int32 { get }
/* fatal */
public var SSL_AD_ILLEGAL_PARAMETER: Int32 { get }
/* fatal */
public var SSL_AD_UNKNOWN_CA: Int32 { get }
/* fatal */
public var SSL_AD_ACCESS_DENIED: Int32 { get }
/* fatal */
public var SSL_AD_DECODE_ERROR: Int32 { get }
public var SSL_AD_DECRYPT_ERROR: Int32 { get }
/* fatal */
public var SSL_AD_EXPORT_RESTRICTION: Int32 { get }
/* fatal */
public var SSL_AD_PROTOCOL_VERSION: Int32 { get }
/* fatal */
public var SSL_AD_INSUFFICIENT_SECURITY: Int32 { get }
/* fatal */
public var SSL_AD_INTERNAL_ERROR: Int32 { get }
public var SSL_AD_USER_CANCELLED: Int32 { get }
public var SSL_AD_NO_RENEGOTIATION: Int32 { get }
public var SSL_AD_UNSUPPORTED_EXTENSION: Int32 { get }
public var SSL_AD_CERTIFICATE_UNOBTAINABLE: Int32 { get }
public var SSL_AD_UNRECOGNIZED_NAME: Int32 { get }
public var SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE: Int32 { get }
public var SSL_AD_BAD_CERTIFICATE_HASH_VALUE: Int32 { get }
/* fatal */
public var SSL_AD_UNKNOWN_PSK_IDENTITY: Int32 { get }
/* fatal */
public var SSL_AD_INAPPROPRIATE_FALLBACK: Int32 { get }
public var SSL_ERROR_NONE: Int32 { get }
public var SSL_ERROR_SSL: Int32 { get }
public var SSL_ERROR_WANT_READ: Int32 { get }
public var SSL_ERROR_WANT_WRITE: Int32 { get }
public var SSL_ERROR_WANT_X509_LOOKUP: Int32 { get }
public var SSL_ERROR_SYSCALL: Int32 { get } /* look at error stack/return
                                           * value/errno */

public var SSL_ERROR_ZERO_RETURN: Int32 { get }
public var SSL_ERROR_WANT_CONNECT: Int32 { get }
public var SSL_ERROR_WANT_ACCEPT: Int32 { get }
public var SSL_CTRL_NEED_TMP_RSA: Int32 { get }
public var SSL_CTRL_SET_TMP_RSA: Int32 { get }
public var SSL_CTRL_SET_TMP_DH: Int32 { get }
public var SSL_CTRL_SET_TMP_ECDH: Int32 { get }
public var SSL_CTRL_SET_TMP_RSA_CB: Int32 { get }
public var SSL_CTRL_SET_TMP_DH_CB: Int32 { get }
public var SSL_CTRL_SET_TMP_ECDH_CB: Int32 { get }
public var SSL_CTRL_GET_SESSION_REUSED: Int32 { get }
public var SSL_CTRL_GET_CLIENT_CERT_REQUEST: Int32 { get }
public var SSL_CTRL_GET_NUM_RENEGOTIATIONS: Int32 { get }
public var SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS: Int32 { get }
public var SSL_CTRL_GET_TOTAL_RENEGOTIATIONS: Int32 { get }
public var SSL_CTRL_GET_FLAGS: Int32 { get }
public var SSL_CTRL_EXTRA_CHAIN_CERT: Int32 { get }
public var SSL_CTRL_SET_MSG_CALLBACK: Int32 { get }
public var SSL_CTRL_SET_MSG_CALLBACK_ARG: Int32 { get }
/* only applies to datagram connections */
public var SSL_CTRL_SET_MTU: Int32 { get }
/* Stats */
public var SSL_CTRL_SESS_NUMBER: Int32 { get }
public var SSL_CTRL_SESS_CONNECT: Int32 { get }
public var SSL_CTRL_SESS_CONNECT_GOOD: Int32 { get }
public var SSL_CTRL_SESS_CONNECT_RENEGOTIATE: Int32 { get }
public var SSL_CTRL_SESS_ACCEPT: Int32 { get }
public var SSL_CTRL_SESS_ACCEPT_GOOD: Int32 { get }
public var SSL_CTRL_SESS_ACCEPT_RENEGOTIATE: Int32 { get }
public var SSL_CTRL_SESS_HIT: Int32 { get }
public var SSL_CTRL_SESS_CB_HIT: Int32 { get }
public var SSL_CTRL_SESS_MISSES: Int32 { get }
public var SSL_CTRL_SESS_TIMEOUTS: Int32 { get }
public var SSL_CTRL_SESS_CACHE_FULL: Int32 { get }
public var SSL_CTRL_OPTIONS: Int32 { get }
public var SSL_CTRL_MODE: Int32 { get }
public var SSL_CTRL_GET_READ_AHEAD: Int32 { get }
public var SSL_CTRL_SET_READ_AHEAD: Int32 { get }
public var SSL_CTRL_SET_SESS_CACHE_SIZE: Int32 { get }
public var SSL_CTRL_GET_SESS_CACHE_SIZE: Int32 { get }
public var SSL_CTRL_SET_SESS_CACHE_MODE: Int32 { get }
public var SSL_CTRL_GET_SESS_CACHE_MODE: Int32 { get }
public var SSL_CTRL_GET_MAX_CERT_LIST: Int32 { get }
public var SSL_CTRL_SET_MAX_CERT_LIST: Int32 { get }
public var SSL_CTRL_SET_MAX_SEND_FRAGMENT: Int32 { get }
/* see tls1.h for macros based on these */

public var SSL_CTRL_SET_TLSEXT_SERVERNAME_CB: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_HOSTNAME: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_DEBUG_CB: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_DEBUG_ARG: Int32 { get }
public var SSL_CTRL_GET_TLSEXT_TICKET_KEYS: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_TICKET_KEYS: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE: Int32 { get }
public var SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS: Int32 { get }
public var SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS: Int32 { get }
public var SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP: Int32 { get }
public var SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB: Int32 { get }
public var SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB: Int32 { get }
public var SSL_CTRL_SET_SRP_VERIFY_PARAM_CB: Int32 { get }
public var SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB: Int32 { get }
public var SSL_CTRL_SET_SRP_ARG: Int32 { get }
public var SSL_CTRL_SET_TLS_EXT_SRP_USERNAME: Int32 { get }
public var SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH: Int32 { get }
public var SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD: Int32 { get }

public var SSL_CTRL_TLS_EXT_SEND_HEARTBEAT: Int32 { get }
public var SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING: Int32 { get }
public var SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS: Int32 { get }

/* OPENSSL_NO_TLSEXT */
public var DTLS_CTRL_GET_TIMEOUT: Int32 { get }
public var DTLS_CTRL_HANDLE_TIMEOUT: Int32 { get }
public var DTLS_CTRL_LISTEN: Int32 { get }
public var SSL_CTRL_GET_RI_SUPPORT: Int32 { get }
public var SSL_CTRL_CLEAR_OPTIONS: Int32 { get }
public var SSL_CTRL_CLEAR_MODE: Int32 { get }
public var SSL_CTRL_GET_EXTRA_CHAIN_CERTS: Int32 { get }
public var SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS: Int32 { get }
public var SSL_CTRL_CHAIN: Int32 { get }
public var SSL_CTRL_CHAIN_CERT: Int32 { get }
public var SSL_CTRL_GET_CURVES: Int32 { get }
public var SSL_CTRL_SET_CURVES: Int32 { get }
public var SSL_CTRL_SET_CURVES_LIST: Int32 { get }
public var SSL_CTRL_GET_SHARED_CURVE: Int32 { get }
public var SSL_CTRL_SET_ECDH_AUTO: Int32 { get }
public var SSL_CTRL_SET_SIGALGS: Int32 { get }
public var SSL_CTRL_SET_SIGALGS_LIST: Int32 { get }
public var SSL_CTRL_CERT_FLAGS: Int32 { get }
public var SSL_CTRL_CLEAR_CERT_FLAGS: Int32 { get }
public var SSL_CTRL_SET_CLIENT_SIGALGS: Int32 { get }
public var SSL_CTRL_SET_CLIENT_SIGALGS_LIST: Int32 { get }
public var SSL_CTRL_GET_CLIENT_CERT_TYPES: Int32 { get }
public var SSL_CTRL_SET_CLIENT_CERT_TYPES: Int32 { get }
public var SSL_CTRL_BUILD_CERT_CHAIN: Int32 { get }
public var SSL_CTRL_SET_VERIFY_CERT_STORE: Int32 { get }
public var SSL_CTRL_SET_CHAIN_CERT_STORE: Int32 { get }
public var SSL_CTRL_GET_PEER_SIGNATURE_NID: Int32 { get }
public var SSL_CTRL_GET_SERVER_TMP_KEY: Int32 { get }
public var SSL_CTRL_GET_RAW_CIPHERLIST: Int32 { get }
public var SSL_CTRL_GET_EC_POINT_FORMATS: Int32 { get }
public var SSL_CTRL_GET_CHAIN_CERTS: Int32 { get }
public var SSL_CTRL_SELECT_CURRENT_CERT: Int32 { get }
public var SSL_CTRL_SET_CURRENT_CERT: Int32 { get }
public var SSL_CTRL_CHECK_PROTO_VERSION: Int32 { get }
public var DTLS_CTRL_SET_LINK_MTU: Int32 { get }
public var DTLS_CTRL_GET_LINK_MIN_MTU: Int32 { get }
public var SSL_CERT_SET_FIRST: Int32 { get }
public var SSL_CERT_SET_NEXT: Int32 { get }
public var SSL_CERT_SET_SERVER: Int32 { get }

public func BIO_f_ssl() -> UnsafeMutablePointer<BIO_METHOD>!
public func BIO_new_ssl(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ client: Int32) -> UnsafeMutablePointer<BIO>!
public func BIO_new_ssl_connect(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> UnsafeMutablePointer<BIO>!
public func BIO_new_buffer_ssl_connect(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> UnsafeMutablePointer<BIO>!
public func BIO_ssl_copy_session_id(_ to: UnsafeMutablePointer<BIO>!, _ from: UnsafeMutablePointer<BIO>!) -> Int32
public func BIO_ssl_shutdown(_ ssl_bio: UnsafeMutablePointer<BIO>!)

public func SSL_CTX_set_cipher_list(_: UnsafeMutablePointer<SSL_CTX>!, _ str: UnsafePointer<Int8>!) -> Int32
public func SSL_CTX_new(_ meth: UnsafePointer<SSL_METHOD>!) -> UnsafeMutablePointer<SSL_CTX>!
public func SSL_CTX_free(_: UnsafeMutablePointer<SSL_CTX>!)
public func SSL_CTX_set_timeout(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ t: Int) -> Int
public func SSL_CTX_get_timeout(_ ctx: UnsafePointer<SSL_CTX>!) -> Int
public func SSL_CTX_get_cert_store(_: UnsafePointer<SSL_CTX>!) -> UnsafeMutablePointer<X509_STORE>!
public func SSL_CTX_set_cert_store(_: UnsafeMutablePointer<SSL_CTX>!, _: UnsafeMutablePointer<X509_STORE>!)
public func SSL_want(_ s: UnsafePointer<SSL>!) -> Int32
public func SSL_clear(_ s: UnsafeMutablePointer<SSL>!) -> Int32

public func SSL_CTX_flush_sessions(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ tm: Int)

public func SSL_get_current_cipher(_ s: UnsafePointer<SSL>!) -> UnsafePointer<SSL_CIPHER>!
public func SSL_CIPHER_get_bits(_ c: UnsafePointer<SSL_CIPHER>!, _ alg_bits: UnsafeMutablePointer<Int32>!) -> Int32
public func SSL_CIPHER_get_version(_ c: UnsafePointer<SSL_CIPHER>!) -> UnsafeMutablePointer<Int8>!
public func SSL_CIPHER_get_name(_ c: UnsafePointer<SSL_CIPHER>!) -> UnsafePointer<Int8>!
public func SSL_CIPHER_get_id(_ c: UnsafePointer<SSL_CIPHER>!) -> UInt

public func SSL_get_fd(_ s: UnsafePointer<SSL>!) -> Int32
public func SSL_get_rfd(_ s: UnsafePointer<SSL>!) -> Int32
public func SSL_get_wfd(_ s: UnsafePointer<SSL>!) -> Int32
public func SSL_get_cipher_list(_ s: UnsafePointer<SSL>!, _ n: Int32) -> UnsafePointer<Int8>!
public func SSL_get_shared_ciphers(_ s: UnsafePointer<SSL>!, _ buf: UnsafeMutablePointer<Int8>!, _ len: Int32) -> UnsafeMutablePointer<Int8>!
public func SSL_get_read_ahead(_ s: UnsafePointer<SSL>!) -> Int32
public func SSL_pending(_ s: UnsafePointer<SSL>!) -> Int32

public func SSL_set_fd(_ s: UnsafeMutablePointer<SSL>!, _ fd: Int32) -> Int32
public func SSL_set_rfd(_ s: UnsafeMutablePointer<SSL>!, _ fd: Int32) -> Int32
public func SSL_set_wfd(_ s: UnsafeMutablePointer<SSL>!, _ fd: Int32) -> Int32

public func SSL_set_bio(_ s: UnsafeMutablePointer<SSL>!, _ rbio: UnsafeMutablePointer<BIO>!, _ wbio: UnsafeMutablePointer<BIO>!)
public func SSL_get_rbio(_ s: UnsafePointer<SSL>!) -> UnsafeMutablePointer<BIO>!
public func SSL_get_wbio(_ s: UnsafePointer<SSL>!) -> UnsafeMutablePointer<BIO>!

public func SSL_set_cipher_list(_ s: UnsafeMutablePointer<SSL>!, _ str: UnsafePointer<Int8>!) -> Int32
public func SSL_set_read_ahead(_ s: UnsafeMutablePointer<SSL>!, _ yes: Int32)
public func SSL_get_verify_mode(_ s: UnsafePointer<SSL>!) -> Int32
public func SSL_get_verify_depth(_ s: UnsafePointer<SSL>!) -> Int32
public func SSL_get_verify_callback(_ s: UnsafePointer<SSL>!) -> (@convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!
public func SSL_set_verify(_ s: UnsafeMutablePointer<SSL>!, _ mode: Int32, _ callback: (@escaping @convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!)
public func SSL_set_verify_depth(_ s: UnsafeMutablePointer<SSL>!, _ depth: Int32)
public func SSL_set_cert_cb(_ s: UnsafeMutablePointer<SSL>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Int32)!, _ arg: UnsafeMutableRawPointer!)

public func SSL_use_RSAPrivateKey(_ ssl: UnsafeMutablePointer<SSL>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32

public func SSL_use_RSAPrivateKey_ASN1(_ ssl: UnsafeMutablePointer<SSL>!, _ d: UnsafeMutablePointer<UInt8>!, _ len: Int) -> Int32
public func SSL_use_PrivateKey(_ ssl: UnsafeMutablePointer<SSL>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func SSL_use_PrivateKey_ASN1(_ pk: Int32, _ ssl: UnsafeMutablePointer<SSL>!, _ d: UnsafePointer<UInt8>!, _ len: Int) -> Int32
public func SSL_use_certificate(_ ssl: UnsafeMutablePointer<SSL>!, _ x: UnsafeMutablePointer<X509>!) -> Int32
public func SSL_use_certificate_ASN1(_ ssl: UnsafeMutablePointer<SSL>!, _ d: UnsafePointer<UInt8>!, _ len: Int32) -> Int32

/* Set serverinfo data for the current active cert. */
public func SSL_CTX_use_serverinfo(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ serverinfo: UnsafePointer<UInt8>!, _ serverinfo_length: Int) -> Int32

public func SSL_CTX_use_serverinfo_file(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ file: UnsafePointer<Int8>!) -> Int32
/* NO_STDIO */

public func SSL_use_RSAPrivateKey_file(_ ssl: UnsafeMutablePointer<SSL>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func SSL_use_PrivateKey_file(_ ssl: UnsafeMutablePointer<SSL>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func SSL_use_certificate_file(_ ssl: UnsafeMutablePointer<SSL>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func SSL_CTX_use_RSAPrivateKey_file(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func SSL_CTX_use_PrivateKey_file(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
public func SSL_CTX_use_certificate_file(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ file: UnsafePointer<Int8>!, _ type: Int32) -> Int32
/* PEM type */
public func SSL_CTX_use_certificate_chain_file(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ file: UnsafePointer<Int8>!) -> Int32
public func SSL_load_client_CA_file(_ file: UnsafePointer<Int8>!) -> UnsafeMutablePointer<stack_st_X509_NAME>!
public func SSL_add_file_cert_subjects_to_stack(_ stackCAs: UnsafeMutablePointer<stack_st_X509_NAME>!, _ file: UnsafePointer<Int8>!) -> Int32

/* XXXXX: Better scheme needed! [was: #ifndef MAC_OS_pre_X] */

public func SSL_add_dir_cert_subjects_to_stack(_ stackCAs: UnsafeMutablePointer<stack_st_X509_NAME>!, _ dir: UnsafePointer<Int8>!) -> Int32

public func SSL_load_error_strings()
public func SSL_state_string(_ s: UnsafePointer<SSL>!) -> UnsafePointer<Int8>!
public func SSL_rstate_string(_ s: UnsafePointer<SSL>!) -> UnsafePointer<Int8>!
public func SSL_state_string_long(_ s: UnsafePointer<SSL>!) -> UnsafePointer<Int8>!
public func SSL_rstate_string_long(_ s: UnsafePointer<SSL>!) -> UnsafePointer<Int8>!
public func SSL_SESSION_get_time(_ s: UnsafePointer<SSL_SESSION>!) -> Int
public func SSL_SESSION_set_time(_ s: UnsafeMutablePointer<SSL_SESSION>!, _ t: Int) -> Int
public func SSL_SESSION_get_timeout(_ s: UnsafePointer<SSL_SESSION>!) -> Int
public func SSL_SESSION_set_timeout(_ s: UnsafeMutablePointer<SSL_SESSION>!, _ t: Int) -> Int
public func SSL_copy_session_id(_ to: UnsafeMutablePointer<SSL>!, _ from: UnsafePointer<SSL>!)
public func SSL_SESSION_get0_peer(_ s: UnsafeMutablePointer<SSL_SESSION>!) -> UnsafeMutablePointer<X509>!
public func SSL_SESSION_set1_id_context(_ s: UnsafeMutablePointer<SSL_SESSION>!, _ sid_ctx: UnsafePointer<UInt8>!, _ sid_ctx_len: UInt32) -> Int32

public func SSL_SESSION_new() -> UnsafeMutablePointer<SSL_SESSION>!
public func SSL_SESSION_get_id(_ s: UnsafePointer<SSL_SESSION>!, _ len: UnsafeMutablePointer<UInt32>!) -> UnsafePointer<UInt8>!
public func SSL_SESSION_get_compress_id(_ s: UnsafePointer<SSL_SESSION>!) -> UInt32

public func SSL_SESSION_print_fp(_ fp: UnsafeMutablePointer<FILE>!, _ ses: UnsafePointer<SSL_SESSION>!) -> Int32

public func SSL_SESSION_print(_ fp: UnsafeMutablePointer<BIO>!, _ ses: UnsafePointer<SSL_SESSION>!) -> Int32

public func SSL_SESSION_free(_ ses: UnsafeMutablePointer<SSL_SESSION>!)
public func i2d_SSL_SESSION(_ in: UnsafeMutablePointer<SSL_SESSION>!, _ pp: UnsafeMutablePointer<UnsafeMutablePointer<UInt8>?>!) -> Int32
public func SSL_set_session(_ to: UnsafeMutablePointer<SSL>!, _ session: UnsafeMutablePointer<SSL_SESSION>!) -> Int32
public func SSL_CTX_add_session(_ s: UnsafeMutablePointer<SSL_CTX>!, _ c: UnsafeMutablePointer<SSL_SESSION>!) -> Int32
public func SSL_CTX_remove_session(_: UnsafeMutablePointer<SSL_CTX>!, _ c: UnsafeMutablePointer<SSL_SESSION>!) -> Int32
public func SSL_CTX_set_generate_session_id(_: UnsafeMutablePointer<SSL_CTX>!, _: OpenSSL.GEN_SESSION_CB!) -> Int32
public func SSL_set_generate_session_id(_: UnsafeMutablePointer<SSL>!, _: OpenSSL.GEN_SESSION_CB!) -> Int32
public func SSL_has_matching_session_id(_ ssl: UnsafePointer<SSL>!, _ id: UnsafePointer<UInt8>!, _ id_len: UInt32) -> Int32
public func d2i_SSL_SESSION(_ a: UnsafeMutablePointer<UnsafeMutablePointer<SSL_SESSION>?>!, _ pp: UnsafeMutablePointer<UnsafePointer<UInt8>?>!, _ length: Int) -> UnsafeMutablePointer<SSL_SESSION>!

public func SSL_get_peer_certificate(_ s: UnsafePointer<SSL>!) -> UnsafeMutablePointer<X509>!

public func SSL_get_peer_cert_chain(_ s: UnsafePointer<SSL>!) -> UnsafeMutablePointer<stack_st_X509>!

public func SSL_CTX_get_verify_mode(_ ctx: UnsafePointer<SSL_CTX>!) -> Int32
public func SSL_CTX_get_verify_depth(_ ctx: UnsafePointer<SSL_CTX>!) -> Int32
public func SSL_CTX_get_verify_callback(_ ctx: UnsafePointer<SSL_CTX>!) -> (@convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!
public func SSL_CTX_set_verify(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ mode: Int32, _ callback: (@escaping @convention(c) (Int32, UnsafeMutablePointer<X509_STORE_CTX>?) -> Int32)!)
public func SSL_CTX_set_verify_depth(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ depth: Int32)
public func SSL_CTX_set_cert_verify_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<X509_STORE_CTX>?, UnsafeMutableRawPointer?) -> Int32)!, _ arg: UnsafeMutableRawPointer!)
public func SSL_CTX_set_cert_cb(_ c: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Int32)!, _ arg: UnsafeMutableRawPointer!)

public func SSL_CTX_use_RSAPrivateKey(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ rsa: UnsafeMutablePointer<RSA>!) -> Int32

public func SSL_CTX_use_RSAPrivateKey_ASN1(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ d: UnsafePointer<UInt8>!, _ len: Int) -> Int32
public func SSL_CTX_use_PrivateKey(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ pkey: UnsafeMutablePointer<EVP_PKEY>!) -> Int32
public func SSL_CTX_use_PrivateKey_ASN1(_ pk: Int32, _ ctx: UnsafeMutablePointer<SSL_CTX>!, _ d: UnsafePointer<UInt8>!, _ len: Int) -> Int32
public func SSL_CTX_use_certificate(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ x: UnsafeMutablePointer<X509>!) -> Int32
public func SSL_CTX_use_certificate_ASN1(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ len: Int32, _ d: UnsafePointer<UInt8>!) -> Int32

public func SSL_CTX_set_default_passwd_cb(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<Int8>?, Int32, Int32, UnsafeMutableRawPointer?) -> Int32)!)
public func SSL_CTX_set_default_passwd_cb_userdata(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ u: UnsafeMutableRawPointer!)

public func SSL_CTX_check_private_key(_ ctx: UnsafePointer<SSL_CTX>!) -> Int32
public func SSL_check_private_key(_ ctx: UnsafePointer<SSL>!) -> Int32

public func SSL_CTX_set_session_id_context(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ sid_ctx: UnsafePointer<UInt8>!, _ sid_ctx_len: UInt32) -> Int32

public func SSL_new(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> UnsafeMutablePointer<SSL>!
public func SSL_set_session_id_context(_ ssl: UnsafeMutablePointer<SSL>!, _ sid_ctx: UnsafePointer<UInt8>!, _ sid_ctx_len: UInt32) -> Int32

public func SSL_CTX_set_purpose(_ s: UnsafeMutablePointer<SSL_CTX>!, _ purpose: Int32) -> Int32
public func SSL_set_purpose(_ s: UnsafeMutablePointer<SSL>!, _ purpose: Int32) -> Int32
public func SSL_CTX_set_trust(_ s: UnsafeMutablePointer<SSL_CTX>!, _ trust: Int32) -> Int32
public func SSL_set_trust(_ s: UnsafeMutablePointer<SSL>!, _ trust: Int32) -> Int32

public func SSL_CTX_set1_param(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ vpm: UnsafeMutablePointer<X509_VERIFY_PARAM>!) -> Int32
public func SSL_set1_param(_ ssl: UnsafeMutablePointer<SSL>!, _ vpm: UnsafeMutablePointer<X509_VERIFY_PARAM>!) -> Int32

public func SSL_CTX_get0_param(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> UnsafeMutablePointer<X509_VERIFY_PARAM>!
public func SSL_get0_param(_ ssl: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<X509_VERIFY_PARAM>!

public func SSL_CTX_set_srp_username(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ name: UnsafeMutablePointer<Int8>!) -> Int32
public func SSL_CTX_set_srp_password(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ password: UnsafeMutablePointer<Int8>!) -> Int32
public func SSL_CTX_set_srp_strength(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ strength: Int32) -> Int32
public func SSL_CTX_set_srp_client_pwd_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> UnsafeMutablePointer<Int8>?)!) -> Int32
public func SSL_CTX_set_srp_verify_param_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutableRawPointer?) -> Int32)!) -> Int32
public func SSL_CTX_set_srp_username_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, UnsafeMutablePointer<Int32>?, UnsafeMutableRawPointer?) -> Int32)!) -> Int32
public func SSL_CTX_set_srp_cb_arg(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ arg: UnsafeMutableRawPointer!) -> Int32

public func SSL_set_srp_server_param(_ s: UnsafeMutablePointer<SSL>!, _ N: UnsafePointer<BIGNUM>!, _ g: UnsafePointer<BIGNUM>!, _ sa: UnsafeMutablePointer<BIGNUM>!, _ v: UnsafeMutablePointer<BIGNUM>!, _ info: UnsafeMutablePointer<Int8>!) -> Int32
public func SSL_set_srp_server_param_pw(_ s: UnsafeMutablePointer<SSL>!, _ user: UnsafePointer<Int8>!, _ pass: UnsafePointer<Int8>!, _ grp: UnsafePointer<Int8>!) -> Int32

public func SSL_get_srp_g(_ s: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<BIGNUM>!
public func SSL_get_srp_N(_ s: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<BIGNUM>!

public func SSL_get_srp_username(_ s: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<Int8>!
public func SSL_get_srp_userinfo(_ s: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<Int8>!

public func SSL_certs_clear(_ s: UnsafeMutablePointer<SSL>!)
public func SSL_free(_ ssl: UnsafeMutablePointer<SSL>!)
public func SSL_accept(_ ssl: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_connect(_ ssl: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_read(_ ssl: UnsafeMutablePointer<SSL>!, _ buf: UnsafeMutableRawPointer!, _ num: Int32) -> Int32
public func SSL_peek(_ ssl: UnsafeMutablePointer<SSL>!, _ buf: UnsafeMutableRawPointer!, _ num: Int32) -> Int32
public func SSL_write(_ ssl: UnsafeMutablePointer<SSL>!, _ buf: UnsafeRawPointer!, _ num: Int32) -> Int32
public func SSL_ctrl(_ ssl: UnsafeMutablePointer<SSL>!, _ cmd: Int32, _ larg: Int, _ parg: UnsafeMutableRawPointer!) -> Int
public func SSL_callback_ctrl(_: UnsafeMutablePointer<SSL>!, _: Int32, _: (@escaping @convention(c) () -> Swift.Void)!) -> Int
public func SSL_CTX_ctrl(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cmd: Int32, _ larg: Int, _ parg: UnsafeMutableRawPointer!) -> Int
public func SSL_CTX_callback_ctrl(_: UnsafeMutablePointer<SSL_CTX>!, _: Int32, _: (@escaping @convention(c) () -> Swift.Void)!) -> Int

public func SSL_get_error(_ s: UnsafePointer<SSL>!, _ ret_code: Int32) -> Int32
public func SSL_get_version(_ s: UnsafePointer<SSL>!) -> UnsafePointer<Int8>!

/* This sets the 'default' SSL version that SSL_new() will create */
public func SSL_CTX_set_ssl_version(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ meth: UnsafePointer<SSL_METHOD>!) -> Int32

/* SSLv2 */
/* SSLv2 */
/* SSLv2 */

public func SSLv3_method() -> UnsafePointer<SSL_METHOD>! /* SSLv3 */
public func SSLv3_server_method() -> UnsafePointer<SSL_METHOD>! /* SSLv3 */
public func SSLv3_client_method() -> UnsafePointer<SSL_METHOD>! /* SSLv3 */

public func SSLv23_method() -> UnsafePointer<SSL_METHOD>! /* Negotiate highest available SSL/TLS
                                        * version */

public func SSLv23_server_method() -> UnsafePointer<SSL_METHOD>! /* Negotiate highest available
                                               * SSL/TLS version */

public func SSLv23_client_method() -> UnsafePointer<SSL_METHOD>! /* Negotiate highest available
                                               * SSL/TLS version */

public func TLSv1_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.0 */
public func TLSv1_server_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.0 */
public func TLSv1_client_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.0 */

public func TLSv1_1_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.1 */
public func TLSv1_1_server_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.1 */
public func TLSv1_1_client_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.1 */

public func TLSv1_2_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.2 */
public func TLSv1_2_server_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.2 */
public func TLSv1_2_client_method() -> UnsafePointer<SSL_METHOD>! /* TLSv1.2 */

public func DTLSv1_method() -> UnsafePointer<SSL_METHOD>! /* DTLSv1.0 */
public func DTLSv1_server_method() -> UnsafePointer<SSL_METHOD>! /* DTLSv1.0 */
public func DTLSv1_client_method() -> UnsafePointer<SSL_METHOD>! /* DTLSv1.0 */

public func DTLSv1_2_method() -> UnsafePointer<SSL_METHOD>! /* DTLSv1.2 */
public func DTLSv1_2_server_method() -> UnsafePointer<SSL_METHOD>! /* DTLSv1.2 */
public func DTLSv1_2_client_method() -> UnsafePointer<SSL_METHOD>! /* DTLSv1.2 */

public func DTLS_method() -> UnsafePointer<SSL_METHOD>! /* DTLS 1.0 and 1.2 */
public func DTLS_server_method() -> UnsafePointer<SSL_METHOD>! /* DTLS 1.0 and 1.2 */
public func DTLS_client_method() -> UnsafePointer<SSL_METHOD>! /* DTLS 1.0 and 1.2 */

public func SSL_get_ciphers(_ s: UnsafePointer<SSL>!) -> UnsafeMutablePointer<stack_st_SSL_CIPHER>!

public func SSL_do_handshake(_ s: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_renegotiate(_ s: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_renegotiate_abbreviated(_ s: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_renegotiate_pending(_ s: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_shutdown(_ s: UnsafeMutablePointer<SSL>!) -> Int32

public func SSL_CTX_get_ssl_method(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> UnsafePointer<SSL_METHOD>!
public func SSL_get_ssl_method(_ s: UnsafeMutablePointer<SSL>!) -> UnsafePointer<SSL_METHOD>!
public func SSL_set_ssl_method(_ s: UnsafeMutablePointer<SSL>!, _ method: UnsafePointer<SSL_METHOD>!) -> Int32
public func SSL_alert_type_string_long(_ value: Int32) -> UnsafePointer<Int8>!
public func SSL_alert_type_string(_ value: Int32) -> UnsafePointer<Int8>!
public func SSL_alert_desc_string_long(_ value: Int32) -> UnsafePointer<Int8>!
public func SSL_alert_desc_string(_ value: Int32) -> UnsafePointer<Int8>!

public func SSL_set_client_CA_list(_ s: UnsafeMutablePointer<SSL>!, _ name_list: UnsafeMutablePointer<stack_st_X509_NAME>!)
public func SSL_CTX_set_client_CA_list(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ name_list: UnsafeMutablePointer<stack_st_X509_NAME>!)
public func SSL_get_client_CA_list(_ s: UnsafePointer<SSL>!) -> UnsafeMutablePointer<stack_st_X509_NAME>!
public func SSL_CTX_get_client_CA_list(_ s: UnsafePointer<SSL_CTX>!) -> UnsafeMutablePointer<stack_st_X509_NAME>!
public func SSL_add_client_CA(_ ssl: UnsafeMutablePointer<SSL>!, _ x: UnsafeMutablePointer<X509>!) -> Int32
public func SSL_CTX_add_client_CA(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ x: UnsafeMutablePointer<X509>!) -> Int32

public func SSL_set_connect_state(_ s: UnsafeMutablePointer<SSL>!)
public func SSL_set_accept_state(_ s: UnsafeMutablePointer<SSL>!)

public func SSL_get_default_timeout(_ s: UnsafePointer<SSL>!) -> Int

public func SSL_library_init() -> Int32

public func SSL_CIPHER_description(_: UnsafePointer<SSL_CIPHER>!, _ buf: UnsafeMutablePointer<Int8>!, _ size: Int32) -> UnsafeMutablePointer<Int8>!
public func SSL_dup_CA_list(_ sk: UnsafeMutablePointer<stack_st_X509_NAME>!) -> UnsafeMutablePointer<stack_st_X509_NAME>!

public func SSL_dup(_ ssl: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<SSL>!

public func SSL_get_certificate(_ ssl: UnsafePointer<SSL>!) -> UnsafeMutablePointer<X509>!
/*
 * EVP_PKEY
 */
public func SSL_get_privatekey(_ ssl: UnsafePointer<SSL>!) -> UnsafeMutablePointer<evp_pkey_st>!

public func SSL_CTX_get0_certificate(_ ctx: UnsafePointer<SSL_CTX>!) -> UnsafeMutablePointer<X509>!
public func SSL_CTX_get0_privatekey(_ ctx: UnsafePointer<SSL_CTX>!) -> UnsafeMutablePointer<EVP_PKEY>!

public func SSL_CTX_set_quiet_shutdown(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ mode: Int32)
public func SSL_CTX_get_quiet_shutdown(_ ctx: UnsafePointer<SSL_CTX>!) -> Int32
public func SSL_set_quiet_shutdown(_ ssl: UnsafeMutablePointer<SSL>!, _ mode: Int32)
public func SSL_get_quiet_shutdown(_ ssl: UnsafePointer<SSL>!) -> Int32
public func SSL_set_shutdown(_ ssl: UnsafeMutablePointer<SSL>!, _ mode: Int32)
public func SSL_get_shutdown(_ ssl: UnsafePointer<SSL>!) -> Int32
public func SSL_version(_ ssl: UnsafePointer<SSL>!) -> Int32
public func SSL_CTX_set_default_verify_paths(_ ctx: UnsafeMutablePointer<SSL_CTX>!) -> Int32
public func SSL_CTX_load_verify_locations(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ CAfile: UnsafePointer<Int8>!, _ CApath: UnsafePointer<Int8>!) -> Int32
/* just peek at pointer */
public func SSL_get_session(_ ssl: UnsafePointer<SSL>!) -> UnsafeMutablePointer<SSL_SESSION>!
public func SSL_get1_session(_ ssl: UnsafeMutablePointer<SSL>!) -> UnsafeMutablePointer<SSL_SESSION>! /* obtain a reference count */
public func SSL_get_SSL_CTX(_ ssl: UnsafePointer<SSL>!) -> UnsafeMutablePointer<SSL_CTX>!
public func SSL_set_SSL_CTX(_ ssl: UnsafeMutablePointer<SSL>!, _ ctx: UnsafeMutablePointer<SSL_CTX>!) -> UnsafeMutablePointer<SSL_CTX>!
public func SSL_set_info_callback(_ ssl: UnsafeMutablePointer<SSL>!, _ cb: (@escaping @convention(c) (UnsafePointer<SSL>?, Int32, Int32) -> Swift.Void)!)
public func SSL_get_info_callback(_ ssl: UnsafePointer<SSL>!) -> (@convention(c) (UnsafePointer<SSL>?, Int32, Int32) -> Swift.Void)!
public func SSL_state(_ ssl: UnsafePointer<SSL>!) -> Int32
public func SSL_set_state(_ ssl: UnsafeMutablePointer<SSL>!, _ state: Int32)

public func SSL_set_verify_result(_ ssl: UnsafeMutablePointer<SSL>!, _ v: Int)
public func SSL_get_verify_result(_ ssl: UnsafePointer<SSL>!) -> Int

public func SSL_set_ex_data(_ ssl: UnsafeMutablePointer<SSL>!, _ idx: Int32, _ data: UnsafeMutableRawPointer!) -> Int32
public func SSL_get_ex_data(_ ssl: UnsafePointer<SSL>!, _ idx: Int32) -> UnsafeMutableRawPointer!
public func SSL_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32

public func SSL_SESSION_set_ex_data(_ ss: UnsafeMutablePointer<SSL_SESSION>!, _ idx: Int32, _ data: UnsafeMutableRawPointer!) -> Int32
public func SSL_SESSION_get_ex_data(_ ss: UnsafePointer<SSL_SESSION>!, _ idx: Int32) -> UnsafeMutableRawPointer!
public func SSL_SESSION_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32

public func SSL_CTX_set_ex_data(_ ssl: UnsafeMutablePointer<SSL_CTX>!, _ idx: Int32, _ data: UnsafeMutableRawPointer!) -> Int32
public func SSL_CTX_get_ex_data(_ ssl: UnsafePointer<SSL_CTX>!, _ idx: Int32) -> UnsafeMutableRawPointer!
public func SSL_CTX_get_ex_new_index(_ argl: Int, _ argp: UnsafeMutableRawPointer!, _ new_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ dup_func: (@escaping @convention(c) (UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, UnsafeMutableRawPointer?, Int32, Int, UnsafeMutableRawPointer?) -> Int32)!, _ free_func: (@escaping @convention(c) (UnsafeMutableRawPointer?, UnsafeMutableRawPointer?, UnsafeMutablePointer<CRYPTO_EX_DATA>?, Int32, Int, UnsafeMutableRawPointer?) -> Swift.Void)!) -> Int32

public func SSL_get_ex_data_X509_STORE_CTX_idx() -> Int32

/* NB: the keylength is only applicable when is_export is true */

public func SSL_CTX_set_tmp_rsa_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32) -> UnsafeMutablePointer<RSA>?)!)

public func SSL_set_tmp_rsa_callback(_ ssl: UnsafeMutablePointer<SSL>!, _ cb: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32) -> UnsafeMutablePointer<RSA>?)!)

public func SSL_CTX_set_tmp_dh_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ dh: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32) -> UnsafeMutablePointer<DH>?)!)
public func SSL_set_tmp_dh_callback(_ ssl: UnsafeMutablePointer<SSL>!, _ dh: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32) -> UnsafeMutablePointer<DH>?)!)

public func SSL_CTX_set_tmp_ecdh_callback(_ ctx: UnsafeMutablePointer<SSL_CTX>!, _ ecdh: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32) -> OpaquePointer?)!)
public func SSL_set_tmp_ecdh_callback(_ ssl: UnsafeMutablePointer<SSL>!, _ ecdh: (@escaping @convention(c) (UnsafeMutablePointer<SSL>?, Int32, Int32) -> OpaquePointer?)!)

public func SSL_get_current_compression(_ s: UnsafeMutablePointer<SSL>!) -> UnsafePointer<COMP_METHOD>!
public func SSL_get_current_expansion(_ s: UnsafeMutablePointer<SSL>!) -> UnsafePointer<COMP_METHOD>!
public func SSL_COMP_get_name(_ comp: UnsafePointer<COMP_METHOD>!) -> UnsafePointer<Int8>!
public func SSL_COMP_get_compression_methods() -> UnsafeMutablePointer<stack_st_SSL_COMP>!
public func SSL_COMP_set0_compression_methods(_ meths: UnsafeMutablePointer<stack_st_SSL_COMP>!) -> UnsafeMutablePointer<stack_st_SSL_COMP>!
public func SSL_COMP_free_compression_methods()
public func SSL_COMP_add_compression_method(_ id: Int32, _ cm: UnsafeMutablePointer<COMP_METHOD>!) -> Int32

public func SSL_CIPHER_find(_ ssl: UnsafeMutablePointer<SSL>!, _ ptr: UnsafePointer<UInt8>!) -> UnsafePointer<SSL_CIPHER>!

/* TLS extensions functions */
public func SSL_set_session_ticket_ext(_ s: UnsafeMutablePointer<SSL>!, _ ext_data: UnsafeMutableRawPointer!, _ ext_len: Int32) -> Int32

public func SSL_set_session_ticket_ext_cb(_ s: UnsafeMutablePointer<SSL>!, _ cb: OpenSSL.tls_session_ticket_ext_cb_fn!, _ arg: UnsafeMutableRawPointer!) -> Int32

/* Pre-shared secret session resumption functions */
public func SSL_set_session_secret_cb(_ s: UnsafeMutablePointer<SSL>!, _ tls_session_secret_cb: OpenSSL.tls_session_secret_cb_fn!, _ arg: UnsafeMutableRawPointer!) -> Int32

public func SSL_set_debug(_ s: UnsafeMutablePointer<SSL>!, _ debug: Int32)
public func SSL_cache_hit(_ s: UnsafeMutablePointer<SSL>!) -> Int32
public func SSL_is_server(_ s: UnsafeMutablePointer<SSL>!) -> Int32

public func SSL_CONF_CTX_new() -> OpaquePointer!
public func SSL_CONF_CTX_finish(_ cctx: OpaquePointer!) -> Int32
public func SSL_CONF_CTX_free(_ cctx: OpaquePointer!)
public func SSL_CONF_CTX_set_flags(_ cctx: OpaquePointer!, _ flags: UInt32) -> UInt32
public func SSL_CONF_CTX_clear_flags(_ cctx: OpaquePointer!, _ flags: UInt32) -> UInt32
public func SSL_CONF_CTX_set1_prefix(_ cctx: OpaquePointer!, _ pre: UnsafePointer<Int8>!) -> Int32

public func SSL_CONF_CTX_set_ssl(_ cctx: OpaquePointer!, _ ssl: UnsafeMutablePointer<SSL>!)
public func SSL_CONF_CTX_set_ssl_ctx(_ cctx: OpaquePointer!, _ ctx: UnsafeMutablePointer<SSL_CTX>!)

public func SSL_CONF_cmd(_ cctx: OpaquePointer!, _ cmd: UnsafePointer<Int8>!, _ value: UnsafePointer<Int8>!) -> Int32
public func SSL_CONF_cmd_argv(_ cctx: OpaquePointer!, _ pargc: UnsafeMutablePointer<Int32>!, _ pargv: UnsafeMutablePointer<UnsafeMutablePointer<UnsafeMutablePointer<Int8>?>?>!) -> Int32
public func SSL_CONF_cmd_value_type(_ cctx: OpaquePointer!, _ cmd: UnsafePointer<Int8>!) -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_SSL_strings()

/* Error codes for the SSL functions. */

/* Function codes. */
public var SSL_F_CHECK_SUITEB_CIPHER_LIST: Int32 { get }
public var SSL_F_CLIENT_CERTIFICATE: Int32 { get }
public var SSL_F_CLIENT_FINISHED: Int32 { get }
public var SSL_F_CLIENT_HELLO: Int32 { get }
public var SSL_F_CLIENT_MASTER_KEY: Int32 { get }
public var SSL_F_D2I_SSL_SESSION: Int32 { get }
public var SSL_F_DO_DTLS1_WRITE: Int32 { get }
public var SSL_F_DO_SSL3_WRITE: Int32 { get }
public var SSL_F_DTLS1_ACCEPT: Int32 { get }
public var SSL_F_DTLS1_ADD_CERT_TO_BUF: Int32 { get }
public var SSL_F_DTLS1_BUFFER_RECORD: Int32 { get }
public var SSL_F_DTLS1_CHECK_TIMEOUT_NUM: Int32 { get }
public var SSL_F_DTLS1_CLIENT_HELLO: Int32 { get }
public var SSL_F_DTLS1_CONNECT: Int32 { get }
public var SSL_F_DTLS1_ENC: Int32 { get }
public var SSL_F_DTLS1_GET_HELLO_VERIFY: Int32 { get }
public var SSL_F_DTLS1_GET_MESSAGE: Int32 { get }
public var SSL_F_DTLS1_GET_MESSAGE_FRAGMENT: Int32 { get }
public var SSL_F_DTLS1_GET_RECORD: Int32 { get }
public var SSL_F_DTLS1_HANDLE_TIMEOUT: Int32 { get }
public var SSL_F_DTLS1_HEARTBEAT: Int32 { get }
public var SSL_F_DTLS1_OUTPUT_CERT_CHAIN: Int32 { get }
public var SSL_F_DTLS1_PREPROCESS_FRAGMENT: Int32 { get }
public var SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE: Int32 { get }
public var SSL_F_DTLS1_PROCESS_RECORD: Int32 { get }
public var SSL_F_DTLS1_READ_BYTES: Int32 { get }
public var SSL_F_DTLS1_READ_FAILED: Int32 { get }
public var SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST: Int32 { get }
public var SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE: Int32 { get }
public var SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE: Int32 { get }
public var SSL_F_DTLS1_SEND_CLIENT_VERIFY: Int32 { get }
public var SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST: Int32 { get }
public var SSL_F_DTLS1_SEND_SERVER_CERTIFICATE: Int32 { get }
public var SSL_F_DTLS1_SEND_SERVER_HELLO: Int32 { get }
public var SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE: Int32 { get }
public var SSL_F_DTLS1_WRITE_APP_DATA_BYTES: Int32 { get }
public var SSL_F_GET_CLIENT_FINISHED: Int32 { get }
public var SSL_F_GET_CLIENT_HELLO: Int32 { get }
public var SSL_F_GET_CLIENT_MASTER_KEY: Int32 { get }
public var SSL_F_GET_SERVER_FINISHED: Int32 { get }
public var SSL_F_GET_SERVER_HELLO: Int32 { get }
public var SSL_F_GET_SERVER_STATIC_DH_KEY: Int32 { get }
public var SSL_F_GET_SERVER_VERIFY: Int32 { get }
public var SSL_F_I2D_SSL_SESSION: Int32 { get }
public var SSL_F_READ_N: Int32 { get }
public var SSL_F_REQUEST_CERTIFICATE: Int32 { get }
public var SSL_F_SERVER_FINISH: Int32 { get }
public var SSL_F_SERVER_HELLO: Int32 { get }
public var SSL_F_SERVER_VERIFY: Int32 { get }
public var SSL_F_SSL23_ACCEPT: Int32 { get }
public var SSL_F_SSL23_CLIENT_HELLO: Int32 { get }
public var SSL_F_SSL23_CONNECT: Int32 { get }
public var SSL_F_SSL23_GET_CLIENT_HELLO: Int32 { get }
public var SSL_F_SSL23_GET_SERVER_HELLO: Int32 { get }
public var SSL_F_SSL23_PEEK: Int32 { get }
public var SSL_F_SSL23_READ: Int32 { get }
public var SSL_F_SSL23_WRITE: Int32 { get }
public var SSL_F_SSL2_ACCEPT: Int32 { get }
public var SSL_F_SSL2_CONNECT: Int32 { get }
public var SSL_F_SSL2_ENC_INIT: Int32 { get }
public var SSL_F_SSL2_GENERATE_KEY_MATERIAL: Int32 { get }
public var SSL_F_SSL2_PEEK: Int32 { get }
public var SSL_F_SSL2_READ: Int32 { get }
public var SSL_F_SSL2_READ_INTERNAL: Int32 { get }
public var SSL_F_SSL2_SET_CERTIFICATE: Int32 { get }
public var SSL_F_SSL2_WRITE: Int32 { get }
public var SSL_F_SSL3_ACCEPT: Int32 { get }
public var SSL_F_SSL3_ADD_CERT_TO_BUF: Int32 { get }
public var SSL_F_SSL3_CALLBACK_CTRL: Int32 { get }
public var SSL_F_SSL3_CHANGE_CIPHER_STATE: Int32 { get }
public var SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM: Int32 { get }
public var SSL_F_SSL3_CHECK_CLIENT_HELLO: Int32 { get }
public var SSL_F_SSL3_CHECK_FINISHED: Int32 { get }
public var SSL_F_SSL3_CLIENT_HELLO: Int32 { get }
public var SSL_F_SSL3_CONNECT: Int32 { get }
public var SSL_F_SSL3_CTRL: Int32 { get }
public var SSL_F_SSL3_CTX_CTRL: Int32 { get }
public var SSL_F_SSL3_DIGEST_CACHED_RECORDS: Int32 { get }
public var SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC: Int32 { get }
public var SSL_F_SSL3_ENC: Int32 { get }
public var SSL_F_SSL3_GENERATE_KEY_BLOCK: Int32 { get }
public var SSL_F_SSL3_GENERATE_MASTER_SECRET: Int32 { get }
public var SSL_F_SSL3_GET_CERTIFICATE_REQUEST: Int32 { get }
public var SSL_F_SSL3_GET_CERT_STATUS: Int32 { get }
public var SSL_F_SSL3_GET_CERT_VERIFY: Int32 { get }
public var SSL_F_SSL3_GET_CLIENT_CERTIFICATE: Int32 { get }
public var SSL_F_SSL3_GET_CLIENT_HELLO: Int32 { get }
public var SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE: Int32 { get }
public var SSL_F_SSL3_GET_FINISHED: Int32 { get }
public var SSL_F_SSL3_GET_KEY_EXCHANGE: Int32 { get }
public var SSL_F_SSL3_GET_MESSAGE: Int32 { get }
public var SSL_F_SSL3_GET_NEW_SESSION_TICKET: Int32 { get }
public var SSL_F_SSL3_GET_NEXT_PROTO: Int32 { get }
public var SSL_F_SSL3_GET_RECORD: Int32 { get }
public var SSL_F_SSL3_GET_SERVER_CERTIFICATE: Int32 { get }
public var SSL_F_SSL3_GET_SERVER_DONE: Int32 { get }
public var SSL_F_SSL3_GET_SERVER_HELLO: Int32 { get }
public var SSL_F_SSL3_HANDSHAKE_MAC: Int32 { get }
public var SSL_F_SSL3_NEW_SESSION_TICKET: Int32 { get }
public var SSL_F_SSL3_OUTPUT_CERT_CHAIN: Int32 { get }
public var SSL_F_SSL3_PEEK: Int32 { get }
public var SSL_F_SSL3_READ_BYTES: Int32 { get }
public var SSL_F_SSL3_READ_N: Int32 { get }
public var SSL_F_SSL3_SEND_CERTIFICATE_REQUEST: Int32 { get }
public var SSL_F_SSL3_SEND_CLIENT_CERTIFICATE: Int32 { get }
public var SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE: Int32 { get }
public var SSL_F_SSL3_SEND_CLIENT_VERIFY: Int32 { get }
public var SSL_F_SSL3_SEND_SERVER_CERTIFICATE: Int32 { get }
public var SSL_F_SSL3_SEND_SERVER_HELLO: Int32 { get }
public var SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE: Int32 { get }
public var SSL_F_SSL3_SETUP_KEY_BLOCK: Int32 { get }
public var SSL_F_SSL3_SETUP_READ_BUFFER: Int32 { get }
public var SSL_F_SSL3_SETUP_WRITE_BUFFER: Int32 { get }
public var SSL_F_SSL3_WRITE_BYTES: Int32 { get }
public var SSL_F_SSL3_WRITE_PENDING: Int32 { get }
public var SSL_F_SSL_ADD_CERT_CHAIN: Int32 { get }
public var SSL_F_SSL_ADD_CERT_TO_BUF: Int32 { get }
public var SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT: Int32 { get }
public var SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT: Int32 { get }
public var SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK: Int32 { get }
public var SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK: Int32 { get }
public var SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT: Int32 { get }
public var SSL_F_SSL_ADD_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT: Int32 { get }
public var SSL_F_SSL_BAD_METHOD: Int32 { get }
public var SSL_F_SSL_BUILD_CERT_CHAIN: Int32 { get }
public var SSL_F_SSL_BYTES_TO_CIPHER_LIST: Int32 { get }
public var SSL_F_SSL_CERT_DUP: Int32 { get }
public var SSL_F_SSL_CERT_INST: Int32 { get }
public var SSL_F_SSL_CERT_INSTANTIATE: Int32 { get }
public var SSL_F_SSL_CERT_NEW: Int32 { get }
public var SSL_F_SSL_CHECK_PRIVATE_KEY: Int32 { get }
public var SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG: Int32 { get }
public var SSL_F_SSL_CIPHER_PROCESS_RULESTR: Int32 { get }
public var SSL_F_SSL_CIPHER_STRENGTH_SORT: Int32 { get }
public var SSL_F_SSL_CLEAR: Int32 { get }
public var SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD: Int32 { get }
public var SSL_F_SSL_CONF_CMD: Int32 { get }
public var SSL_F_SSL_CREATE_CIPHER_LIST: Int32 { get }
public var SSL_F_SSL_CTRL: Int32 { get }
public var SSL_F_SSL_CTX_CHECK_PRIVATE_KEY: Int32 { get }
public var SSL_F_SSL_CTX_MAKE_PROFILES: Int32 { get }
public var SSL_F_SSL_CTX_NEW: Int32 { get }
public var SSL_F_SSL_CTX_SET_CIPHER_LIST: Int32 { get }
public var SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE: Int32 { get }
public var SSL_F_SSL_CTX_SET_PURPOSE: Int32 { get }
public var SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT: Int32 { get }
public var SSL_F_SSL_CTX_SET_SSL_VERSION: Int32 { get }
public var SSL_F_SSL_CTX_SET_TRUST: Int32 { get }
public var SSL_F_SSL_CTX_USE_CERTIFICATE: Int32 { get }
public var SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1: Int32 { get }
public var SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE: Int32 { get }
public var SSL_F_SSL_CTX_USE_CERTIFICATE_FILE: Int32 { get }
public var SSL_F_SSL_CTX_USE_PRIVATEKEY: Int32 { get }
public var SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1: Int32 { get }
public var SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE: Int32 { get }
public var SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT: Int32 { get }
public var SSL_F_SSL_CTX_USE_RSAPRIVATEKEY: Int32 { get }
public var SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1: Int32 { get }
public var SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE: Int32 { get }
public var SSL_F_SSL_CTX_USE_SERVERINFO: Int32 { get }
public var SSL_F_SSL_CTX_USE_SERVERINFO_FILE: Int32 { get }
public var SSL_F_SSL_DO_HANDSHAKE: Int32 { get }
public var SSL_F_SSL_GET_NEW_SESSION: Int32 { get }
public var SSL_F_SSL_GET_PREV_SESSION: Int32 { get }
public var SSL_F_SSL_GET_SERVER_CERT_INDEX: Int32 { get }
public var SSL_F_SSL_GET_SERVER_SEND_CERT: Int32 { get }
public var SSL_F_SSL_GET_SERVER_SEND_PKEY: Int32 { get }
public var SSL_F_SSL_GET_SIGN_PKEY: Int32 { get }
public var SSL_F_SSL_INIT_WBIO_BUFFER: Int32 { get }
public var SSL_F_SSL_LOAD_CLIENT_CA_FILE: Int32 { get }
public var SSL_F_SSL_NEW: Int32 { get }
public var SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT: Int32 { get }
public var SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT: Int32 { get }
public var SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT: Int32 { get }
public var SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT: Int32 { get }
public var SSL_F_SSL_PEEK: Int32 { get }
public var SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_READ: Int32 { get }
public var SSL_F_SSL_RSA_PRIVATE_DECRYPT: Int32 { get }
public var SSL_F_SSL_RSA_PUBLIC_ENCRYPT: Int32 { get }
public var SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_F_SSL_SESSION_DUP: Int32 { get }
public var SSL_F_SSL_SESSION_NEW: Int32 { get }
public var SSL_F_SSL_SESSION_PRINT_FP: Int32 { get }
public var SSL_F_SSL_SESSION_SET1_ID_CONTEXT: Int32 { get }
public var SSL_F_SSL_SESS_CERT_NEW: Int32 { get }
public var SSL_F_SSL_SET_CERT: Int32 { get }
public var SSL_F_SSL_SET_CIPHER_LIST: Int32 { get }
public var SSL_F_SSL_SET_FD: Int32 { get }
public var SSL_F_SSL_SET_PKEY: Int32 { get }
public var SSL_F_SSL_SET_PURPOSE: Int32 { get }
public var SSL_F_SSL_SET_RFD: Int32 { get }
public var SSL_F_SSL_SET_SESSION: Int32 { get }
public var SSL_F_SSL_SET_SESSION_ID_CONTEXT: Int32 { get }
public var SSL_F_SSL_SET_SESSION_TICKET_EXT: Int32 { get }
public var SSL_F_SSL_SET_TRUST: Int32 { get }
public var SSL_F_SSL_SET_WFD: Int32 { get }
public var SSL_F_SSL_SHUTDOWN: Int32 { get }
public var SSL_F_SSL_SRP_CTX_INIT: Int32 { get }
public var SSL_F_SSL_UNDEFINED_CONST_FUNCTION: Int32 { get }
public var SSL_F_SSL_UNDEFINED_FUNCTION: Int32 { get }
public var SSL_F_SSL_UNDEFINED_VOID_FUNCTION: Int32 { get }
public var SSL_F_SSL_USE_CERTIFICATE: Int32 { get }
public var SSL_F_SSL_USE_CERTIFICATE_ASN1: Int32 { get }
public var SSL_F_SSL_USE_CERTIFICATE_FILE: Int32 { get }
public var SSL_F_SSL_USE_PRIVATEKEY: Int32 { get }
public var SSL_F_SSL_USE_PRIVATEKEY_ASN1: Int32 { get }
public var SSL_F_SSL_USE_PRIVATEKEY_FILE: Int32 { get }
public var SSL_F_SSL_USE_PSK_IDENTITY_HINT: Int32 { get }
public var SSL_F_SSL_USE_RSAPRIVATEKEY: Int32 { get }
public var SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1: Int32 { get }
public var SSL_F_SSL_USE_RSAPRIVATEKEY_FILE: Int32 { get }
public var SSL_F_SSL_VERIFY_CERT_CHAIN: Int32 { get }
public var SSL_F_SSL_WRITE: Int32 { get }
public var SSL_F_TLS12_CHECK_PEER_SIGALG: Int32 { get }
public var SSL_F_TLS1_CERT_VERIFY_MAC: Int32 { get }
public var SSL_F_TLS1_CHANGE_CIPHER_STATE: Int32 { get }
public var SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_F_TLS1_ENC: Int32 { get }
public var SSL_F_TLS1_EXPORT_KEYING_MATERIAL: Int32 { get }
public var SSL_F_TLS1_GET_CURVELIST: Int32 { get }
public var SSL_F_TLS1_HEARTBEAT: Int32 { get }
public var SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT: Int32 { get }
public var SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_F_TLS1_PRF: Int32 { get }
public var SSL_F_TLS1_SETUP_KEY_BLOCK: Int32 { get }
public var SSL_F_TLS1_SET_SERVER_SIGALGS: Int32 { get }
public var SSL_F_WRITE_PENDING: Int32 { get }

/* Reason codes. */
public var SSL_R_APP_DATA_IN_HANDSHAKE: Int32 { get }
public var SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT: Int32 { get }
public var SSL_R_BAD_ALERT_RECORD: Int32 { get }
public var SSL_R_BAD_AUTHENTICATION_TYPE: Int32 { get }
public var SSL_R_BAD_CHANGE_CIPHER_SPEC: Int32 { get }
public var SSL_R_BAD_CHECKSUM: Int32 { get }
public var SSL_R_BAD_DATA: Int32 { get }
public var SSL_R_BAD_DATA_RETURNED_BY_CALLBACK: Int32 { get }
public var SSL_R_BAD_DECOMPRESSION: Int32 { get }
public var SSL_R_BAD_DH_G_LENGTH: Int32 { get }
public var SSL_R_BAD_DH_G_VALUE: Int32 { get }
public var SSL_R_BAD_DH_PUB_KEY_LENGTH: Int32 { get }
public var SSL_R_BAD_DH_PUB_KEY_VALUE: Int32 { get }
public var SSL_R_BAD_DH_P_LENGTH: Int32 { get }
public var SSL_R_BAD_DH_P_VALUE: Int32 { get }
public var SSL_R_BAD_DIGEST_LENGTH: Int32 { get }
public var SSL_R_BAD_DSA_SIGNATURE: Int32 { get }
public var SSL_R_BAD_ECC_CERT: Int32 { get }
public var SSL_R_BAD_ECDSA_SIGNATURE: Int32 { get }
public var SSL_R_BAD_ECPOINT: Int32 { get }
public var SSL_R_BAD_HANDSHAKE_LENGTH: Int32 { get }
public var SSL_R_BAD_HELLO_REQUEST: Int32 { get }
public var SSL_R_BAD_LENGTH: Int32 { get }
public var SSL_R_BAD_MAC_DECODE: Int32 { get }
public var SSL_R_BAD_MAC_LENGTH: Int32 { get }
public var SSL_R_BAD_MESSAGE_TYPE: Int32 { get }
public var SSL_R_BAD_PACKET_LENGTH: Int32 { get }
public var SSL_R_BAD_PROTOCOL_VERSION_NUMBER: Int32 { get }
public var SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH: Int32 { get }
public var SSL_R_BAD_RESPONSE_ARGUMENT: Int32 { get }
public var SSL_R_BAD_RSA_DECRYPT: Int32 { get }
public var SSL_R_BAD_RSA_ENCRYPT: Int32 { get }
public var SSL_R_BAD_RSA_E_LENGTH: Int32 { get }
public var SSL_R_BAD_RSA_MODULUS_LENGTH: Int32 { get }
public var SSL_R_BAD_RSA_SIGNATURE: Int32 { get }
public var SSL_R_BAD_SIGNATURE: Int32 { get }
public var SSL_R_BAD_SRP_A_LENGTH: Int32 { get }
public var SSL_R_BAD_SRP_B_LENGTH: Int32 { get }
public var SSL_R_BAD_SRP_G_LENGTH: Int32 { get }
public var SSL_R_BAD_SRP_N_LENGTH: Int32 { get }
public var SSL_R_BAD_SRP_PARAMETERS: Int32 { get }
public var SSL_R_BAD_SRP_S_LENGTH: Int32 { get }
public var SSL_R_BAD_SRTP_MKI_VALUE: Int32 { get }
public var SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST: Int32 { get }
public var SSL_R_BAD_SSL_FILETYPE: Int32 { get }
public var SSL_R_BAD_SSL_SESSION_ID_LENGTH: Int32 { get }
public var SSL_R_BAD_STATE: Int32 { get }
public var SSL_R_BAD_VALUE: Int32 { get }
public var SSL_R_BAD_WRITE_RETRY: Int32 { get }
public var SSL_R_BIO_NOT_SET: Int32 { get }
public var SSL_R_BLOCK_CIPHER_PAD_IS_WRONG: Int32 { get }
public var SSL_R_BN_LIB: Int32 { get }
public var SSL_R_CA_DN_LENGTH_MISMATCH: Int32 { get }
public var SSL_R_CA_DN_TOO_LONG: Int32 { get }
public var SSL_R_CCS_RECEIVED_EARLY: Int32 { get }
public var SSL_R_CERTIFICATE_VERIFY_FAILED: Int32 { get }
public var SSL_R_CERT_CB_ERROR: Int32 { get }
public var SSL_R_CERT_LENGTH_MISMATCH: Int32 { get }
public var SSL_R_CHALLENGE_IS_DIFFERENT: Int32 { get }
public var SSL_R_CIPHER_CODE_WRONG_LENGTH: Int32 { get }
public var SSL_R_CIPHER_OR_HASH_UNAVAILABLE: Int32 { get }
public var SSL_R_CIPHER_TABLE_SRC_ERROR: Int32 { get }
public var SSL_R_CLIENTHELLO_TLSEXT: Int32 { get }
public var SSL_R_COMPRESSED_LENGTH_TOO_LONG: Int32 { get }
public var SSL_R_COMPRESSION_DISABLED: Int32 { get }
public var SSL_R_COMPRESSION_FAILURE: Int32 { get }
public var SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE: Int32 { get }
public var SSL_R_COMPRESSION_LIBRARY_ERROR: Int32 { get }
public var SSL_R_CONNECTION_ID_IS_DIFFERENT: Int32 { get }
public var SSL_R_CONNECTION_TYPE_NOT_SET: Int32 { get }
public var SSL_R_COOKIE_MISMATCH: Int32 { get }
public var SSL_R_DATA_BETWEEN_CCS_AND_FINISHED: Int32 { get }
public var SSL_R_DATA_LENGTH_TOO_LONG: Int32 { get }
public var SSL_R_DECRYPTION_FAILED: Int32 { get }
public var SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC: Int32 { get }
public var SSL_R_DH_KEY_TOO_SMALL: Int32 { get }
public var SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG: Int32 { get }
public var SSL_R_DIGEST_CHECK_FAILED: Int32 { get }
public var SSL_R_DTLS_MESSAGE_TOO_BIG: Int32 { get }
public var SSL_R_DUPLICATE_COMPRESSION_ID: Int32 { get }
public var SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT: Int32 { get }
public var SSL_R_ECC_CERT_NOT_FOR_SIGNING: Int32 { get }
public var SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE: Int32 { get }
public var SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE: Int32 { get }
public var SSL_R_ECDH_REQUIRED_FOR_SUITEB_MODE: Int32 { get }
public var SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER: Int32 { get }
public var SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST: Int32 { get }
public var SSL_R_ENCRYPTED_LENGTH_TOO_LONG: Int32 { get }
public var SSL_R_ERROR_GENERATING_TMP_RSA_KEY: Int32 { get }
public var SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST: Int32 { get }
public var SSL_R_EXCESSIVE_MESSAGE_SIZE: Int32 { get }
public var SSL_R_EXTRA_DATA_IN_MESSAGE: Int32 { get }
public var SSL_R_GOT_A_FIN_BEFORE_A_CCS: Int32 { get }
public var SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS: Int32 { get }
public var SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION: Int32 { get }
public var SSL_R_HTTPS_PROXY_REQUEST: Int32 { get }
public var SSL_R_HTTP_REQUEST: Int32 { get }
public var SSL_R_ILLEGAL_PADDING: Int32 { get }
public var SSL_R_ILLEGAL_SUITEB_DIGEST: Int32 { get }
public var SSL_R_INAPPROPRIATE_FALLBACK: Int32 { get }
public var SSL_R_INCONSISTENT_COMPRESSION: Int32 { get }
public var SSL_R_INVALID_CHALLENGE_LENGTH: Int32 { get }
public var SSL_R_INVALID_COMMAND: Int32 { get }
public var SSL_R_INVALID_COMPRESSION_ALGORITHM: Int32 { get }
public var SSL_R_INVALID_NULL_CMD_NAME: Int32 { get }
public var SSL_R_INVALID_PURPOSE: Int32 { get }
public var SSL_R_INVALID_SERVERINFO_DATA: Int32 { get }
public var SSL_R_INVALID_SRP_USERNAME: Int32 { get }
public var SSL_R_INVALID_STATUS_RESPONSE: Int32 { get }
public var SSL_R_INVALID_TICKET_KEYS_LENGTH: Int32 { get }
public var SSL_R_INVALID_TRUST: Int32 { get }
public var SSL_R_KEY_ARG_TOO_LONG: Int32 { get }
public var SSL_R_KRB5: Int32 { get }
public var SSL_R_KRB5_C_CC_PRINC: Int32 { get }
public var SSL_R_KRB5_C_GET_CRED: Int32 { get }
public var SSL_R_KRB5_C_INIT: Int32 { get }
public var SSL_R_KRB5_C_MK_REQ: Int32 { get }
public var SSL_R_KRB5_S_BAD_TICKET: Int32 { get }
public var SSL_R_KRB5_S_INIT: Int32 { get }
public var SSL_R_KRB5_S_RD_REQ: Int32 { get }
public var SSL_R_KRB5_S_TKT_EXPIRED: Int32 { get }
public var SSL_R_KRB5_S_TKT_NYV: Int32 { get }
public var SSL_R_KRB5_S_TKT_SKEW: Int32 { get }
public var SSL_R_LENGTH_MISMATCH: Int32 { get }
public var SSL_R_LENGTH_TOO_SHORT: Int32 { get }
public var SSL_R_LIBRARY_BUG: Int32 { get }
public var SSL_R_LIBRARY_HAS_NO_CIPHERS: Int32 { get }
public var SSL_R_MESSAGE_TOO_LONG: Int32 { get }
public var SSL_R_MISSING_DH_DSA_CERT: Int32 { get }
public var SSL_R_MISSING_DH_KEY: Int32 { get }
public var SSL_R_MISSING_DH_RSA_CERT: Int32 { get }
public var SSL_R_MISSING_DSA_SIGNING_CERT: Int32 { get }
public var SSL_R_MISSING_ECDH_CERT: Int32 { get }
public var SSL_R_MISSING_ECDSA_SIGNING_CERT: Int32 { get }
public var SSL_R_MISSING_EXPORT_TMP_DH_KEY: Int32 { get }
public var SSL_R_MISSING_EXPORT_TMP_RSA_KEY: Int32 { get }
public var SSL_R_MISSING_RSA_CERTIFICATE: Int32 { get }
public var SSL_R_MISSING_RSA_ENCRYPTING_CERT: Int32 { get }
public var SSL_R_MISSING_RSA_SIGNING_CERT: Int32 { get }
public var SSL_R_MISSING_SRP_PARAM: Int32 { get }
public var SSL_R_MISSING_TMP_DH_KEY: Int32 { get }
public var SSL_R_MISSING_TMP_ECDH_KEY: Int32 { get }
public var SSL_R_MISSING_TMP_RSA_KEY: Int32 { get }
public var SSL_R_MISSING_TMP_RSA_PKEY: Int32 { get }
public var SSL_R_MISSING_VERIFY_MESSAGE: Int32 { get }
public var SSL_R_MULTIPLE_SGC_RESTARTS: Int32 { get }
public var SSL_R_NON_SSLV2_INITIAL_PACKET: Int32 { get }
public var SSL_R_NO_CERTIFICATES_RETURNED: Int32 { get }
public var SSL_R_NO_CERTIFICATE_ASSIGNED: Int32 { get }
public var SSL_R_NO_CERTIFICATE_RETURNED: Int32 { get }
public var SSL_R_NO_CERTIFICATE_SET: Int32 { get }
public var SSL_R_NO_CERTIFICATE_SPECIFIED: Int32 { get }
public var SSL_R_NO_CIPHERS_AVAILABLE: Int32 { get }
public var SSL_R_NO_CIPHERS_PASSED: Int32 { get }
public var SSL_R_NO_CIPHERS_SPECIFIED: Int32 { get }
public var SSL_R_NO_CIPHER_LIST: Int32 { get }
public var SSL_R_NO_CIPHER_MATCH: Int32 { get }
public var SSL_R_NO_CLIENT_CERT_METHOD: Int32 { get }
public var SSL_R_NO_CLIENT_CERT_RECEIVED: Int32 { get }
public var SSL_R_NO_COMPRESSION_SPECIFIED: Int32 { get }
public var SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER: Int32 { get }
public var SSL_R_NO_METHOD_SPECIFIED: Int32 { get }
public var SSL_R_NO_PEM_EXTENSIONS: Int32 { get }
public var SSL_R_NO_PRIVATEKEY: Int32 { get }
public var SSL_R_NO_PRIVATE_KEY_ASSIGNED: Int32 { get }
public var SSL_R_NO_PROTOCOLS_AVAILABLE: Int32 { get }
public var SSL_R_NO_PUBLICKEY: Int32 { get }
public var SSL_R_NO_RENEGOTIATION: Int32 { get }
public var SSL_R_NO_REQUIRED_DIGEST: Int32 { get }
public var SSL_R_NO_SHARED_CIPHER: Int32 { get }
public var SSL_R_NO_SHARED_SIGATURE_ALGORITHMS: Int32 { get }
public var SSL_R_NO_SRTP_PROFILES: Int32 { get }
public var SSL_R_NO_VERIFY_CALLBACK: Int32 { get }
public var SSL_R_NULL_SSL_CTX: Int32 { get }
public var SSL_R_NULL_SSL_METHOD_PASSED: Int32 { get }
public var SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED: Int32 { get }
public var SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED: Int32 { get }
public var SSL_R_ONLY_DTLS_1_2_ALLOWED_IN_SUITEB_MODE: Int32 { get }
public var SSL_R_ONLY_TLS_1_2_ALLOWED_IN_SUITEB_MODE: Int32 { get }
public var SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE: Int32 { get }
public var SSL_R_OPAQUE_PRF_INPUT_TOO_LONG: Int32 { get }
public var SSL_R_PACKET_LENGTH_TOO_LONG: Int32 { get }
public var SSL_R_PARSE_TLSEXT: Int32 { get }
public var SSL_R_PATH_TOO_LONG: Int32 { get }
public var SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE: Int32 { get }
public var SSL_R_PEER_ERROR: Int32 { get }
public var SSL_R_PEER_ERROR_CERTIFICATE: Int32 { get }
public var SSL_R_PEER_ERROR_NO_CERTIFICATE: Int32 { get }
public var SSL_R_PEER_ERROR_NO_CIPHER: Int32 { get }
public var SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE: Int32 { get }
public var SSL_R_PEM_NAME_BAD_PREFIX: Int32 { get }
public var SSL_R_PEM_NAME_TOO_SHORT: Int32 { get }
public var SSL_R_PRE_MAC_LENGTH_TOO_LONG: Int32 { get }
public var SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS: Int32 { get }
public var SSL_R_PROTOCOL_IS_SHUTDOWN: Int32 { get }
public var SSL_R_PSK_IDENTITY_NOT_FOUND: Int32 { get }
public var SSL_R_PSK_NO_CLIENT_CB: Int32 { get }
public var SSL_R_PSK_NO_SERVER_CB: Int32 { get }
public var SSL_R_PUBLIC_KEY_ENCRYPT_ERROR: Int32 { get }
public var SSL_R_PUBLIC_KEY_IS_NOT_RSA: Int32 { get }
public var SSL_R_PUBLIC_KEY_NOT_RSA: Int32 { get }
public var SSL_R_READ_BIO_NOT_SET: Int32 { get }
public var SSL_R_READ_TIMEOUT_EXPIRED: Int32 { get }
public var SSL_R_READ_WRONG_PACKET_TYPE: Int32 { get }
public var SSL_R_RECORD_LENGTH_MISMATCH: Int32 { get }
public var SSL_R_RECORD_TOO_LARGE: Int32 { get }
public var SSL_R_RECORD_TOO_SMALL: Int32 { get }
public var SSL_R_RENEGOTIATE_EXT_TOO_LONG: Int32 { get }
public var SSL_R_RENEGOTIATION_ENCODING_ERR: Int32 { get }
public var SSL_R_RENEGOTIATION_MISMATCH: Int32 { get }
public var SSL_R_REQUIRED_CIPHER_MISSING: Int32 { get }
public var SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING: Int32 { get }
public var SSL_R_REUSE_CERT_LENGTH_NOT_ZERO: Int32 { get }
public var SSL_R_REUSE_CERT_TYPE_NOT_ZERO: Int32 { get }
public var SSL_R_REUSE_CIPHER_LIST_NOT_ZERO: Int32 { get }
public var SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING: Int32 { get }
public var SSL_R_SERVERHELLO_TLSEXT: Int32 { get }
public var SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED: Int32 { get }
public var SSL_R_SHORT_READ: Int32 { get }
public var SSL_R_SHUTDOWN_WHILE_IN_INIT: Int32 { get }
public var SSL_R_SIGNATURE_ALGORITHMS_ERROR: Int32 { get }
public var SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE: Int32 { get }
public var SSL_R_SRP_A_CALC: Int32 { get }
public var SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES: Int32 { get }
public var SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG: Int32 { get }
public var SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE: Int32 { get }
public var SSL_R_SSL23_DOING_SESSION_ID_REUSE: Int32 { get }
public var SSL_R_SSL2_CONNECTION_ID_TOO_LONG: Int32 { get }
public var SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT: Int32 { get }
public var SSL_R_SSL3_EXT_INVALID_SERVERNAME: Int32 { get }
public var SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE: Int32 { get }
public var SSL_R_SSL3_SESSION_ID_TOO_LONG: Int32 { get }
public var SSL_R_SSL3_SESSION_ID_TOO_SHORT: Int32 { get }
public var SSL_R_SSLV3_ALERT_BAD_CERTIFICATE: Int32 { get }
public var SSL_R_SSLV3_ALERT_BAD_RECORD_MAC: Int32 { get }
public var SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED: Int32 { get }
public var SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED: Int32 { get }
public var SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN: Int32 { get }
public var SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE: Int32 { get }
public var SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE: Int32 { get }
public var SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER: Int32 { get }
public var SSL_R_SSLV3_ALERT_NO_CERTIFICATE: Int32 { get }
public var SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE: Int32 { get }
public var SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE: Int32 { get }
public var SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION: Int32 { get }
public var SSL_R_SSL_HANDSHAKE_FAILURE: Int32 { get }
public var SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS: Int32 { get }
public var SSL_R_SSL_SESSION_ID_CALLBACK_FAILED: Int32 { get }
public var SSL_R_SSL_SESSION_ID_CONFLICT: Int32 { get }
public var SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG: Int32 { get }
public var SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH: Int32 { get }
public var SSL_R_SSL_SESSION_ID_IS_DIFFERENT: Int32 { get }
public var SSL_R_TLSV1_ALERT_ACCESS_DENIED: Int32 { get }
public var SSL_R_TLSV1_ALERT_DECODE_ERROR: Int32 { get }
public var SSL_R_TLSV1_ALERT_DECRYPTION_FAILED: Int32 { get }
public var SSL_R_TLSV1_ALERT_DECRYPT_ERROR: Int32 { get }
public var SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION: Int32 { get }
public var SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK: Int32 { get }
public var SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY: Int32 { get }
public var SSL_R_TLSV1_ALERT_INTERNAL_ERROR: Int32 { get }
public var SSL_R_TLSV1_ALERT_NO_RENEGOTIATION: Int32 { get }
public var SSL_R_TLSV1_ALERT_PROTOCOL_VERSION: Int32 { get }
public var SSL_R_TLSV1_ALERT_RECORD_OVERFLOW: Int32 { get }
public var SSL_R_TLSV1_ALERT_UNKNOWN_CA: Int32 { get }
public var SSL_R_TLSV1_ALERT_USER_CANCELLED: Int32 { get }
public var SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE: Int32 { get }
public var SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE: Int32 { get }
public var SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE: Int32 { get }
public var SSL_R_TLSV1_UNRECOGNIZED_NAME: Int32 { get }
public var SSL_R_TLSV1_UNSUPPORTED_EXTENSION: Int32 { get }
public var SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER: Int32 { get }
public var SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT: Int32 { get }
public var SSL_R_TLS_HEARTBEAT_PENDING: Int32 { get }
public var SSL_R_TLS_ILLEGAL_EXPORTER_LABEL: Int32 { get }
public var SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST: Int32 { get }
public var SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST: Int32 { get }
public var SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG: Int32 { get }
public var SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER: Int32 { get }
public var SSL_R_UNABLE_TO_DECODE_DH_CERTS: Int32 { get }
public var SSL_R_UNABLE_TO_DECODE_ECDH_CERTS: Int32 { get }
public var SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY: Int32 { get }
public var SSL_R_UNABLE_TO_FIND_DH_PARAMETERS: Int32 { get }
public var SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS: Int32 { get }
public var SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS: Int32 { get }
public var SSL_R_UNABLE_TO_FIND_SSL_METHOD: Int32 { get }
public var SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES: Int32 { get }
public var SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES: Int32 { get }
public var SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES: Int32 { get }
public var SSL_R_UNEXPECTED_MESSAGE: Int32 { get }
public var SSL_R_UNEXPECTED_RECORD: Int32 { get }
public var SSL_R_UNINITIALIZED: Int32 { get }
public var SSL_R_UNKNOWN_ALERT_TYPE: Int32 { get }
public var SSL_R_UNKNOWN_CERTIFICATE_TYPE: Int32 { get }
public var SSL_R_UNKNOWN_CIPHER_RETURNED: Int32 { get }
public var SSL_R_UNKNOWN_CIPHER_TYPE: Int32 { get }
public var SSL_R_UNKNOWN_CMD_NAME: Int32 { get }
public var SSL_R_UNKNOWN_DIGEST: Int32 { get }
public var SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE: Int32 { get }
public var SSL_R_UNKNOWN_PKEY_TYPE: Int32 { get }
public var SSL_R_UNKNOWN_PROTOCOL: Int32 { get }
public var SSL_R_UNKNOWN_REMOTE_ERROR_TYPE: Int32 { get }
public var SSL_R_UNKNOWN_SSL_VERSION: Int32 { get }
public var SSL_R_UNKNOWN_STATE: Int32 { get }
public var SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED: Int32 { get }
public var SSL_R_UNSUPPORTED_CIPHER: Int32 { get }
public var SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM: Int32 { get }
public var SSL_R_UNSUPPORTED_DIGEST_TYPE: Int32 { get }
public var SSL_R_UNSUPPORTED_ELLIPTIC_CURVE: Int32 { get }
public var SSL_R_UNSUPPORTED_PROTOCOL: Int32 { get }
public var SSL_R_UNSUPPORTED_SSL_VERSION: Int32 { get }
public var SSL_R_UNSUPPORTED_STATUS_TYPE: Int32 { get }
public var SSL_R_USE_SRTP_NOT_NEGOTIATED: Int32 { get }
public var SSL_R_WRITE_BIO_NOT_SET: Int32 { get }
public var SSL_R_WRONG_CERTIFICATE_TYPE: Int32 { get }
public var SSL_R_WRONG_CIPHER_RETURNED: Int32 { get }
public var SSL_R_WRONG_CURVE: Int32 { get }
public var SSL_R_WRONG_MESSAGE_TYPE: Int32 { get }
public var SSL_R_WRONG_NUMBER_OF_KEY_BITS: Int32 { get }
public var SSL_R_WRONG_SIGNATURE_LENGTH: Int32 { get }
public var SSL_R_WRONG_SIGNATURE_SIZE: Int32 { get }
public var SSL_R_WRONG_SIGNATURE_TYPE: Int32 { get }
public var SSL_R_WRONG_SSL_VERSION: Int32 { get }
public var SSL_R_WRONG_VERSION_NUMBER: Int32 { get }
public var SSL_R_X509_LIB: Int32 { get }
public var SSL_R_X509_VERIFICATION_SETUP_PROBLEMS: Int32 { get }
/* crypto/md4/md4.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*-
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * ! MD4_LONG has to be at least 32 bits wide. If it's wider, then !
 * ! MD4_LONG_LOG2 has to be defined along.                        !
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

/*
 * _CRAY note. I could declare short, but I have no idea what impact
 * does it have on performance on none-T3E machines. I could declare
 * int, but at least on C90 sizeof(int) can be chosen at compile time.
 * So I've chosen long...
 *                                      <appro@fy.chalmers.se>
 */

public var MD4_CBLOCK: Int32 { get }

public var MD4_DIGEST_LENGTH: Int32 { get }

public struct MD4state_st {

    public var A: UInt32

    public var B: UInt32

    public var C: UInt32

    public var D: UInt32

    public var Nl: UInt32

    public var Nh: UInt32

    public var data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)

    public var num: UInt32

    public init()

    public init(A: UInt32, B: UInt32, C: UInt32, D: UInt32, Nl: UInt32, Nh: UInt32, data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32), num: UInt32)
}
public typealias MD4_CTX = MD4state_st

public func MD4_Init(_ c: UnsafeMutablePointer<MD4_CTX>!) -> Int32
public func MD4_Update(_ c: UnsafeMutablePointer<MD4_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func MD4_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<MD4_CTX>!) -> Int32
public func MD4(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func MD4_Transform(_ c: UnsafeMutablePointer<MD4_CTX>!, _ b: UnsafePointer<UInt8>!)
/* crypto/md5/md5.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/*
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * ! MD5_LONG has to be at least 32 bits wide. If it's wider, then !
 * ! MD5_LONG_LOG2 has to be defined along.                        !
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

/*
 * _CRAY note. I could declare short, but I have no idea what impact
 * does it have on performance on none-T3E machines. I could declare
 * int, but at least on C90 sizeof(int) can be chosen at compile time.
 * So I've chosen long...
 *                                      <appro@fy.chalmers.se>
 */

public var MD5_CBLOCK: Int32 { get }

public var MD5_DIGEST_LENGTH: Int32 { get }

public struct MD5state_st {

    public var A: UInt32

    public var B: UInt32

    public var C: UInt32

    public var D: UInt32

    public var Nl: UInt32

    public var Nh: UInt32

    public var data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32)

    public var num: UInt32

    public init()

    public init(A: UInt32, B: UInt32, C: UInt32, D: UInt32, Nl: UInt32, Nh: UInt32, data: (UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32, UInt32), num: UInt32)
}
public typealias MD5_CTX = MD5state_st

public func MD5_Init(_ c: UnsafeMutablePointer<MD5_CTX>!) -> Int32
public func MD5_Update(_ c: UnsafeMutablePointer<MD5_CTX>!, _ data: UnsafeRawPointer!, _ len: Int) -> Int32
public func MD5_Final(_ md: UnsafeMutablePointer<UInt8>!, _ c: UnsafeMutablePointer<MD5_CTX>!) -> Int32
public func MD5(_ d: UnsafePointer<UInt8>!, _ n: Int, _ md: UnsafeMutablePointer<UInt8>!) -> UnsafeMutablePointer<UInt8>!
public func MD5_Transform(_ c: UnsafeMutablePointer<MD5_CTX>!, _ b: UnsafePointer<UInt8>!)
/* crypto/rand/rand.h */
/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 *
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 *
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 *
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

/* Already defined in ossl_typ.h */
/* typedef struct rand_meth_st RAND_METHOD; */

public struct rand_meth_st {

    public var seed: (@convention(c) (UnsafeRawPointer?, Int32) -> Swift.Void)!

    public var bytes: (@convention(c) (UnsafeMutablePointer<UInt8>?, Int32) -> Int32)!

    public var cleanup: (@convention(c) () -> Swift.Void)!

    public var add: (@convention(c) (UnsafeRawPointer?, Int32, Double) -> Swift.Void)!

    public var pseudorand: (@convention(c) (UnsafeMutablePointer<UInt8>?, Int32) -> Int32)!

    public var status: (@convention(c) () -> Int32)!

    public init()

    public init(seed: (@escaping @convention(c) (UnsafeRawPointer?, Int32) -> Swift.Void)!, bytes: (@escaping @convention(c) (UnsafeMutablePointer<UInt8>?, Int32) -> Int32)!, cleanup: (@escaping @convention(c) () -> Swift.Void)!, add: (@escaping @convention(c) (UnsafeRawPointer?, Int32, Double) -> Swift.Void)!, pseudorand: (@escaping @convention(c) (UnsafeMutablePointer<UInt8>?, Int32) -> Int32)!, status: (@escaping @convention(c) () -> Int32)!)
}

public func RAND_set_rand_method(_ meth: UnsafePointer<RAND_METHOD>!) -> Int32
public func RAND_get_rand_method() -> UnsafePointer<RAND_METHOD>!

public func RAND_set_rand_engine(_ engine: OpaquePointer!) -> Int32

public func RAND_SSLeay() -> UnsafeMutablePointer<RAND_METHOD>!
public func RAND_cleanup()
public func RAND_bytes(_ buf: UnsafeMutablePointer<UInt8>!, _ num: Int32) -> Int32
public func RAND_pseudo_bytes(_ buf: UnsafeMutablePointer<UInt8>!, _ num: Int32) -> Int32
public func RAND_seed(_ buf: UnsafeRawPointer!, _ num: Int32)
public func RAND_add(_ buf: UnsafeRawPointer!, _ num: Int32, _ entropy: Double)
public func RAND_load_file(_ file: UnsafePointer<Int8>!, _ max_bytes: Int) -> Int32
public func RAND_write_file(_ file: UnsafePointer<Int8>!) -> Int32
public func RAND_file_name(_ file: UnsafeMutablePointer<Int8>!, _ num: Int) -> UnsafePointer<Int8>!
public func RAND_status() -> Int32
public func RAND_query_egd_bytes(_ path: UnsafePointer<Int8>!, _ buf: UnsafeMutablePointer<UInt8>!, _ bytes: Int32) -> Int32
public func RAND_egd(_ path: UnsafePointer<Int8>!) -> Int32
public func RAND_egd_bytes(_ path: UnsafePointer<Int8>!, _ bytes: Int32) -> Int32
public func RAND_poll() -> Int32

/* BEGIN ERROR CODES */
/*
 * The following lines are auto generated by the script mkerr.pl. Any changes
 * made after this point may be overwritten when the script is next run.
 */
public func ERR_load_RAND_strings()

/* Error codes for the RAND functions. */

/* Function codes. */
public var RAND_F_RAND_GET_RAND_METHOD: Int32 { get }
public var RAND_F_RAND_INIT_FIPS: Int32 { get }
public var RAND_F_SSLEAY_RAND_BYTES: Int32 { get }

/* Reason codes. */
public var RAND_R_DUAL_EC_DRBG_DISABLED: Int32 { get }
public var RAND_R_ERROR_INITIALISING_DRBG: Int32 { get }
public var RAND_R_ERROR_INSTANTIATING_DRBG: Int32 { get }
public var RAND_R_NO_FIPS_RANDOM_METHOD_SET: Int32 { get }
public var RAND_R_PRNG_NOT_SEEDED: Int32 { get }
